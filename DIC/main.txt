
// dic.c
//
// Created: 13.03.2018 10:58:20
// Author : Ole Hannemann


//Definitions
// Data Lines - PORTE
// Enable     - PC2
// RS         - PC0
// RW         - PC1
#include<avr/interrupt.h>
#include <avr/io.h>

//DEFINES
#define rx_mobs 7

//VARIABLES

uint8_t can_data_bytes[rx_mobs][8];

void port_config();
void can_cfg();
void can_rx(uint8_t mobnum, uint16_t id);
void can_get_msg(uint8_t mobnum);
uint8_t can_check_free(uint8_t mobnum);
 void can_data_management(void);

uint8_t dsp_data [2][4][20];      // Array in which Data is saved which will be drawn onto the Display
uint8_t dsp_mde = 1;

uint8_t dsp_line[4] ={
	//This order is known by Trial and Error
	0xC0, //Line 4
	0x94, //Line 2
	0xD4, //Line 3
	0x80, //Line 1
};
//initbefehle
uint8_t dsp_command [7] = {   
	0x39, //function set european chararacter set
	0x08, //display off
	0x06, //entry mode set increment cursor by 1 not shifting display
	0x17, //Character mode and internal power on
	0x00, //0x01, //clear display NEVER USE CLS IT WILL GET THE DISPLAY HOT SICNE EXECUTION TIME >2 ms
	0x02, //return home
	0x0C, //display on
};

uint8_t update_data = 1;
uint8_t draw_data = 1;

uint8_t counter = 0;                //counts transmissions
uint8_t dsp_linecounter = 0;        //counts in which Line we currently are
uint8_t dsp_transmissions = 0;      //Counter for spi transmissions

// init Temparutes and pressures
uint16_t oilpres = 0;
uint8_t oilpres_001=0;
uint8_t oilpres_100=0;
uint8_t oilpres_010=0;

uint8_t coolertemp_001=0;
uint8_t coolertemp_100=0;
uint8_t coolertemp_010=0;

uint8_t tps = 0;
uint8_t tps_100 = 0;
uint8_t tps_010 = 0;
uint8_t tps_001 = 0;

uint8_t err_led = 0;

ISR(TIMER1_COMPA_vect)
{
	draw_data = 1;
	update_data++;
}



 void timer_config(void)
{
	//TIMER CONFIG
	TCCR1B |= (1<<CS12) | (1<<CS10) | (1<<WGM12);
	TIMSK1 |= (1<<OCIE1A);
	//start with a logical hightime
	OCR1A = 75;
}
//GENERAL FUNCTIONS
void initPorts(void)                                                 //initialises the needed ports
{
	DDRE = 0xFF;
	DDRC = (1<<PC0) | (1<<PC1) | (1<<PC2);
	PORTC = 0;
	PORTE = 0;
	
};
void dsp_writedata(uint8_t data,uint8_t rs) //writes data on the 8 Datapins for the 8 bit communication and the rs Pins
{
	//PORTE as Output
	PORTE = data;
		
	//SETS THE RS PIN
	if (rs==1)
	PORTC |= (1<<PC0);
	else
	PORTC &= ~(1<<PC0);


	//Sets enable high
	PORTC |= (1<<PC2);
	//Sets enable low
	for(int wait = 0; wait<100; wait++){}
	PORTC &= ~(1<<PC2);
	//This is doen so thta the display will read the data pins and process them
}
//Function to set customchars
//charpos = position in cgram
//line 1-8 lines of the char
void dsp_customchar(uint8_t charpos, uint8_t line1, uint8_t line2, uint8_t line3, uint8_t line4, uint8_t line5, uint8_t line6, uint8_t line7, uint8_t line8)
{
	//where to write in cgram
	dsp_writedata(0x40+8*charpos,0);

	//write each line
	dsp_writedata(line1,1);
	dsp_writedata(line2,1);
	dsp_writedata(line3,1);
	dsp_writedata(line4,1);
	dsp_writedata(line5,1);
	dsp_writedata(line6,1);
	dsp_writedata(line7,1);
	dsp_writedata(line8,1);

	//dsiplay return home
	dsp_writedata(0x02,0);
}

//ARAYMANIPULATION

//function for the gearindicator
void dsp_gearindicator(void){

	switch (dsp_received[1]){

		//NEUTRAL
		case 0:
		//First Line
		dsp_data[dsp_mde][0][17] = 0xFF;
		dsp_data[dsp_mde][0][18] = 0xFF;
		dsp_data[dsp_mde][0][19] = 0xFF;

		//second Line
		dsp_data[dsp_mde][1][17] = 0xFF;
		dsp_data[dsp_mde][1][18] = 0x10;
		dsp_data[dsp_mde][1][19] = 0xFF;

		//third Line
		dsp_data[dsp_mde][2][17] = 0xFF;
		dsp_data[dsp_mde][2][18] = 0x10;
		dsp_data[dsp_mde][2][19] = 0xFF;

		//fourth Line
		dsp_data[dsp_mde][3][17] = 0xFF;
		dsp_data[dsp_mde][3][18] = 0xFF;
		dsp_data[dsp_mde][3][19] = 0xFF;
		break;

		//First Gear
		case 1:
		//First Line
		dsp_data[dsp_mde][0][17] = 0x10;
		dsp_data[dsp_mde][0][18] = 0xFF;
		dsp_data[dsp_mde][0][19] = 0xFF;
		
		//second Line
		dsp_data[dsp_mde][1][17] = 0x10;
		dsp_data[dsp_mde][1][18] = 0x10;
		dsp_data[dsp_mde][1][19] = 0xFF;
		
		//third Line
		dsp_data[dsp_mde][2][17] = 0x10;
		dsp_data[dsp_mde][2][18] = 0x10;
		dsp_data[dsp_mde][2][19] = 0xFF;
		
		//fourth Line
		dsp_data[dsp_mde][3][17] = 0x10;
		dsp_data[dsp_mde][3][18] = 0x10;
		dsp_data[dsp_mde][3][19] = 0xFF;
		break;

		//Second Gear
		case 2:
		//First Line
		dsp_data[dsp_mde][0][17] = 0xFF;
		dsp_data[dsp_mde][0][18] = 0xFF;
		dsp_data[dsp_mde][0][19] = 0xFF;
		
		//second Line
		dsp_data[dsp_mde][1][17] = 0x00; //custom char 1
		dsp_data[dsp_mde][1][18] = 0x00; //custom char 1
		dsp_data[dsp_mde][1][19] = 0xFF;
		
		//third Line
		dsp_data[dsp_mde][2][17] = 0xFF;
		dsp_data[dsp_mde][2][18] = 0x01; //custom char 2
		dsp_data[dsp_mde][2][19] = 0x01; //custom char 2
		
		//fourth Line
		dsp_data[dsp_mde][3][17] = 0xFF;
		dsp_data[dsp_mde][3][18] = 0xFF;
		dsp_data[dsp_mde][3][19] = 0xFF;
		break;
		
		//Third Gear
		case 3:
		//First Line
		dsp_data[dsp_mde][0][17] = 0xFF;
		dsp_data[dsp_mde][0][18] = 0xFF;
		dsp_data[dsp_mde][0][19] = 0xFF;
		
		//second Line
		dsp_data[dsp_mde][1][17] = 0x00; //custom char 1
		dsp_data[dsp_mde][1][18] = 0x00; //custom char 1
		dsp_data[dsp_mde][1][19] = 0xFF;
		
		//third Line
		dsp_data[dsp_mde][2][17] = 0x01; //custom char 2
		dsp_data[dsp_mde][2][18] = 0x01; //custom char 2
		dsp_data[dsp_mde][2][19] = 0xFF;
		
		//fourth Line
		dsp_data[dsp_mde][3][17] = 0xFF;
		dsp_data[dsp_mde][3][18] = 0xFF;
		dsp_data[dsp_mde][3][19] = 0xFF;
		break;

		//Fourth Gear
		case 4:
		//First Line
		dsp_data[dsp_mde][0][17] = 0x03; //custom char 4
		dsp_data[dsp_mde][0][18] = 0x10;
		dsp_data[dsp_mde][0][19] = 0x10;
		
		//second Line
		dsp_data[dsp_mde][1][17] = 0x03; //custom char 4
		dsp_data[dsp_mde][1][18] = 0x02; //custom char 3
		dsp_data[dsp_mde][1][19] = 0x10;
		
		//third Line
		dsp_data[dsp_mde][2][17] = 0x04; //custom char 5
		dsp_data[dsp_mde][2][18] = 0x05; //custom char 6
		dsp_data[dsp_mde][2][19] = 0x04; //custom char 5
		
		//fourth Line
		dsp_data[dsp_mde][3][17] = 0x10;
		dsp_data[dsp_mde][3][18] = 0x02; //custom char 3
		dsp_data[dsp_mde][3][19] = 0x10;
		break;

		//Fith Gear
		case 5:
		//First Line
		dsp_data[dsp_mde][0][17] = 0xFF;
		dsp_data[dsp_mde][0][18] = 0xFF;
		dsp_data[dsp_mde][0][19] = 0xFF;
		
		//second Line
		dsp_data[dsp_mde][1][17] = 0xFF;
		dsp_data[dsp_mde][1][18] = 0x00; //custom char 1
		dsp_data[dsp_mde][1][19] = 0x00; //custom char 1
		
		//third Line
		dsp_data[dsp_mde][2][17] = 0x01; //custom char 2
		dsp_data[dsp_mde][2][18] = 0x01; //custom char 2
		dsp_data[dsp_mde][2][19] = 0xFF;
		
		//fourth Line
		dsp_data[dsp_mde][3][17] = 0xFF;
		dsp_data[dsp_mde][3][18] = 0xFF;
		dsp_data[dsp_mde][3][19] = 0xFF;
		break;

		//6th Gear
		case 6:
		//First Line
		dsp_data[dsp_mde][0][17] = 0xFF;
		dsp_data[dsp_mde][0][18] = 0xFF;
		dsp_data[dsp_mde][0][19] = 0xFF;
		
		//second Line
		dsp_data[dsp_mde][1][17] = 0xFF;
		dsp_data[dsp_mde][1][18] = 0x00; //custom char 1
		dsp_data[dsp_mde][1][19] = 0x00; //custom char 1
		
		//third Line
		dsp_data[dsp_mde][2][17] = 0xFF;
		dsp_data[dsp_mde][2][18] = 0x10;
		dsp_data[dsp_mde][2][19] = 0xFF;
		
		//fourth Line
		dsp_data[dsp_mde][3][17] = 0xFF;
		dsp_data[dsp_mde][3][18] = 0xFF;
		dsp_data[dsp_mde][3][19] = 0xFF;
		break;
		
		//if no valid gear was transmitted
		default:
		dsp_data[dsp_mde][0][17] = 0xFF;
		dsp_data[dsp_mde][0][18] = 0xFF;
		dsp_data[dsp_mde][0][19] = 0xFF;
		
		dsp_data[dsp_mde][1][17] = 0xFF;
		dsp_data[dsp_mde][1][18] = 0xFF;
		dsp_data[dsp_mde][1][19] = 0xFF;
		
		dsp_data[dsp_mde][2][17] = 0xFF;
		dsp_data[dsp_mde][2][18] = 0xFF;
		dsp_data[dsp_mde][2][19] = 0xFF;
		
		dsp_data[dsp_mde][3][17] = 0xFF;
		dsp_data[dsp_mde][3][18] = 0xFF;
		dsp_data[dsp_mde][3][19] = 0xFF;
		break;

		
	}

	
}
void dsp_arrayinit(void)
{

	//init the Display with and empty char
	for (int i = 0; i<4;i++){
		for (int s=0;s<20;s++){
			dsp_data[0][i][s]=0x10;
			dsp_data[1][i][s]=0x10;
		}
	}

	//STATUSINDICATOR
	// writes =
	dsp_data[1][3][1] = '=';
	dsp_data[1][3][8] = '=';
	dsp_data[1][2][6] = '=';
	dsp_data[1][2][10] = '=';
	dsp_data[1][2][14] = '=';
	
	// writes C for coolingtemparature
	dsp_data[1][3][0] = 'C';
	// writes O
	dsp_data[1][3][7] = 'O';
	// writes C
	dsp_data[1][3][5] =  'C';
	// writes B
	dsp_data[1][3][13] = 'B';
	// writes .
	dsp_data[1][3][10] = '.';
	//writes a A for Autoshift
	dsp_data[1][2][5] = 'A';
	//writes a T for TCS
	dsp_data[1][2][9] = 'T';
	//writes a E for error LED
	dsp_data[1][2][13] = 'E';
	//0 for RPM
	dsp_data[1][2][0]= 0x30;
	dsp_data[1][2][1]= 0x30;
	dsp_data[1][2][2]= 0x30;
	dsp_data[1][2][3]= 0x30;
	
	//DEBUG INTERFACE
	dsp_data[0][0][0] = 'B'; dsp_data[0][0][1] = 'P'; dsp_data[0][0][2] = 'F'; dsp_data[0][0][3] = 'R'; dsp_data[0][0][4] = '='; dsp_data[0][0][7] = 'B';	//implemented
	dsp_data[0][1][0] = 'B'; dsp_data[0][1][1] = 'P'; dsp_data[0][1][2] = 'R'; dsp_data[0][1][3] = 'E'; dsp_data[0][1][4] = '='; dsp_data[0][1][7] = 'B';	//implemented
	dsp_data[0][2][0] = 'B'; dsp_data[0][2][1] = 'T'; dsp_data[0][2][2] = 'L'; dsp_data[0][2][3] = '='; dsp_data[0][2][7] = 'C';							//implemented
	dsp_data[0][3][0] = 'B'; dsp_data[0][3][1] = 'T'; dsp_data[0][3][2] = 'R'; dsp_data[0][3][3] = '='; dsp_data[0][3][7] = 'C';							//implemented
	
	dsp_data[0][0][9] = 'V'; dsp_data[0][0][10] = 'B'; dsp_data[0][0][11] = '='; dsp_data[0][0][14] = '.'; dsp_data[0][0][16] = 'V';						//implemented
	dsp_data[0][1][9] = 'T'; dsp_data[0][1][10] = 'P'; dsp_data[0][1][11] = 'S'; dsp_data[0][1][12] = '='; dsp_data[0][1][16] = 0x06; 					//implemented
	dsp_data[0][2][9] = 'O'; dsp_data[0][2][10] = 'i'; dsp_data[0][2][11] = 'T'; dsp_data[0][2][12] = '='; dsp_data[0][2][16] = 'C';            //implemented
	dsp_data[0][3][9] = 'S'; dsp_data[0][3][10] = 'l'; dsp_data[0][3][11] = 'i'; dsp_data[0][3][12] = '='; dsp_data[0][3][16] = 0x06;

	
}

void dsp_break_pres(){
	
	uint8_t bpf = dsp_received[10];
	uint8_t bpr = dsp_received[11];
	
	uint8_t bpf_01=bpf%10;
	uint8_t bpf_10=(bpf-bpf_01)/10;
	
	uint8_t bpr_01=bpr%10;
	uint8_t bpr_10=(bpf-bpr_01)/10;
	
	if(bpf_10==0)
	dsp_data[0][0][5] = 0x10;
	else
	dsp_data[0][0][5] = 0x30 + bpf_10;
	dsp_data[0][0][6] = 0x30 + bpf_01;
	if(bpr_10 == 0)
	dsp_data[0][1][5] = 0x10;
	else
	dsp_data[0][1][5] = 0x30 + bpr_10;
	dsp_data[0][1][6] = 0x30 + bpr_01;
	
}

void dsp_break_temp(){
	uint16_t temp_left = dsp_received[8]*3;
	uint16_t temp_right = dsp_received[9]*3;
	
	uint8_t temp_left_001 = temp_left%10;
	uint8_t temp_left_100 = temp_left/100;
	uint8_t temp_left_010 = (temp_left-temp_left_001-temp_left_100*100)/10;

	uint8_t temp_right_001 = temp_right%10;
	uint8_t temp_right_100 = temp_right/100;
	uint8_t temp_right_010 = (temp_right-temp_right_001-temp_right_100*100)/10;

	if(temp_left_100 == 0)
	dsp_data[0][2][4] = 0x10;
	else
	dsp_data[0][2][4] = 0x30 + temp_left_100;
	if(temp_left_100 == 0 & temp_left_010 == 0)
	dsp_data[0][2][5] = 0x10;
	else
	dsp_data[0][2][5] = 0x30 + temp_left_010;
	dsp_data[0][2][6] = 0x30 + temp_left_001;
	if(temp_right_100 == 0)
	dsp_data[0][3][4] = 0x10;
	else
	dsp_data[0][3][4] = 0x30 + temp_right_100;
	if(temp_right_100 == 0 && temp_right_010 == 0)
	dsp_data[0][3][5] = 0x10;
	else
	dsp_data[0][3][5] = 0x30 + temp_right_010;
	dsp_data[0][3][6] = 0x30 + temp_right_001;
	
	

}

void dsp_oil_temp(){
	
	uint8_t ot = dsp_received[13];
	
	uint8_t ot_100 = ot/100;
	uint8_t ot_001 = ot%10;
	uint8_t ot_010 = (ot-ot_001-ot_100*100)/10;
	
	if(ot_100 == 0)
	dsp_data[0][2][13] = 0x10;
	else
	dsp_data[0][2][13] = 0x30 + ot_100;
	
	if(ot_100 == 0 && ot_010 == 0)
	dsp_data[0][2][14] = 0x10;
	else
	dsp_data[0][2][14] = 0x30 + ot_010;
	
	dsp_data[0][2][15] = 0x30 + ot_001;
	
	
	
}

void dsp_voltage(){
	uint8_t vbat = dsp_received[15];
	uint8_t vbat_001=vbat%10;
	uint8_t vbat_100=vbat/100;
	uint8_t vbat_010=(vbat-vbat_001-vbat_100*100)/10;
	
	if(vbat_100 == 0)
	dsp_data[0][0][12] = 0x10;
	else
	dsp_data[0][0][12] = 0x30 + vbat_100;
	
	dsp_data[0][0][13] = 0x30 + vbat_010;
	dsp_data[0][0][15] = 0x30 + vbat_001;
	
}

void dsp_mode(){
	
	dsp_mde = dsp_received[4];
	if (dsp_mde>1)
	dsp_mde=1;
	
}

void dsp_tcs(){
	
	dsp_data[1][2][11] = 0x30 + dsp_received[12];
}

void dsp_autoshift(){

	dsp_data[1][2][7] = 'N';
	
	if (dsp_received[5]>=1)
	dsp_data[1][2][7] = 'Y';
}

void dsp_tps_err(){

	uint8_t  tps = dsp_received[7];
	tps_001=tps%10;
	tps_100=tps/100;
	tps_010=(tps-tps_001-tps_100*100)/10;

	if(tps_100 == 0)
	dsp_data[0][1][13] = 0x10;
	else
	dsp_data[0][1][13] = 0x30+tps_100;
	if(tps_100 == 0 && tps_010 == 0)
	dsp_data[0][1][14] = 0x10;
	else
	dsp_data[0][1][14] = 0x30+tps_010;

	dsp_data[0][1][15] = 0x30+tps_001;

	dsp_data[1][2][15] = 0x30+dsp_received[6];
	
}

void dsp_rpm()
{

	uint16_t rpm = dsp_received[0]*5;
	uint8_t rpm_bars = rpm/60;

	uint8_t rpm_001=rpm%10;
	uint8_t rpm_100=rpm/100;
	uint8_t rpm_010=(rpm-rpm_001-rpm_100*100)/10;

	if(rpm_100 == 0)
	dsp_data[1][2][0]=0x10;
	else
	dsp_data[1][2][0]=0x30+rpm_100;
	if(rpm_100 == 0)
	dsp_data[1][2][1]=0x10;
	else
	dsp_data[1][2][1]=0x30+rpm_010;
	if(rpm_100 == 0)
	dsp_data[1][2][2]=0x10;
	else
	dsp_data[1][2][2]=0x30+rpm_001;



	if (rpm_bars > 16) //PANZERTAPE METHODE
	rpm_bars = 16;
	
	//Reset unused bars of the Display
	for (int s=rpm_bars; s<16; s++){
		
		dsp_data[1][0][s] = 0x10;
		dsp_data[1][1][s] = 0x10;
		
	}
	//write RPM
	for (int s=0; s<rpm_bars;s++){
		
		//sign for display
		dsp_data[1][0][s] = 0xff;
		dsp_data[1][1][s] = 0xff;
	}
	
}

void dsp_refresh_temp(void)
{

	oilpres = dsp_received[2]*6.25;
	oilpres_001=oilpres%10;
	oilpres_100=oilpres/100;
	oilpres_010=(oilpres-oilpres_001-oilpres_100*100)/10;

	coolertemp_001=dsp_received[3]%10;
	coolertemp_100=dsp_received[3]/100;
	coolertemp_010=(dsp_received[3]-coolertemp_001-coolertemp_100*100)/10;

}

void dsp_status(void){

	//get new numbers
	dsp_refresh_temp();

	//0x30 is the offset for numbers
	if(coolertemp_100 == 0)
	dsp_data[1][3][2] = 0x10;
	else
	dsp_data[1][3][2] = 0x30+coolertemp_100; // hunderter
	
	if(coolertemp_100 == 0 && coolertemp_010 == 0)
	dsp_data[1][3][3] = 0x10;
	else
	dsp_data[1][3][3] = 0x30+coolertemp_010; //zehner

	dsp_data[1][3][4] = 0x30+coolertemp_001; //einer
	

	dsp_data[1][3][9] =  0x30+oilpres_100;
	dsp_data[1][3][11] = 0x30+oilpres_010;
	dsp_data[1][3][12] = 0x30+oilpres_001;
}

//function to write the complete Display
void dsp_write()
{
	if (counter<20)
	dsp_writedata(dsp_data[dsp_mde][dsp_linecounter][counter++],1);
	if (counter == 20){

		//go into next line
		dsp_writedata(dsp_line[dsp_linecounter],0);
		counter=0;
		dsp_linecounter+=1;
	}
	if (dsp_linecounter == 4){
		dsp_linecounter = 0;
	}
}

//Defines all our custom chars we need
void dsp_definechars()
{
	//definition of needed custom chars
	dsp_customchar(0,0,0,0,0,0,0x1F,0x1F,0x1F);
	dsp_customchar(1,0x1F,0x1F,0,0,0,0,0,0);
	dsp_customchar(2,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF);
	dsp_customchar(3,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E);
	dsp_customchar(4,0xFF,0xFF,0xFF,0xFF,0,0,0,0);
	dsp_customchar(5,0xFF,0xFF,0xFF,0xFF,0xEF,0xEF,0xEF,0xEF);
	dsp_customchar(6,0x08,0x15,0x0A,0x04,0x0A,0x15,0x02,0x00);
	
}

//runs through the init commands
void dsp_initdsp()
{
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++){
		dsp_writedata(dsp_command[i],0);
	}
	
}

// MAIN FUNCTION

int main(void)
{
	//Init and config part
	initPorts();
	dsp_initdsp();
	dsp_arrayinit();
	dsp_definechars();
	timer_config();
	can_cfg();
	sei();

	//Loop
	while(1){

		if(update_data>=44){
			update_data = 0;
			can_data_management();
			dsp_tps_err();
			dsp_mode();
			dsp_gearindicator();
			if (dsp_mde == 1){
				dsp_rpm();
				dsp_status();
				dsp_autoshift();
				dsp_tcs();
			}
			else {
				dsp_break_temp();
				dsp_voltage();
				dsp_break_pres();
				dsp_oil_temp();
			}
		}
		if(draw_data){
			dsp_write();
			draw_data = 0;
		}	
	}	
}

void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
		CANSTMOB = 0;
		CANCDMOB = 0;
		CANIDT4 = 0;
		CANIDT3 = 0;
		CANIDT2 = 0;
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x02;// Set Baudrate
	CANBT2 = 0x0C;// 500kBaud according
	CANBT3 = 0x37;// to Datasheet S. 267

	CANGIE = 0;

	CANIE2 = 1 << IEMOB0 | 1<<IEMOB1;

	CANGCON |= (1<<ENASTB); // Enable CAN
}
void can_rx(uint8_t mobnum, uint16_t id){

	CANPAGE = mobnum << MOBNB0;
	if (can_check_free(mobnum)){
		/* load the id 11 bit */
		CANIDT1 = id >>3;
		CANIDT2 = (id << 5)&0b11100000;
		CANIDT3 = 0;
		CANIDT4 = 1<<RTRTAG;
		CANIDM1 = 0b11111111;
		CANIDM2 = 0b11100000;
		CANIDM3 = 0;
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}

}
void can_get_msg(uint8_t mobnum){
	
	for(uint8_t byte = 0; byte <8; byte++){
		CANPAGE = (mobnum << MOBNB0) | (1 << AINC) | byte;
		can_data_bytes[mobnum][byte] = CANMSG;
	}

}
uint8_t can_check_free(uint8_t mobnum){
	
	uint8_t mob_status = 0;
	if(mobnum >7){
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
	} else {
		mob_status = !((CANEN2 >> mobnum) &1);
	}
	return mob_status;
}

can_data_management(void){

	
	can_rx(0, 0x200); // CMC Feedback Gear
	can_get_msg(0);
	can_rx(1,0x100); //SWC Feedback
	can_get_msg(1);
	can_rx(2,0x600); //ECU rpm tps map iat injpw
	can_get_msg(2);
	can_rx(3, 0x602); //ECU vspd baro oilt oilp fuelp clt,
	can_get_msg(3);
	can_rx(4,0x604); //ECU gear batt ecutemp errflag
	can_get_msg(4);
	can_rx(5,0x300); //DL VS_FR_L VS_FR_R VS_RE_R VS_RE_L
	can_get_msg(5);
	can_rx(6,0x301); //DL BP_F BP_R BT_FR_L BT_FR_R
	can_get_msg(6);


}