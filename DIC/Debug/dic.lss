
dic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00002a38  00002acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000280  008001d2  008001d2  00002b9e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00002b9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ad  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  00005105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d48  00000000  00000000  000062ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00007ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f33  00000000  00000000  000086c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3d  00000000  00000000  000095f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000a330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
      32:	00 00       	nop
      34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__vector_16>
      44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 16 12 	jmp	0x242c	; 0x242c <__vector_20>
      54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
      62:	00 00       	nop
      64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
      66:	00 00       	nop
      68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 e3       	ldi	r30, 0x38	; 56
      a8:	fa e2       	ldi	r31, 0x2A	; 42
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 3d       	cpi	r26, 0xD2	; 210
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	24 e0       	ldi	r18, 0x04	; 4
      bc:	a2 ed       	ldi	r26, 0xD2	; 210
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 35       	cpi	r26, 0x52	; 82
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <main>
      ce:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <_exit>

000000d2 <__bad_interrupt>:
      d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <can_check_free>:
#include "canlib.h"
#include <avr/io.h>



uint8_t can_check_free(uint8_t mobnum){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <can_check_free+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t mob_status = 0;
      e0:	19 82       	std	Y+1, r1	; 0x01
	
	if(mobnum >= 8){
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	88 30       	cpi	r24, 0x08	; 8
      e6:	c0 f0       	brcs	.+48     	; 0x118 <can_check_free+0x44>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
      e8:	8d ed       	ldi	r24, 0xDD	; 221
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	fc 01       	movw	r30, r24
      ee:	80 81       	ld	r24, Z
      f0:	88 2f       	mov	r24, r24
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a 81       	ldd	r18, Y+2	; 0x02
      f6:	22 2f       	mov	r18, r18
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	28 50       	subi	r18, 0x08	; 8
      fc:	31 09       	sbc	r19, r1
      fe:	02 c0       	rjmp	.+4      	; 0x104 <can_check_free+0x30>
     100:	95 95       	asr	r25
     102:	87 95       	ror	r24
     104:	2a 95       	dec	r18
     106:	e2 f7       	brpl	.-8      	; 0x100 <can_check_free+0x2c>
     108:	81 70       	andi	r24, 0x01	; 1
     10a:	99 27       	eor	r25, r25
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	89 2b       	or	r24, r25
     110:	09 f0       	breq	.+2      	; 0x114 <can_check_free+0x40>
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	29 83       	std	Y+1, r18	; 0x01
     116:	15 c0       	rjmp	.+42     	; 0x142 <can_check_free+0x6e>


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
     118:	8c ed       	ldi	r24, 0xDC	; 220
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	2a 81       	ldd	r18, Y+2	; 0x02
     126:	22 2f       	mov	r18, r18
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <can_check_free+0x5c>
     12c:	95 95       	asr	r25
     12e:	87 95       	ror	r24
     130:	2a 95       	dec	r18
     132:	e2 f7       	brpl	.-8      	; 0x12c <can_check_free+0x58>
     134:	81 70       	andi	r24, 0x01	; 1
     136:	99 27       	eor	r25, r25
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	89 2b       	or	r24, r25
     13c:	09 f0       	breq	.+2      	; 0x140 <can_check_free+0x6c>
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	29 83       	std	Y+1, r18	; 0x01
	}

	return mob_status;
     142:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <can_cfg>:
void can_cfg(){
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <can_cfg+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	
	CANGCON = 0; // Disable CAN
     158:	88 ed       	ldi	r24, 0xD8	; 216
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	10 82       	st	Z, r1
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     160:	19 82       	std	Y+1, r1	; 0x01
     162:	56 c0       	rjmp	.+172    	; 0x210 <can_cfg+0xc2>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     164:	8d ee       	ldi	r24, 0xED	; 237
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	29 81       	ldd	r18, Y+1	; 0x01
     16a:	22 2f       	mov	r18, r18
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	22 95       	swap	r18
     170:	32 95       	swap	r19
     172:	30 7f       	andi	r19, 0xF0	; 240
     174:	32 27       	eor	r19, r18
     176:	20 7f       	andi	r18, 0xF0	; 240
     178:	32 27       	eor	r19, r18
     17a:	28 60       	ori	r18, 0x08	; 8
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
		CANSTMOB = 0;
     180:	8e ee       	ldi	r24, 0xEE	; 238
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	10 82       	st	Z, r1
		CANCDMOB = 0;
     188:	8f ee       	ldi	r24, 0xEF	; 239
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	fc 01       	movw	r30, r24
     18e:	10 82       	st	Z, r1
		CANIDT4 = 0;
     190:	80 ef       	ldi	r24, 0xF0	; 240
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	10 82       	st	Z, r1
		CANIDT3 = 0;
     198:	81 ef       	ldi	r24, 0xF1	; 241
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	10 82       	st	Z, r1
		CANIDT2 = 0;
     1a0:	82 ef       	ldi	r24, 0xF2	; 242
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fc 01       	movw	r30, r24
     1a6:	10 82       	st	Z, r1
		CANIDT1 = 0;
     1a8:	83 ef       	ldi	r24, 0xF3	; 243
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	10 82       	st	Z, r1
		CANIDM4 = 0;
     1b0:	84 ef       	ldi	r24, 0xF4	; 244
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	fc 01       	movw	r30, r24
     1b6:	10 82       	st	Z, r1
		CANIDM3 = 0;
     1b8:	85 ef       	ldi	r24, 0xF5	; 245
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	10 82       	st	Z, r1
		CANIDM2 = 0;
     1c0:	86 ef       	ldi	r24, 0xF6	; 246
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	10 82       	st	Z, r1
		CANIDM1 = 0;
     1c8:	87 ef       	ldi	r24, 0xF7	; 247
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	10 82       	st	Z, r1
		for (uint8_t byte = 0; byte < 8; byte++){
     1d0:	1a 82       	std	Y+2, r1	; 0x02
     1d2:	18 c0       	rjmp	.+48     	; 0x204 <can_cfg+0xb6>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
     1d4:	8d ee       	ldi	r24, 0xED	; 237
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	22 2f       	mov	r18, r18
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	22 95       	swap	r18
     1e0:	32 95       	swap	r19
     1e2:	30 7f       	andi	r19, 0xF0	; 240
     1e4:	32 27       	eor	r19, r18
     1e6:	20 7f       	andi	r18, 0xF0	; 240
     1e8:	32 27       	eor	r19, r18
     1ea:	32 2f       	mov	r19, r18
     1ec:	2a 81       	ldd	r18, Y+2	; 0x02
     1ee:	23 2b       	or	r18, r19
     1f0:	28 60       	ori	r18, 0x08	; 8
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
			CANMSG = 0;
     1f6:	8a ef       	ldi	r24, 0xFA	; 250
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	10 82       	st	Z, r1
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	8a 83       	std	Y+2, r24	; 0x02
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 30       	cpi	r24, 0x08	; 8
     208:	28 f3       	brcs	.-54     	; 0x1d4 <can_cfg+0x86>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	8f 30       	cpi	r24, 0x0F	; 15
     214:	08 f4       	brcc	.+2      	; 0x218 <can_cfg+0xca>
     216:	a6 cf       	rjmp	.-180    	; 0x164 <can_cfg+0x16>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
     218:	82 ee       	ldi	r24, 0xE2	; 226
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	10 82       	st	Z, r1
	CANBT2 = 0x0C;// 500kBaud according
     220:	83 ee       	ldi	r24, 0xE3	; 227
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	2c e0       	ldi	r18, 0x0C	; 12
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
	CANBT3 = 0x36;// to Datasheet S. 267
     22a:	84 ee       	ldi	r24, 0xE4	; 228
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	26 e3       	ldi	r18, 0x36	; 54
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18

	CANGIE = 0;
     234:	8b ed       	ldi	r24, 0xDB	; 219
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	10 82       	st	Z, r1

	CANGCON |= (1<<ENASTB); // Enable CAN
     23c:	88 ed       	ldi	r24, 0xD8	; 216
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	28 ed       	ldi	r18, 0xD8	; 216
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	f9 01       	movw	r30, r18
     246:	20 81       	ld	r18, Z
     248:	22 60       	ori	r18, 0x02	; 2
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
	
	
	
}
     24e:	00 00       	nop
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <can_rx>:
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	00 d0       	rcall	.+0      	; 0x260 <can_rx+0x6>
     260:	00 d0       	rcall	.+0      	; 0x262 <can_rx+0x8>
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	9b 83       	std	Y+3, r25	; 0x03
     26a:	8a 83       	std	Y+2, r24	; 0x02
     26c:	7d 83       	std	Y+5, r23	; 0x05
     26e:	6c 83       	std	Y+4, r22	; 0x04
	
	CANPAGE = to_receive->mob_number << MOBNB0;
     270:	8d ee       	ldi	r24, 0xED	; 237
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	2a 81       	ldd	r18, Y+2	; 0x02
     276:	3b 81       	ldd	r19, Y+3	; 0x03
     278:	f9 01       	movw	r30, r18
     27a:	24 81       	ldd	r18, Z+4	; 0x04
     27c:	22 95       	swap	r18
     27e:	20 7f       	andi	r18, 0xF0	; 240
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	if (can_check_free(to_receive->mob_number)){
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	84 81       	ldd	r24, Z+4	; 0x04
     28c:	23 df       	rcall	.-442    	; 0xd4 <can_check_free>
     28e:	88 23       	and	r24, r24
     290:	09 f4       	brne	.+2      	; 0x294 <can_rx+0x3a>
     292:	50 c0       	rjmp	.+160    	; 0x334 <can_rx+0xda>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
     294:	83 ef       	ldi	r24, 0xF3	; 243
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	2a 81       	ldd	r18, Y+2	; 0x02
     29a:	3b 81       	ldd	r19, Y+3	; 0x03
     29c:	f9 01       	movw	r30, r18
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	36 95       	lsr	r19
     2a4:	27 95       	ror	r18
     2a6:	36 95       	lsr	r19
     2a8:	27 95       	ror	r18
     2aa:	36 95       	lsr	r19
     2ac:	27 95       	ror	r18
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
     2b2:	82 ef       	ldi	r24, 0xF2	; 242
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	2a 81       	ldd	r18, Y+2	; 0x02
     2b8:	3b 81       	ldd	r19, Y+3	; 0x03
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	31 81       	ldd	r19, Z+1	; 0x01
     2c0:	22 95       	swap	r18
     2c2:	22 0f       	add	r18, r18
     2c4:	20 7e       	andi	r18, 0xE0	; 224
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
		CANIDT3 = 0;
     2ca:	81 ef       	ldi	r24, 0xF1	; 241
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	10 82       	st	Z, r1
		CANIDT4 = 1<<RTRTAG;
     2d2:	80 ef       	ldi	r24, 0xF0	; 240
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	24 e0       	ldi	r18, 0x04	; 4
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
		CANIDM1 = to_receive->mob_idmask >>3;
     2dc:	87 ef       	ldi	r24, 0xF7	; 247
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	2a 81       	ldd	r18, Y+2	; 0x02
     2e2:	3b 81       	ldd	r19, Y+3	; 0x03
     2e4:	f9 01       	movw	r30, r18
     2e6:	22 81       	ldd	r18, Z+2	; 0x02
     2e8:	33 81       	ldd	r19, Z+3	; 0x03
     2ea:	36 95       	lsr	r19
     2ec:	27 95       	ror	r18
     2ee:	36 95       	lsr	r19
     2f0:	27 95       	ror	r18
     2f2:	36 95       	lsr	r19
     2f4:	27 95       	ror	r18
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
     2fa:	86 ef       	ldi	r24, 0xF6	; 246
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	3b 81       	ldd	r19, Y+3	; 0x03
     302:	f9 01       	movw	r30, r18
     304:	22 81       	ldd	r18, Z+2	; 0x02
     306:	33 81       	ldd	r19, Z+3	; 0x03
     308:	22 95       	swap	r18
     30a:	22 0f       	add	r18, r18
     30c:	20 7e       	andi	r18, 0xE0	; 224
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
		CANIDM3 = 0;
     312:	85 ef       	ldi	r24, 0xF5	; 245
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	10 82       	st	Z, r1
		CANIDM4 = 0;
     31a:	84 ef       	ldi	r24, 0xF4	; 244
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	10 82       	st	Z, r1
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
     322:	8f ee       	ldi	r24, 0xEF	; 239
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	28 ec       	ldi	r18, 0xC8	; 200
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
		CANSTMOB = 0;
     32c:	8e ee       	ldi	r24, 0xEE	; 238
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	10 82       	st	Z, r1
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     334:	19 82       	std	Y+1, r1	; 0x01
     336:	24 c0       	rjmp	.+72     	; 0x380 <can_rx+0x126>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
     338:	8d ee       	ldi	r24, 0xED	; 237
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	f9 01       	movw	r30, r18
     342:	24 81       	ldd	r18, Z+4	; 0x04
     344:	22 2f       	mov	r18, r18
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	22 95       	swap	r18
     34a:	32 95       	swap	r19
     34c:	30 7f       	andi	r19, 0xF0	; 240
     34e:	32 27       	eor	r19, r18
     350:	20 7f       	andi	r18, 0xF0	; 240
     352:	32 27       	eor	r19, r18
     354:	32 2f       	mov	r19, r18
     356:	29 81       	ldd	r18, Y+1	; 0x01
     358:	23 2b       	or	r18, r19
     35a:	28 60       	ori	r18, 0x08	; 8
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
		data[byte] = CANMSG;
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	2a ef       	ldi	r18, 0xFA	; 250
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	f9 01       	movw	r30, r18
     374:	20 81       	ld	r18, Z
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	c8 f2       	brcs	.-78     	; 0x338 <can_rx+0xde>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
     386:	00 00       	nop
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <can_tx+0x6>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <can_tx+0x8>
     3a0:	1f 92       	push	r1
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9b 83       	std	Y+3, r25	; 0x03
     3a8:	8a 83       	std	Y+2, r24	; 0x02
     3aa:	7d 83       	std	Y+5, r23	; 0x05
     3ac:	6c 83       	std	Y+4, r22	; 0x04
	
	for(uint8_t byte = 0; byte <8; byte++){
     3ae:	19 82       	std	Y+1, r1	; 0x01
     3b0:	24 c0       	rjmp	.+72     	; 0x3fa <can_tx+0x62>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
     3b2:	8d ee       	ldi	r24, 0xED	; 237
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	2a 81       	ldd	r18, Y+2	; 0x02
     3b8:	3b 81       	ldd	r19, Y+3	; 0x03
     3ba:	f9 01       	movw	r30, r18
     3bc:	24 81       	ldd	r18, Z+4	; 0x04
     3be:	22 2f       	mov	r18, r18
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	22 95       	swap	r18
     3c4:	32 95       	swap	r19
     3c6:	30 7f       	andi	r19, 0xF0	; 240
     3c8:	32 27       	eor	r19, r18
     3ca:	20 7f       	andi	r18, 0xF0	; 240
     3cc:	32 27       	eor	r19, r18
     3ce:	32 2f       	mov	r19, r18
     3d0:	29 81       	ldd	r18, Y+1	; 0x01
     3d2:	23 2b       	or	r18, r19
     3d4:	28 60       	ori	r18, 0x08	; 8
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
		CANMSG = data[byte];
     3da:	8a ef       	ldi	r24, 0xFA	; 250
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	22 2f       	mov	r18, r18
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	4c 81       	ldd	r20, Y+4	; 0x04
     3e6:	5d 81       	ldd	r21, Y+5	; 0x05
     3e8:	24 0f       	add	r18, r20
     3ea:	35 1f       	adc	r19, r21
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	88 30       	cpi	r24, 0x08	; 8
     3fe:	c8 f2       	brcs	.-78     	; 0x3b2 <can_tx+0x1a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
     400:	8d ee       	ldi	r24, 0xED	; 237
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2a 81       	ldd	r18, Y+2	; 0x02
     406:	3b 81       	ldd	r19, Y+3	; 0x03
     408:	f9 01       	movw	r30, r18
     40a:	24 81       	ldd	r18, Z+4	; 0x04
     40c:	22 95       	swap	r18
     40e:	20 7f       	andi	r18, 0xF0	; 240
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
	if (can_check_free(to_send->mob_number)){
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	fc 01       	movw	r30, r24
     41a:	84 81       	ldd	r24, Z+4	; 0x04
     41c:	5b de       	rcall	.-842    	; 0xd4 <can_check_free>
     41e:	88 23       	and	r24, r24
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	44 c0       	rjmp	.+136    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		CANSTMOB = 0;
     424:	8e ee       	ldi	r24, 0xEE	; 238
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fc 01       	movw	r30, r24
     42a:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
     42c:	83 ef       	ldi	r24, 0xF3	; 243
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	3b 81       	ldd	r19, Y+3	; 0x03
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	31 81       	ldd	r19, Z+1	; 0x01
     43a:	36 95       	lsr	r19
     43c:	27 95       	ror	r18
     43e:	36 95       	lsr	r19
     440:	27 95       	ror	r18
     442:	36 95       	lsr	r19
     444:	27 95       	ror	r18
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
     44a:	82 ef       	ldi	r24, 0xF2	; 242
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	2a 81       	ldd	r18, Y+2	; 0x02
     450:	3b 81       	ldd	r19, Y+3	; 0x03
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	22 95       	swap	r18
     45a:	22 0f       	add	r18, r18
     45c:	20 7e       	andi	r18, 0xE0	; 224
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
		CANIDT3 = 0;
     462:	81 ef       	ldi	r24, 0xF1	; 241
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	fc 01       	movw	r30, r24
     468:	10 82       	st	Z, r1
		CANIDT4 = 0;
     46a:	80 ef       	ldi	r24, 0xF0	; 240
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	10 82       	st	Z, r1
		CANIDM1 = 0; //0b11111111;
     472:	87 ef       	ldi	r24, 0xF7	; 247
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	fc 01       	movw	r30, r24
     478:	10 82       	st	Z, r1
		CANIDM2 = 0; //0b11100000;
     47a:	86 ef       	ldi	r24, 0xF6	; 246
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	fc 01       	movw	r30, r24
     480:	10 82       	st	Z, r1
		CANIDM3 = 0;
     482:	85 ef       	ldi	r24, 0xF5	; 245
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	10 82       	st	Z, r1
		CANIDM4 = 0;
     48a:	84 ef       	ldi	r24, 0xF4	; 244
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	10 82       	st	Z, r1
		CANSTMOB = 0;
     492:	8e ee       	ldi	r24, 0xEE	; 238
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
     49a:	8f ee       	ldi	r24, 0xEF	; 239
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	28 e4       	ldi	r18, 0x48	; 72
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
		CANSTMOB = 0;
     4a4:	8e ee       	ldi	r24, 0xEE	; 238
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	10 82       	st	Z, r1
	}
	
}
     4ac:	00 00       	nop
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <can_init_messages>:
struct CAN_MOB can_AMS2_mob;
	uint8_t AMS2_databytes[8];
struct CAN_MOB can_AMS3_mob;
	uint8_t AMS3_databytes[8];

void can_init_messages(){
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
	
	can_SWC_mob.mob_id = 0x800;
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	98 e0       	ldi	r25, 0x08	; 8
     4ca:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <can_SWC_mob+0x1>
     4ce:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <can_SWC_mob>
	can_SWC_mob.mob_idmask = 0xffff;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <can_SWC_mob+0x3>
     4da:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <can_SWC_mob+0x2>
	can_SWC_mob.mob_number = 0;
     4de:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <can_SWC_mob+0x4>
	
	can_Fusebox0_mob.mob_id = 0x600;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <can_Fusebox0_mob+0x1>
     4ea:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	9f ef       	ldi	r25, 0xFF	; 255
     4f2:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <can_Fusebox0_mob+0x3>
     4f6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <can_Fusebox0_mob+0x4>
	
	can_Fusebox0_mob.mob_id = 0x601;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	96 e0       	ldi	r25, 0x06	; 6
     504:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <can_Fusebox0_mob+0x1>
     508:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <can_Fusebox0_mob+0x3>
     514:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 2;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <can_Fusebox0_mob+0x4>
	
	can_SHR0_mob.mob_id = 0x400;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	94 e0       	ldi	r25, 0x04	; 4
     522:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <can_SHR0_mob+0x1>
     526:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <can_SHR0_mob>
	can_SHR0_mob.mob_idmask = 0xffff;
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <can_SHR0_mob+0x3>
     532:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <can_SHR0_mob+0x2>
	can_SHR0_mob.mob_number = 3;
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <can_SHR0_mob+0x4>
	
	can_SHL0_mob.mob_id = 0x410;
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <can_SHL0_mob+0x1>
     544:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <can_SHL0_mob>
	can_SHL0_mob.mob_idmask = 0xffff;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	9f ef       	ldi	r25, 0xFF	; 255
     54c:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <can_SHL0_mob+0x3>
     550:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <can_SHL0_mob+0x2>
	can_SHL0_mob.mob_number = 4;
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <can_SHL0_mob+0x4>
	
	can_SHB0_mob.mob_id = 0x420;
     55a:	80 e2       	ldi	r24, 0x20	; 32
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <can_SHB0_mob+0x1>
     562:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <can_SHB0_mob>
	can_SHB0_mob.mob_idmask = 0xffff;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	9f ef       	ldi	r25, 0xFF	; 255
     56a:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <can_SHB0_mob+0x3>
     56e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <can_SHB0_mob+0x2>
	can_SHB0_mob.mob_number = 5;
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <can_SHB0_mob+0x4>
	
	can_Logger0_mob.mob_id = 0x799;
     578:	89 e9       	ldi	r24, 0x99	; 153
     57a:	97 e0       	ldi	r25, 0x07	; 7
     57c:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <can_Logger0_mob+0x1>
     580:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <can_Logger0_mob>
	can_Logger0_mob.mob_idmask = 0xffff;
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <can_Logger0_mob+0x3>
     58c:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <can_Logger0_mob+0x2>
	can_Logger0_mob.mob_number = 6;
     590:	86 e0       	ldi	r24, 0x06	; 6
     592:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <can_Logger0_mob+0x4>
	
	can_Logger1_mob.mob_id = 0x798;
     596:	88 e9       	ldi	r24, 0x98	; 152
     598:	97 e0       	ldi	r25, 0x07	; 7
     59a:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <can_Logger1_mob+0x1>
     59e:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <can_Logger1_mob>
	can_Logger1_mob.mob_idmask = 0xffff;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	9f ef       	ldi	r25, 0xFF	; 255
     5a6:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <can_Logger1_mob+0x3>
     5aa:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <can_Logger1_mob+0x2>
	can_Logger1_mob.mob_number = 7;
     5ae:	87 e0       	ldi	r24, 0x07	; 7
     5b0:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <can_Logger1_mob+0x4>
		
	can_Logger2_mob.mob_id = 0x797;
     5b4:	87 e9       	ldi	r24, 0x97	; 151
     5b6:	97 e0       	ldi	r25, 0x07	; 7
     5b8:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <can_Logger2_mob+0x1>
     5bc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <can_Logger2_mob>
	can_Logger2_mob.mob_idmask = 0xffff;
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <can_Logger2_mob+0x3>
     5c8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <can_Logger2_mob+0x2>
	can_Logger2_mob.mob_number = 10;
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <can_Logger2_mob+0x4>
	
	can_DIC0_mob.mob_id = 0x500;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	95 e0       	ldi	r25, 0x05	; 5
     5d6:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <can_DIC0_mob+0x1>
     5da:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <can_DIC0_mob>
	can_DIC0_mob.mob_idmask = 0xffff;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	9f ef       	ldi	r25, 0xFF	; 255
     5e2:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <can_DIC0_mob+0x3>
     5e6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <can_DIC0_mob+0x2>
	can_DIC0_mob.mob_number = 11;
     5ea:	8b e0       	ldi	r24, 0x0B	; 11
     5ec:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <can_DIC0_mob+0x4>
	
	can_AMS0_mob.mob_id = 0x200;
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <can_AMS0_mob+0x1>
     5f8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <can_AMS0_mob>
	can_AMS0_mob.mob_idmask = 0xffff;
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <can_AMS0_mob+0x3>
     604:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <can_AMS0_mob+0x2>
	can_AMS0_mob.mob_number = 12;
     608:	8c e0       	ldi	r24, 0x0C	; 12
     60a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <can_AMS0_mob+0x4>
	
	can_AMS1_mob.mob_id = 0x201;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <can_AMS1_mob+0x1>
     616:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <can_AMS1_mob>
	can_AMS1_mob.mob_idmask = 0xffff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <can_AMS1_mob+0x3>
     622:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <can_AMS1_mob+0x2>
	can_AMS1_mob.mob_number = 13;
     626:	8d e0       	ldi	r24, 0x0D	; 13
     628:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <can_AMS1_mob+0x4>
	
	can_AMS2_mob.mob_id = 0x202;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <can_AMS2_mob+0x1>
     634:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <can_AMS2_mob>
	can_AMS2_mob.mob_idmask = 0xffff;
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	9f ef       	ldi	r25, 0xFF	; 255
     63c:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <can_AMS2_mob+0x3>
     640:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <can_AMS2_mob+0x2>
	can_AMS2_mob.mob_number = 14;
     644:	8e e0       	ldi	r24, 0x0E	; 14
     646:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <can_AMS2_mob+0x4>
	
	can_AMS3_mob.mob_id = 0x203;
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <can_AMS3_mob+0x1>
     652:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <can_AMS3_mob>
	can_AMS3_mob.mob_idmask = 0xffff;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	9f ef       	ldi	r25, 0xFF	; 255
     65a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <can_AMS3_mob+0x3>
     65e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <can_AMS3_mob+0x2>
	can_AMS3_mob.mob_number = 15;	
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <can_AMS3_mob+0x4>
	
}	
     668:	00 00       	nop
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <CAN_recieve>:

void CAN_recieve(){
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
	
	can_rx(&can_SWC_mob, SWC_databytes);
     678:	67 ef       	ldi	r22, 0xF7	; 247
     67a:	72 e0       	ldi	r23, 0x02	; 2
     67c:	8d ee       	ldi	r24, 0xED	; 237
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	ec dd       	rcall	.-1064   	; 0x25a <can_rx>
	can_rx(&can_Fusebox0_mob, Fusebox0_databytes);
     682:	6d ed       	ldi	r22, 0xDD	; 221
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	8d e7       	ldi	r24, 0x7D	; 125
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	e7 dd       	rcall	.-1074   	; 0x25a <can_rx>
	can_rx(&can_Fusebox1_mob, Fusebox1_databytes);
     68c:	65 ed       	ldi	r22, 0xD5	; 213
     68e:	72 e0       	ldi	r23, 0x02	; 2
     690:	86 eb       	ldi	r24, 0xB6	; 182
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	e2 dd       	rcall	.-1084   	; 0x25a <can_rx>
	can_rx(&can_SHR0_mob, SHR0_databytes);
     696:	61 ea       	ldi	r22, 0xA1	; 161
     698:	72 e0       	ldi	r23, 0x02	; 2
     69a:	8a e8       	ldi	r24, 0x8A	; 138
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	dd dd       	rcall	.-1094   	; 0x25a <can_rx>
	can_rx(&can_SHL0_mob, SHL0_databytes);
     6a0:	6e ea       	ldi	r22, 0xAE	; 174
     6a2:	72 e0       	ldi	r23, 0x02	; 2
     6a4:	8c e9       	ldi	r24, 0x9C	; 156
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	d8 dd       	rcall	.-1104   	; 0x25a <can_rx>
	can_rx(&can_SHB0_mob, SHB0_databytes);
     6aa:	6b eb       	ldi	r22, 0xBB	; 187
     6ac:	72 e0       	ldi	r23, 0x02	; 2
     6ae:	82 ef       	ldi	r24, 0xF2	; 242
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	d3 dd       	rcall	.-1114   	; 0x25a <can_rx>
	can_rx(&can_Logger0_mob, Logger0_databytes);
     6b4:	65 ee       	ldi	r22, 0xE5	; 229
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	83 ec       	ldi	r24, 0xC3	; 195
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	ce dd       	rcall	.-1124   	; 0x25a <can_rx>
	can_rx(&can_Logger1_mob, Logger1_databytes);
     6be:	68 e5       	ldi	r22, 0x58	; 88
     6c0:	72 e0       	ldi	r23, 0x02	; 2
     6c2:	89 ea       	ldi	r24, 0xA9	; 169
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	c9 dd       	rcall	.-1134   	; 0x25a <can_rx>
	can_rx(&can_Logger2_mob, Logger2_databytes);
     6c8:	65 e6       	ldi	r22, 0x65	; 101
     6ca:	72 e0       	ldi	r23, 0x02	; 2
     6cc:	80 e6       	ldi	r24, 0x60	; 96
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	c4 dd       	rcall	.-1144   	; 0x25a <can_rx>
	can_rx(&can_AMS0_mob, AMS0_databytes);
     6d2:	64 e9       	ldi	r22, 0x94	; 148
     6d4:	72 e0       	ldi	r23, 0x02	; 2
     6d6:	89 e0       	ldi	r24, 0x09	; 9
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	bf dd       	rcall	.-1154   	; 0x25a <can_rx>
	can_rx(&can_AMS1_mob, AMS1_databytes);
     6dc:	65 e7       	ldi	r22, 0x75	; 117
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	88 ec       	ldi	r24, 0xC8	; 200
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	ba dd       	rcall	.-1164   	; 0x25a <can_rx>
	can_rx(&can_AMS2_mob, AMS2_databytes);
     6e6:	62 e8       	ldi	r22, 0x82	; 130
     6e8:	72 e0       	ldi	r23, 0x02	; 2
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	b5 dd       	rcall	.-1174   	; 0x25a <can_rx>
	can_rx(&can_AMS3_mob, AMS3_databytes);
     6f0:	6d ec       	ldi	r22, 0xCD	; 205
     6f2:	72 e0       	ldi	r23, 0x02	; 2
     6f4:	8f e8       	ldi	r24, 0x8F	; 143
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	b0 dd       	rcall	.-1184   	; 0x25a <can_rx>
     6fa:	6d e6       	ldi	r22, 0x6D	; 109
	
	can_tx(&can_DIC0_mob, DIC0_databytes);
     6fc:	72 e0       	ldi	r23, 0x02	; 2
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	4a de       	rcall	.-876    	; 0x398 <can_tx>
     704:	00 00       	nop
     706:	df 91       	pop	r29
	
}
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <CAN_put_data>:
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29

void CAN_put_data(){
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
		Logger2_databytes[7] = 96<<8;
		
		Logger0_databytes[0] = 42;
*/
		
	Rotary_Encoder_Right = SWC_databytes[0];
     714:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <SWC_databytes>
     718:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
	Rotary_Encoder_Left = SWC_databytes[1];
     71c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <SWC_databytes+0x1>
     720:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <Rotary_Encoder_Left>
	dsp_mde = Rotary_Encoder_Right%4;
     724:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     728:	83 70       	andi	r24, 0x03	; 3
     72a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <dsp_mde>
	BrakeBias = 0;
     72e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <BrakeBias>

	APPS1 = (SHR0_databytes[1] << 8 | SHR0_databytes[0])/10;
     732:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <SHR0_databytes+0x1>
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	38 2f       	mov	r19, r24
     73c:	22 27       	eor	r18, r18
     73e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <SHR0_databytes>
     742:	88 2f       	mov	r24, r24
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	82 2b       	or	r24, r18
     748:	93 2b       	or	r25, r19
     74a:	2a e0       	ldi	r18, 0x0A	; 10
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	b9 01       	movw	r22, r18
     750:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     754:	cb 01       	movw	r24, r22
     756:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <APPS1>
	APPS2 = (SHR0_databytes[3] << 8 | SHR0_databytes[2])/10;
     75a:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <SHR0_databytes+0x3>
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	38 2f       	mov	r19, r24
     764:	22 27       	eor	r18, r18
     766:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <SHR0_databytes+0x2>
     76a:	88 2f       	mov	r24, r24
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	82 2b       	or	r24, r18
     770:	93 2b       	or	r25, r19
     772:	2a e0       	ldi	r18, 0x0A	; 10
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	b9 01       	movw	r22, r18
     778:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     77c:	cb 01       	movw	r24, r22
     77e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <APPS2>
	
	BPF = (SHL0_databytes[1] << 8 | SHL0_databytes[0])/10;
     782:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <SHL0_databytes+0x1>
     786:	88 2f       	mov	r24, r24
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	38 2f       	mov	r19, r24
     78c:	22 27       	eor	r18, r18
     78e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <SHL0_databytes>
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	82 2b       	or	r24, r18
     798:	93 2b       	or	r25, r19
     79a:	2a e0       	ldi	r18, 0x0A	; 10
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	b9 01       	movw	r22, r18
     7a0:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     7a4:	cb 01       	movw	r24, r22
     7a6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <BPF>
	BPR = (SHL0_databytes[3] << 8 | SHL0_databytes[2])/10;
     7aa:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <SHL0_databytes+0x3>
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	38 2f       	mov	r19, r24
     7b4:	22 27       	eor	r18, r18
     7b6:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SHL0_databytes+0x2>
     7ba:	88 2f       	mov	r24, r24
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	82 2b       	or	r24, r18
     7c0:	93 2b       	or	r25, r19
     7c2:	2a e0       	ldi	r18, 0x0A	; 10
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	b9 01       	movw	r22, r18
     7c8:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     7cc:	cb 01       	movw	r24, r22
     7ce:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <BPR>
	CLT = (SHB0_databytes[1] << 8 | SHB0_databytes[0])/10;
     7d2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <SHB0_databytes+0x1>
     7d6:	88 2f       	mov	r24, r24
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	38 2f       	mov	r19, r24
     7dc:	22 27       	eor	r18, r18
     7de:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <SHB0_databytes>
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	82 2b       	or	r24, r18
     7e8:	93 2b       	or	r25, r19
     7ea:	2a e0       	ldi	r18, 0x0A	; 10
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	b9 01       	movw	r22, r18
     7f0:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     7f4:	cb 01       	movw	r24, r22
     7f6:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <CLT+0x1>
     7fa:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <CLT>

	LVSVoltage = (Fusebox0_databytes[1] << 8 | Fusebox0_databytes[0])/40;
     7fe:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Fusebox0_databytes+0x1>
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	38 2f       	mov	r19, r24
     808:	22 27       	eor	r18, r18
     80a:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <Fusebox0_databytes>
     80e:	88 2f       	mov	r24, r24
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	82 2b       	or	r24, r18
     814:	93 2b       	or	r25, r19
     816:	28 e2       	ldi	r18, 0x28	; 40
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	b9 01       	movw	r22, r18
     81c:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     820:	cb 01       	movw	r24, r22
     822:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <LVSVoltage+0x1>
     826:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <LVSVoltage>
	SDCIFB = (Fusebox1_databytes[1] << 8 | Fusebox1_databytes[0]);
     82a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <Fusebox1_databytes+0x1>
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	98 2f       	mov	r25, r24
     838:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Fusebox1_databytes>
     83c:	89 2b       	or	r24, r25
     83e:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <SDCIFB>
	FRO = (Fusebox1_databytes[3] << 8 | Fusebox1_databytes[2]);
     842:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <Fusebox1_databytes+0x3>
     846:	88 2f       	mov	r24, r24
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	38 2f       	mov	r19, r24
     84c:	22 27       	eor	r18, r18
     84e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <Fusebox1_databytes+0x2>
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	82 2b       	or	r24, r18
     858:	93 2b       	or	r25, r19
     85a:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <FRO+0x1>
     85e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <FRO>
	
	AMS_ERR = AMS0_databytes[0];
     862:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <AMS0_databytes>
     866:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <AMS_ERR>
	ERR_info = (AMS0_databytes[2] << 8 | AMS0_databytes[1]);
     86a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <AMS0_databytes+0x2>
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	38 2f       	mov	r19, r24
     874:	22 27       	eor	r18, r18
     876:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <AMS0_databytes+0x1>
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	82 2b       	or	r24, r18
     880:	93 2b       	or	r25, r19
     882:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <ERR_info+0x1>
     886:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <ERR_info>
	IMD_ERR = AMS0_databytes[4];
     88a:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <AMS0_databytes+0x4>
     88e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <IMD_ERR>
	TSVoltage = (AMS1_databytes[1] << 8 | AMS1_databytes[0])/6;
     892:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <AMS1_databytes+0x1>
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	38 2f       	mov	r19, r24
     89c:	22 27       	eor	r18, r18
     89e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <AMS1_databytes>
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	82 2b       	or	r24, r18
     8a8:	93 2b       	or	r25, r19
     8aa:	26 e0       	ldi	r18, 0x06	; 6
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	b9 01       	movw	r22, r18
     8b0:	0e 94 cd 14 	call	0x299a	; 0x299a <__divmodhi4>
     8b4:	cb 01       	movw	r24, r22
     8b6:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <TSVoltage+0x1>
     8ba:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <TSVoltage>
	SOC = (AMS1_databytes[5] << 8 | AMS1_databytes[4]);
     8be:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <AMS1_databytes+0x5>
     8c2:	88 2f       	mov	r24, r24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	38 2f       	mov	r19, r24
     8c8:	22 27       	eor	r18, r18
     8ca:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <AMS1_databytes+0x4>
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	82 2b       	or	r24, r18
     8d4:	93 2b       	or	r25, r19
     8d6:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <SOC+0x1>
     8da:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SOC>
	AccumulatorTemperature = (AMS2_databytes[7] << 8 | AMS2_databytes[6]);
     8de:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <AMS2_databytes+0x7>
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	38 2f       	mov	r19, r24
     8e8:	22 27       	eor	r18, r18
     8ea:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <AMS2_databytes+0x6>
     8ee:	88 2f       	mov	r24, r24
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	82 2b       	or	r24, r18
     8f4:	93 2b       	or	r25, r19
     8f6:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <AccumulatorTemperature+0x1>
     8fa:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <AccumulatorTemperature>
	TS_RDY = AMS3_databytes[0];
     8fe:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <AMS3_databytes>
     902:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <TS_RDY>

	//For some weird reason the length of the variable that gets shifted seems to matter, atleast in this usecase, with for e.g BPF etc it works fine which may be becouse we are actually only transmitting an 8 bit value
	//what happens is we shift an 8bit uint by 8 to the left and want to save it in an 32bit uint, we put for e.g 135 in and should get 34560. instead we are getting 4294965720 which is definitly also not an 8bit value
	//i do not know what is happening here but shifting a variable beyond its own limit seems to do weird stuff. therefore this stupid hacky fix with putting the 8bit integers into 32bit integer and than whacking it together
	
	Laptime_1 = Logger0_databytes[1];
     906:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <Logger0_databytes+0x1>
     90a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Laptime_1>
	Laptime_2 = Logger0_databytes[2];
     90e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <Logger0_databytes+0x2>
     912:	88 2f       	mov	r24, r24
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <Laptime_2+0x1>
     91a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <Laptime_2>
	Laptime_3 = Logger0_databytes[3];
     91e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <Logger0_databytes+0x3>
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <Laptime_3>
     92e:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <Laptime_3+0x1>
     932:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <Laptime_3+0x2>
     936:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <Laptime_3+0x3>
	Laptime_4 = Logger0_databytes[4];
     93a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Logger0_databytes+0x4>
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Laptime_4>
     94a:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <Laptime_4+0x1>
     94e:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <Laptime_4+0x2>
     952:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <Laptime_4+0x3>
	
	Laptime = Laptime_1 | Laptime_2 << 8 | Laptime_3 << 16 | Laptime_4 << 24;
     956:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Laptime_1>
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <Laptime_2>
     962:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <Laptime_2+0x1>
     966:	98 2f       	mov	r25, r24
     968:	88 27       	eor	r24, r24
     96a:	82 2b       	or	r24, r18
     96c:	93 2b       	or	r25, r19
     96e:	9c 01       	movw	r18, r24
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Laptime_3>
     978:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <Laptime_3+0x1>
     97c:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <Laptime_3+0x2>
     980:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <Laptime_3+0x3>
     984:	dc 01       	movw	r26, r24
     986:	99 27       	eor	r25, r25
     988:	88 27       	eor	r24, r24
     98a:	28 2b       	or	r18, r24
     98c:	39 2b       	or	r19, r25
     98e:	4a 2b       	or	r20, r26
     990:	5b 2b       	or	r21, r27
     992:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Laptime_4>
     996:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Laptime_4+0x1>
     99a:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <Laptime_4+0x2>
     99e:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <Laptime_4+0x3>
     9a2:	b8 2f       	mov	r27, r24
     9a4:	aa 27       	eor	r26, r26
     9a6:	99 27       	eor	r25, r25
     9a8:	88 27       	eor	r24, r24
     9aa:	82 2b       	or	r24, r18
     9ac:	93 2b       	or	r25, r19
     9ae:	a4 2b       	or	r26, r20
     9b0:	b5 2b       	or	r27, r21
     9b2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <Laptime>
     9b6:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <Laptime+0x1>
     9ba:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <Laptime+0x2>
     9be:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <Laptime+0x3>
	
	Besttime_1 = Logger1_databytes[0];
     9c2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Logger1_databytes>
     9c6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <Besttime_1>
	Besttime_2 = Logger1_databytes[1];
     9ca:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <Logger1_databytes+0x1>
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Besttime_2+0x1>
     9d6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Besttime_2>
	Besttime_3 = Logger1_databytes[2];
     9da:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Logger1_databytes+0x2>
     9de:	88 2f       	mov	r24, r24
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Besttime_3>
     9ea:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Besttime_3+0x1>
     9ee:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <Besttime_3+0x2>
     9f2:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <Besttime_3+0x3>
	Besttime_4 = Logger1_databytes[3];
     9f6:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Logger1_databytes+0x3>
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Besttime_4>
     a06:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <Besttime_4+0x1>
     a0a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <Besttime_4+0x2>
     a0e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <Besttime_4+0x3>
	
	Besttime = Besttime_1 | Besttime_2 << 8 | Besttime_3 << 16 | Besttime_4 << 24;
     a12:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <Besttime_1>
     a16:	28 2f       	mov	r18, r24
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Besttime_2>
     a1e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Besttime_2+0x1>
     a22:	98 2f       	mov	r25, r24
     a24:	88 27       	eor	r24, r24
     a26:	82 2b       	or	r24, r18
     a28:	93 2b       	or	r25, r19
     a2a:	9c 01       	movw	r18, r24
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Besttime_3>
     a34:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Besttime_3+0x1>
     a38:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <Besttime_3+0x2>
     a3c:	b0 91 05 02 	lds	r27, 0x0205	; 0x800205 <Besttime_3+0x3>
     a40:	dc 01       	movw	r26, r24
     a42:	99 27       	eor	r25, r25
     a44:	88 27       	eor	r24, r24
     a46:	28 2b       	or	r18, r24
     a48:	39 2b       	or	r19, r25
     a4a:	4a 2b       	or	r20, r26
     a4c:	5b 2b       	or	r21, r27
     a4e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Besttime_4>
     a52:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Besttime_4+0x1>
     a56:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <Besttime_4+0x2>
     a5a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <Besttime_4+0x3>
     a5e:	b8 2f       	mov	r27, r24
     a60:	aa 27       	eor	r26, r26
     a62:	99 27       	eor	r25, r25
     a64:	88 27       	eor	r24, r24
     a66:	82 2b       	or	r24, r18
     a68:	93 2b       	or	r25, r19
     a6a:	a4 2b       	or	r26, r20
     a6c:	b5 2b       	or	r27, r21
     a6e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Besttime>
     a72:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Besttime+0x1>
     a76:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <Besttime+0x2>
     a7a:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <Besttime+0x3>
	
	Pred_time_1 = Logger1_databytes[4];
     a7e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <Logger1_databytes+0x4>
     a82:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Pred_time_1>
	Pred_time_2 = Logger1_databytes[5];
     a86:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <Logger1_databytes+0x5>
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <Pred_time_2+0x1>
     a92:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Pred_time_2>
	Pred_time_3 = Logger1_databytes[6];
     a96:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <Logger1_databytes+0x6>
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Pred_time_3>
     aa6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Pred_time_3+0x1>
     aaa:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <Pred_time_3+0x2>
     aae:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <Pred_time_3+0x3>
	Pred_time_4 = Logger1_databytes[7];
     ab2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <Logger1_databytes+0x7>
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Pred_time_4>
     ac2:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Pred_time_4+0x1>
     ac6:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <Pred_time_4+0x2>
     aca:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <Pred_time_4+0x3>
	
	Pred_time = Pred_time_1 | Pred_time_2 << 8 | Pred_time_3 << 16 | Pred_time_4 << 24;
     ace:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Pred_time_1>
     ad2:	28 2f       	mov	r18, r24
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Pred_time_2>
     ada:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <Pred_time_2+0x1>
     ade:	98 2f       	mov	r25, r24
     ae0:	88 27       	eor	r24, r24
     ae2:	82 2b       	or	r24, r18
     ae4:	93 2b       	or	r25, r19
     ae6:	9c 01       	movw	r18, r24
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Pred_time_3>
     af0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Pred_time_3+0x1>
     af4:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <Pred_time_3+0x2>
     af8:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <Pred_time_3+0x3>
     afc:	dc 01       	movw	r26, r24
     afe:	99 27       	eor	r25, r25
     b00:	88 27       	eor	r24, r24
     b02:	28 2b       	or	r18, r24
     b04:	39 2b       	or	r19, r25
     b06:	4a 2b       	or	r20, r26
     b08:	5b 2b       	or	r21, r27
     b0a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Pred_time_4>
     b0e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Pred_time_4+0x1>
     b12:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <Pred_time_4+0x2>
     b16:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <Pred_time_4+0x3>
     b1a:	b8 2f       	mov	r27, r24
     b1c:	aa 27       	eor	r26, r26
     b1e:	99 27       	eor	r25, r25
     b20:	88 27       	eor	r24, r24
     b22:	82 2b       	or	r24, r18
     b24:	93 2b       	or	r25, r19
     b26:	a4 2b       	or	r26, r20
     b28:	b5 2b       	or	r27, r21
     b2a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Pred_time>
     b2e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Pred_time+0x1>
     b32:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <Pred_time+0x2>
     b36:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <Pred_time+0x3>
	
	ODO = Logger0_databytes[6] << 8 | Logger0_databytes[5];
     b3a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Logger0_databytes+0x6>
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	38 2f       	mov	r19, r24
     b44:	22 27       	eor	r18, r18
     b46:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <Logger0_databytes+0x5>
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	82 2b       	or	r24, r18
     b50:	93 2b       	or	r25, r19
     b52:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <ODO+0x1>
     b56:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <ODO>
	GPS_Speed = Logger2_databytes[7] << 8 | Logger2_databytes[6];
     b5a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <Logger2_databytes+0x7>
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	38 2f       	mov	r19, r24
     b64:	22 27       	eor	r18, r18
     b66:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <Logger2_databytes+0x6>
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	82 2b       	or	r24, r18
     b70:	93 2b       	or	r25, r19
     b72:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <GPS_Speed+0x1>
     b76:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <GPS_Speed>
	LapNumber = Logger0_databytes[0];	
     b7a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Logger0_databytes>
     b7e:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <LapNumber>
	
	DIC0_databytes[0] = LC_Active;
     b82:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <LC_Active>
     b86:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <difftime>
     b8a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <DIC0_databytes>
     b8e:	00 00       	nop
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <calc_BB>:
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <calc_BB+0xe>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	6a 83       	std	Y+2, r22	; 0x02
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <calc_BB+0x1e>
     bb2:	59 c0       	rjmp	.+178    	; 0xc66 <calc_BB+0xd0>
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	88 2f       	mov	r24, r24
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	09 2e       	mov	r0, r25
     bc6:	00 0c       	add	r0, r0
     bc8:	aa 0b       	sbc	r26, r26
     bca:	bb 0b       	sbc	r27, r27
     bcc:	bc 01       	movw	r22, r24
     bce:	cd 01       	movw	r24, r26
     bd0:	0e 94 ca 13 	call	0x2794	; 0x2794 <__floatsisf>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     bdc:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     be0:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     be4:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	09 2e       	mov	r0, r25
     bf0:	00 0c       	add	r0, r0
     bf2:	aa 0b       	sbc	r26, r26
     bf4:	bb 0b       	sbc	r27, r27
     bf6:	bc 01       	movw	r22, r24
     bf8:	cd 01       	movw	r24, r26
     bfa:	0e 94 ca 13 	call	0x2794	; 0x2794 <__floatsisf>
     bfe:	7b 01       	movw	r14, r22
     c00:	8c 01       	movw	r16, r24
     c02:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c06:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c0a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c0e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c12:	9c 01       	movw	r18, r24
     c14:	ad 01       	movw	r20, r26
     c16:	c8 01       	movw	r24, r16
     c18:	b7 01       	movw	r22, r14
     c1a:	0e 94 34 13 	call	0x2668	; 0x2668 <__divsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c26:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c2a:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c2e:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c32:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c36:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c3a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c3e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	48 ec       	ldi	r20, 0xC8	; 200
     c48:	52 e4       	ldi	r21, 0x42	; 66
     c4a:	bc 01       	movw	r22, r24
     c4c:	cd 01       	movw	r24, r26
     c4e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c5a:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c5e:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c62:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c66:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c6a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c6e:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c72:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	0e 94 9c 13 	call	0x2738	; 0x2738 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	08 95       	ret

00000c94 <string_to_digit>:
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	27 97       	sbiw	r28, 0x07	; 7
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	8b 83       	std	Y+3, r24	; 0x03
     caa:	7d 83       	std	Y+5, r23	; 0x05
     cac:	6c 83       	std	Y+4, r22	; 0x04
     cae:	4e 83       	std	Y+6, r20	; 0x06
     cb0:	2f 83       	std	Y+7, r18	; 0x07
     cb2:	1a 82       	std	Y+2, r1	; 0x02
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	2e c0       	rjmp	.+92     	; 0xd14 <string_to_digit+0x80>
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	68 2f       	mov	r22, r24
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	8f 81       	ldd	r24, Y+7	; 0x07
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	8e 81       	ldd	r24, Y+6	; 0x06
     cc6:	48 2f       	mov	r20, r24
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	84 0f       	add	r24, r20
     cd0:	95 1f       	adc	r25, r21
     cd2:	ec 81       	ldd	r30, Y+4	; 0x04
     cd4:	fd 81       	ldd	r31, Y+5	; 0x05
     cd6:	49 81       	ldd	r20, Y+1	; 0x01
     cd8:	5a 81       	ldd	r21, Y+2	; 0x02
     cda:	4e 0f       	add	r20, r30
     cdc:	5f 1f       	adc	r21, r31
     cde:	da 01       	movw	r26, r20
     ce0:	ec 91       	ld	r30, X
     ce2:	f4 e1       	ldi	r31, 0x14	; 20
     ce4:	f2 9f       	mul	r31, r18
     ce6:	a0 01       	movw	r20, r0
     ce8:	f3 9f       	mul	r31, r19
     cea:	50 0d       	add	r21, r0
     cec:	11 24       	eor	r1, r1
     cee:	f0 e5       	ldi	r31, 0x50	; 80
     cf0:	f6 9f       	mul	r31, r22
     cf2:	90 01       	movw	r18, r0
     cf4:	f7 9f       	mul	r31, r23
     cf6:	30 0d       	add	r19, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	24 0f       	add	r18, r20
     cfc:	35 1f       	adc	r19, r21
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	82 5f       	subi	r24, 0xF2	; 242
     d04:	9c 4f       	sbci	r25, 0xFC	; 252
     d06:	dc 01       	movw	r26, r24
     d08:	ec 93       	st	X, r30
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	9a 83       	std	Y+2, r25	; 0x02
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	9d 81       	ldd	r25, Y+5	; 0x05
     d18:	0e 94 11 15 	call	0x2a22	; 0x2a22 <strlen>
     d1c:	9c 01       	movw	r18, r24
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	82 17       	cp	r24, r18
     d24:	93 07       	cpc	r25, r19
     d26:	40 f2       	brcs	.-112    	; 0xcb8 <string_to_digit+0x24>
     d28:	00 00       	nop
     d2a:	27 96       	adiw	r28, 0x07	; 7
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <num_to_digit>:
     d3c:	ef 92       	push	r14
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	62 97       	sbiw	r28, 0x12	; 18
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	8a 87       	std	Y+10, r24	; 0x0a
     d58:	7c 87       	std	Y+12, r23	; 0x0c
     d5a:	6b 87       	std	Y+11, r22	; 0x0b
     d5c:	4d 87       	std	Y+13, r20	; 0x0d
     d5e:	2e 87       	std	Y+14, r18	; 0x0e
     d60:	0f 87       	std	Y+15, r16	; 0x0f
     d62:	e8 8a       	std	Y+16, r14	; 0x10
     d64:	4d b7       	in	r20, 0x3d	; 61
     d66:	5e b7       	in	r21, 0x3e	; 62
     d68:	5a 8b       	std	Y+18, r21	; 0x12
     d6a:	49 8b       	std	Y+17, r20	; 0x11
     d6c:	8d b7       	in	r24, 0x3d	; 61
     d6e:	9e b7       	in	r25, 0x3e	; 62
     d70:	8c 01       	movw	r16, r24
     d72:	2e 85       	ldd	r18, Y+14	; 0x0e
     d74:	82 2f       	mov	r24, r18
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	01 97       	sbiw	r24, 0x01	; 1
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	82 2f       	mov	r24, r18
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	6d b7       	in	r22, 0x3d	; 61
     d84:	7e b7       	in	r23, 0x3e	; 62
     d86:	68 1b       	sub	r22, r24
     d88:	79 0b       	sbc	r23, r25
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	7e bf       	out	0x3e, r23	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	6d bf       	out	0x3d, r22	; 61
     d94:	8d b7       	in	r24, 0x3d	; 61
     d96:	9e b7       	in	r25, 0x3e	; 62
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	98 87       	std	Y+8, r25	; 0x08
     d9c:	8f 83       	std	Y+7, r24	; 0x07
     d9e:	19 82       	std	Y+1, r1	; 0x01
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8a 83       	std	Y+2, r24	; 0x02
     da4:	40 c0       	rjmp	.+128    	; 0xe26 <num_to_digit+0xea>
     da6:	4b 85       	ldd	r20, Y+11	; 0x0b
     da8:	5c 85       	ldd	r21, Y+12	; 0x0c
     daa:	9a 01       	movw	r18, r20
     dac:	ad ec       	ldi	r26, 0xCD	; 205
     dae:	bc ec       	ldi	r27, 0xCC	; 204
     db0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
     db4:	96 95       	lsr	r25
     db6:	87 95       	ror	r24
     db8:	96 95       	lsr	r25
     dba:	87 95       	ror	r24
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	9c 01       	movw	r18, r24
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	da 01       	movw	r26, r20
     dd4:	a8 1b       	sub	r26, r24
     dd6:	b9 0b       	sbc	r27, r25
     dd8:	cd 01       	movw	r24, r26
     dda:	89 87       	std	Y+9, r24	; 0x09
     ddc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	f9 01       	movw	r30, r18
     dea:	e8 1b       	sub	r30, r24
     dec:	f9 0b       	sbc	r31, r25
     dee:	cf 01       	movw	r24, r30
     df0:	29 85       	ldd	r18, Y+9	; 0x09
     df2:	40 e3       	ldi	r20, 0x30	; 48
     df4:	42 0f       	add	r20, r18
     df6:	2f 81       	ldd	r18, Y+7	; 0x07
     df8:	38 85       	ldd	r19, Y+8	; 0x08
     dfa:	82 0f       	add	r24, r18
     dfc:	93 1f       	adc	r25, r19
     dfe:	dc 01       	movw	r26, r24
     e00:	4c 93       	st	X, r20
     e02:	8b 85       	ldd	r24, Y+11	; 0x0b
     e04:	9c 85       	ldd	r25, Y+12	; 0x0c
     e06:	9c 01       	movw	r18, r24
     e08:	ad ec       	ldi	r26, 0xCD	; 205
     e0a:	bc ec       	ldi	r27, 0xCC	; 204
     e0c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	9c 87       	std	Y+12, r25	; 0x0c
     e1e:	8b 87       	std	Y+11, r24	; 0x0b
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	8a 83       	std	Y+2, r24	; 0x02
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	8e 85       	ldd	r24, Y+14	; 0x0e
     e2a:	89 17       	cp	r24, r25
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <num_to_digit+0xf4>
     e2e:	bb cf       	rjmp	.-138    	; 0xda6 <num_to_digit+0x6a>
     e30:	1b 82       	std	Y+3, r1	; 0x03
     e32:	1c 82       	std	Y+4, r1	; 0x04
     e34:	c8 c0       	rjmp	.+400    	; 0xfc6 <num_to_digit+0x28a>
     e36:	8c 81       	ldd	r24, Y+4	; 0x04
     e38:	88 2f       	mov	r24, r24
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	2f 81       	ldd	r18, Y+7	; 0x07
     e3e:	38 85       	ldd	r19, Y+8	; 0x08
     e40:	82 0f       	add	r24, r18
     e42:	93 1f       	adc	r25, r19
     e44:	fc 01       	movw	r30, r24
     e46:	80 81       	ld	r24, Z
     e48:	80 33       	cpi	r24, 0x30	; 48
     e4a:	11 f0       	breq	.+4      	; 0xe50 <num_to_digit+0x114>
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	8b 83       	std	Y+3, r24	; 0x03
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	88 23       	and	r24, r24
     e56:	09 f0       	breq	.+2      	; 0xe5a <num_to_digit+0x11e>
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	8e 85       	ldd	r24, Y+14	; 0x0e
     e62:	48 2f       	mov	r20, r24
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	8d 85       	ldd	r24, Y+13	; 0x0d
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	da 01       	movw	r26, r20
     e6e:	a8 1b       	sub	r26, r24
     e70:	b9 0b       	sbc	r27, r25
     e72:	cd 01       	movw	r24, r26
     e74:	02 97       	sbiw	r24, 0x02	; 2
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	28 17       	cp	r18, r24
     e7a:	39 07       	cpc	r19, r25
     e7c:	0c f0       	brlt	.+2      	; 0xe80 <num_to_digit+0x144>
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	86 2f       	mov	r24, r22
     e82:	84 23       	and	r24, r20
     e84:	88 23       	and	r24, r24
     e86:	51 f0       	breq	.+20     	; 0xe9c <num_to_digit+0x160>
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	2f 81       	ldd	r18, Y+7	; 0x07
     e90:	38 85       	ldd	r19, Y+8	; 0x08
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	20 e1       	ldi	r18, 0x10	; 16
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ea4:	48 2f       	mov	r20, r24
     ea6:	50 e0       	ldi	r21, 0x00	; 0
     ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	ba 01       	movw	r22, r20
     eb0:	68 1b       	sub	r22, r24
     eb2:	79 0b       	sbc	r23, r25
     eb4:	cb 01       	movw	r24, r22
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	64 f5       	brge	.+88     	; 0xf14 <num_to_digit+0x1d8>
     ebc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ebe:	68 2f       	mov	r22, r24
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	88 89       	ldd	r24, Y+16	; 0x10
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eca:	48 2f       	mov	r20, r24
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	84 0f       	add	r24, r20
     ed6:	95 1f       	adc	r25, r21
     ed8:	4c 81       	ldd	r20, Y+4	; 0x04
     eda:	44 2f       	mov	r20, r20
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	af 81       	ldd	r26, Y+7	; 0x07
     ee0:	b8 85       	ldd	r27, Y+8	; 0x08
     ee2:	4a 0f       	add	r20, r26
     ee4:	5b 1f       	adc	r21, r27
     ee6:	fa 01       	movw	r30, r20
     ee8:	a0 81       	ld	r26, Z
     eea:	b4 e1       	ldi	r27, 0x14	; 20
     eec:	b2 9f       	mul	r27, r18
     eee:	a0 01       	movw	r20, r0
     ef0:	b3 9f       	mul	r27, r19
     ef2:	50 0d       	add	r21, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	b0 e5       	ldi	r27, 0x50	; 80
     ef8:	b6 9f       	mul	r27, r22
     efa:	90 01       	movw	r18, r0
     efc:	b7 9f       	mul	r27, r23
     efe:	30 0d       	add	r19, r0
     f00:	11 24       	eor	r1, r1
     f02:	24 0f       	add	r18, r20
     f04:	35 1f       	adc	r19, r21
     f06:	82 0f       	add	r24, r18
     f08:	93 1f       	adc	r25, r19
     f0a:	82 5f       	subi	r24, 0xF2	; 242
     f0c:	9c 4f       	sbci	r25, 0xFC	; 252
     f0e:	fc 01       	movw	r30, r24
     f10:	a0 83       	st	Z, r26
     f12:	56 c0       	rjmp	.+172    	; 0xfc0 <num_to_digit+0x284>
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	88 23       	and	r24, r24
     f18:	29 f5       	brne	.+74     	; 0xf64 <num_to_digit+0x228>
     f1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f1c:	68 2f       	mov	r22, r24
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	88 89       	ldd	r24, Y+16	; 0x10
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	8f 85       	ldd	r24, Y+15	; 0x0f
     f28:	48 2f       	mov	r20, r24
     f2a:	50 e0       	ldi	r21, 0x00	; 0
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	88 2f       	mov	r24, r24
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	84 0f       	add	r24, r20
     f34:	95 1f       	adc	r25, r21
     f36:	a4 e1       	ldi	r26, 0x14	; 20
     f38:	a2 9f       	mul	r26, r18
     f3a:	a0 01       	movw	r20, r0
     f3c:	a3 9f       	mul	r26, r19
     f3e:	50 0d       	add	r21, r0
     f40:	11 24       	eor	r1, r1
     f42:	a0 e5       	ldi	r26, 0x50	; 80
     f44:	a6 9f       	mul	r26, r22
     f46:	90 01       	movw	r18, r0
     f48:	a7 9f       	mul	r26, r23
     f4a:	30 0d       	add	r19, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	24 0f       	add	r18, r20
     f50:	35 1f       	adc	r19, r21
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	82 5f       	subi	r24, 0xF2	; 242
     f58:	9c 4f       	sbci	r25, 0xFC	; 252
     f5a:	2e e2       	ldi	r18, 0x2E	; 46
     f5c:	dc 01       	movw	r26, r24
     f5e:	2c 93       	st	X, r18
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	8a 85       	ldd	r24, Y+10	; 0x0a
     f66:	68 2f       	mov	r22, r24
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	88 89       	ldd	r24, Y+16	; 0x10
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	8f 85       	ldd	r24, Y+15	; 0x0f
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	ac 01       	movw	r20, r24
     f78:	4f 5f       	subi	r20, 0xFF	; 255
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	84 0f       	add	r24, r20
     f84:	95 1f       	adc	r25, r21
     f86:	4c 81       	ldd	r20, Y+4	; 0x04
     f88:	44 2f       	mov	r20, r20
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	af 81       	ldd	r26, Y+7	; 0x07
     f8e:	b8 85       	ldd	r27, Y+8	; 0x08
     f90:	4a 0f       	add	r20, r26
     f92:	5b 1f       	adc	r21, r27
     f94:	fa 01       	movw	r30, r20
     f96:	a0 81       	ld	r26, Z
     f98:	b4 e1       	ldi	r27, 0x14	; 20
     f9a:	b2 9f       	mul	r27, r18
     f9c:	a0 01       	movw	r20, r0
     f9e:	b3 9f       	mul	r27, r19
     fa0:	50 0d       	add	r21, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	b0 e5       	ldi	r27, 0x50	; 80
     fa6:	b6 9f       	mul	r27, r22
     fa8:	90 01       	movw	r18, r0
     faa:	b7 9f       	mul	r27, r23
     fac:	30 0d       	add	r19, r0
     fae:	11 24       	eor	r1, r1
     fb0:	24 0f       	add	r18, r20
     fb2:	35 1f       	adc	r19, r21
     fb4:	82 0f       	add	r24, r18
     fb6:	93 1f       	adc	r25, r19
     fb8:	82 5f       	subi	r24, 0xF2	; 242
     fba:	9c 4f       	sbci	r25, 0xFC	; 252
     fbc:	fc 01       	movw	r30, r24
     fbe:	a0 83       	st	Z, r26
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	8c 83       	std	Y+4, r24	; 0x04
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	8e 85       	ldd	r24, Y+14	; 0x0e
     fca:	98 17       	cp	r25, r24
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <num_to_digit+0x294>
     fce:	33 cf       	rjmp	.-410    	; 0xe36 <num_to_digit+0xfa>
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	1e bf       	out	0x3e, r17	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0d bf       	out	0x3d, r16	; 61
     fda:	00 00       	nop
     fdc:	49 89       	ldd	r20, Y+17	; 0x11
     fde:	5a 89       	ldd	r21, Y+18	; 0x12
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	5e bf       	out	0x3e, r21	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	4d bf       	out	0x3d, r20	; 61
     fea:	62 96       	adiw	r28, 0x12	; 18
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ef 90       	pop	r14
    1000:	08 95       	ret

00001002 <time_to_digit>:
    1002:	0f 93       	push	r16
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	63 97       	sbiw	r28, 0x13	; 19
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	8d 87       	std	Y+13, r24	; 0x0d
    101a:	4e 87       	std	Y+14, r20	; 0x0e
    101c:	5f 87       	std	Y+15, r21	; 0x0f
    101e:	68 8b       	std	Y+16, r22	; 0x10
    1020:	79 8b       	std	Y+17, r23	; 0x11
    1022:	2a 8b       	std	Y+18, r18	; 0x12
    1024:	0b 8b       	std	Y+19, r16	; 0x13
    1026:	8e 85       	ldd	r24, Y+14	; 0x0e
    1028:	9f 85       	ldd	r25, Y+15	; 0x0f
    102a:	a8 89       	ldd	r26, Y+16	; 0x10
    102c:	b9 89       	ldd	r27, Y+17	; 0x11
    102e:	28 ee       	ldi	r18, 0xE8	; 232
    1030:	33 e0       	ldi	r19, 0x03	; 3
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__udivmodsi4>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	9a 83       	std	Y+2, r25	; 0x02
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	8e 85       	ldd	r24, Y+14	; 0x0e
    1048:	9f 85       	ldd	r25, Y+15	; 0x0f
    104a:	a8 89       	ldd	r26, Y+16	; 0x10
    104c:	b9 89       	ldd	r27, Y+17	; 0x11
    104e:	28 ee       	ldi	r18, 0xE8	; 232
    1050:	33 e0       	ldi	r19, 0x03	; 3
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__udivmodsi4>
    105e:	da 01       	movw	r26, r20
    1060:	c9 01       	movw	r24, r18
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	9c 01       	movw	r18, r24
    106c:	a9 e8       	ldi	r26, 0x89	; 137
    106e:	b8 e8       	ldi	r27, 0x88	; 136
    1070:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    1074:	96 95       	lsr	r25
    1076:	87 95       	ror	r24
    1078:	92 95       	swap	r25
    107a:	82 95       	swap	r24
    107c:	8f 70       	andi	r24, 0x0F	; 15
    107e:	89 27       	eor	r24, r25
    1080:	9f 70       	andi	r25, 0x0F	; 15
    1082:	89 27       	eor	r24, r25
    1084:	9c 83       	std	Y+4, r25	; 0x04
    1086:	8b 83       	std	Y+3, r24	; 0x03
    1088:	8e 85       	ldd	r24, Y+14	; 0x0e
    108a:	9f 85       	ldd	r25, Y+15	; 0x0f
    108c:	a8 89       	ldd	r26, Y+16	; 0x10
    108e:	b9 89       	ldd	r27, Y+17	; 0x11
    1090:	28 ee       	ldi	r18, 0xE8	; 232
    1092:	33 e0       	ldi	r19, 0x03	; 3
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <__udivmodsi4>
    10a0:	da 01       	movw	r26, r20
    10a2:	c9 01       	movw	r24, r18
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	4d 81       	ldd	r20, Y+5	; 0x05
    10aa:	5e 81       	ldd	r21, Y+6	; 0x06
    10ac:	9a 01       	movw	r18, r20
    10ae:	a9 e8       	ldi	r26, 0x89	; 137
    10b0:	b8 e8       	ldi	r27, 0x88	; 136
    10b2:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    10b6:	9c 01       	movw	r18, r24
    10b8:	36 95       	lsr	r19
    10ba:	27 95       	ror	r18
    10bc:	32 95       	swap	r19
    10be:	22 95       	swap	r18
    10c0:	2f 70       	andi	r18, 0x0F	; 15
    10c2:	23 27       	eor	r18, r19
    10c4:	3f 70       	andi	r19, 0x0F	; 15
    10c6:	23 27       	eor	r18, r19
    10c8:	6c e3       	ldi	r22, 0x3C	; 60
    10ca:	62 9f       	mul	r22, r18
    10cc:	c0 01       	movw	r24, r0
    10ce:	63 9f       	mul	r22, r19
    10d0:	90 0d       	add	r25, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	9a 01       	movw	r18, r20
    10d6:	28 1b       	sub	r18, r24
    10d8:	39 0b       	sbc	r19, r25
    10da:	c9 01       	movw	r24, r18
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	1f 82       	std	Y+7, r1	; 0x07
    10e2:	58 c0       	rjmp	.+176    	; 0x1194 <__stack+0x95>
    10e4:	49 81       	ldd	r20, Y+1	; 0x01
    10e6:	5a 81       	ldd	r21, Y+2	; 0x02
    10e8:	9a 01       	movw	r18, r20
    10ea:	ad ec       	ldi	r26, 0xCD	; 205
    10ec:	bc ec       	ldi	r27, 0xCC	; 204
    10ee:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	96 95       	lsr	r25
    10f8:	87 95       	ror	r24
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	9c 01       	movw	r18, r24
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	82 0f       	add	r24, r18
    110e:	93 1f       	adc	r25, r19
    1110:	fa 01       	movw	r30, r20
    1112:	e8 1b       	sub	r30, r24
    1114:	f9 0b       	sbc	r31, r25
    1116:	cf 01       	movw	r24, r30
    1118:	8b 87       	std	Y+11, r24	; 0x0b
    111a:	8b 85       	ldd	r24, Y+11	; 0x0b
    111c:	80 5d       	subi	r24, 0xD0	; 208
    111e:	8b 87       	std	Y+11, r24	; 0x0b
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	9c 01       	movw	r18, r24
    1126:	ad ec       	ldi	r26, 0xCD	; 205
    1128:	bc ec       	ldi	r27, 0xCC	; 204
    112a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	96 95       	lsr	r25
    1134:	87 95       	ror	r24
    1136:	96 95       	lsr	r25
    1138:	87 95       	ror	r24
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1140:	68 2f       	mov	r22, r24
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	8b 89       	ldd	r24, Y+19	; 0x13
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8a 89       	ldd	r24, Y+18	; 0x12
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	ac 01       	movw	r20, r24
    1152:	49 5f       	subi	r20, 0xF9	; 249
    1154:	5f 4f       	sbci	r21, 0xFF	; 255
    1156:	8f 81       	ldd	r24, Y+7	; 0x07
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	fa 01       	movw	r30, r20
    115e:	e8 1b       	sub	r30, r24
    1160:	f9 0b       	sbc	r31, r25
    1162:	cf 01       	movw	r24, r30
    1164:	e4 e1       	ldi	r30, 0x14	; 20
    1166:	e2 9f       	mul	r30, r18
    1168:	a0 01       	movw	r20, r0
    116a:	e3 9f       	mul	r30, r19
    116c:	50 0d       	add	r21, r0
    116e:	11 24       	eor	r1, r1
    1170:	e0 e5       	ldi	r30, 0x50	; 80
    1172:	e6 9f       	mul	r30, r22
    1174:	90 01       	movw	r18, r0
    1176:	e7 9f       	mul	r30, r23
    1178:	30 0d       	add	r19, r0
    117a:	11 24       	eor	r1, r1
    117c:	24 0f       	add	r18, r20
    117e:	35 1f       	adc	r19, r21
    1180:	82 0f       	add	r24, r18
    1182:	93 1f       	adc	r25, r19
    1184:	82 5f       	subi	r24, 0xF2	; 242
    1186:	9c 4f       	sbci	r25, 0xFC	; 252
    1188:	2b 85       	ldd	r18, Y+11	; 0x0b
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18
    118e:	8f 81       	ldd	r24, Y+7	; 0x07
    1190:	8f 5f       	subi	r24, 0xFF	; 255
    1192:	8f 83       	std	Y+7, r24	; 0x07
    1194:	8f 81       	ldd	r24, Y+7	; 0x07
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	08 f4       	brcc	.+2      	; 0x119c <__stack+0x9d>
    119a:	a4 cf       	rjmp	.-184    	; 0x10e4 <time_to_digit+0xe2>
    119c:	18 86       	std	Y+8, r1	; 0x08
    119e:	58 c0       	rjmp	.+176    	; 0x1250 <__stack+0x151>
    11a0:	4d 81       	ldd	r20, Y+5	; 0x05
    11a2:	5e 81       	ldd	r21, Y+6	; 0x06
    11a4:	9a 01       	movw	r18, r20
    11a6:	ad ec       	ldi	r26, 0xCD	; 205
    11a8:	bc ec       	ldi	r27, 0xCC	; 204
    11aa:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    11ae:	96 95       	lsr	r25
    11b0:	87 95       	ror	r24
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	96 95       	lsr	r25
    11b8:	87 95       	ror	r24
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	9c 01       	movw	r18, r24
    11c0:	22 0f       	add	r18, r18
    11c2:	33 1f       	adc	r19, r19
    11c4:	22 0f       	add	r18, r18
    11c6:	33 1f       	adc	r19, r19
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
    11cc:	9a 01       	movw	r18, r20
    11ce:	28 1b       	sub	r18, r24
    11d0:	39 0b       	sbc	r19, r25
    11d2:	c9 01       	movw	r24, r18
    11d4:	8c 87       	std	Y+12, r24	; 0x0c
    11d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d8:	80 5d       	subi	r24, 0xD0	; 208
    11da:	8c 87       	std	Y+12, r24	; 0x0c
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	9c 01       	movw	r18, r24
    11e2:	ad ec       	ldi	r26, 0xCD	; 205
    11e4:	bc ec       	ldi	r27, 0xCC	; 204
    11e6:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    11ea:	96 95       	lsr	r25
    11ec:	87 95       	ror	r24
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fc:	68 2f       	mov	r22, r24
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	8b 89       	ldd	r24, Y+19	; 0x13
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	8a 89       	ldd	r24, Y+18	; 0x12
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	ac 01       	movw	r20, r24
    120e:	4d 5f       	subi	r20, 0xFD	; 253
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	88 85       	ldd	r24, Y+8	; 0x08
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	fa 01       	movw	r30, r20
    121a:	e8 1b       	sub	r30, r24
    121c:	f9 0b       	sbc	r31, r25
    121e:	cf 01       	movw	r24, r30
    1220:	e4 e1       	ldi	r30, 0x14	; 20
    1222:	e2 9f       	mul	r30, r18
    1224:	a0 01       	movw	r20, r0
    1226:	e3 9f       	mul	r30, r19
    1228:	50 0d       	add	r21, r0
    122a:	11 24       	eor	r1, r1
    122c:	e0 e5       	ldi	r30, 0x50	; 80
    122e:	e6 9f       	mul	r30, r22
    1230:	90 01       	movw	r18, r0
    1232:	e7 9f       	mul	r30, r23
    1234:	30 0d       	add	r19, r0
    1236:	11 24       	eor	r1, r1
    1238:	24 0f       	add	r18, r20
    123a:	35 1f       	adc	r19, r21
    123c:	82 0f       	add	r24, r18
    123e:	93 1f       	adc	r25, r19
    1240:	82 5f       	subi	r24, 0xF2	; 242
    1242:	9c 4f       	sbci	r25, 0xFC	; 252
    1244:	2c 85       	ldd	r18, Y+12	; 0x0c
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
    124a:	88 85       	ldd	r24, Y+8	; 0x08
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	88 87       	std	Y+8, r24	; 0x08
    1250:	88 85       	ldd	r24, Y+8	; 0x08
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	08 f4       	brcc	.+2      	; 0x1258 <__stack+0x159>
    1256:	a4 cf       	rjmp	.-184    	; 0x11a0 <__stack+0xa1>
    1258:	19 86       	std	Y+9, r1	; 0x09
    125a:	66 c0       	rjmp	.+204    	; 0x1328 <__stack+0x229>
    125c:	4b 81       	ldd	r20, Y+3	; 0x03
    125e:	5c 81       	ldd	r21, Y+4	; 0x04
    1260:	9a 01       	movw	r18, r20
    1262:	ad ec       	ldi	r26, 0xCD	; 205
    1264:	bc ec       	ldi	r27, 0xCC	; 204
    1266:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    126a:	96 95       	lsr	r25
    126c:	87 95       	ror	r24
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	96 95       	lsr	r25
    1274:	87 95       	ror	r24
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	9c 01       	movw	r18, r24
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	9a 01       	movw	r18, r20
    128a:	28 1b       	sub	r18, r24
    128c:	39 0b       	sbc	r19, r25
    128e:	c9 01       	movw	r24, r18
    1290:	8a 87       	std	Y+10, r24	; 0x0a
    1292:	8a 85       	ldd	r24, Y+10	; 0x0a
    1294:	80 5d       	subi	r24, 0xD0	; 208
    1296:	8a 87       	std	Y+10, r24	; 0x0a
    1298:	31 e0       	ldi	r19, 0x01	; 1
    129a:	8a 85       	ldd	r24, Y+10	; 0x0a
    129c:	80 33       	cpi	r24, 0x30	; 48
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__stack+0x1a3>
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	0a 97       	sbiw	r24, 0x0a	; 10
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__stack+0x1af>
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	83 2f       	mov	r24, r19
    12b0:	82 23       	and	r24, r18
    12b2:	88 23       	and	r24, r24
    12b4:	11 f0       	breq	.+4      	; 0x12ba <__stack+0x1bb>
    12b6:	80 e1       	ldi	r24, 0x10	; 16
    12b8:	8a 87       	std	Y+10, r24	; 0x0a
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	9c 01       	movw	r18, r24
    12c0:	ad ec       	ldi	r26, 0xCD	; 205
    12c2:	bc ec       	ldi	r27, 0xCC	; 204
    12c4:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__umulhisi3>
    12c8:	96 95       	lsr	r25
    12ca:	87 95       	ror	r24
    12cc:	96 95       	lsr	r25
    12ce:	87 95       	ror	r24
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
    12d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12da:	68 2f       	mov	r22, r24
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	8b 89       	ldd	r24, Y+19	; 0x13
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	8a 89       	ldd	r24, Y+18	; 0x12
    12e6:	48 2f       	mov	r20, r24
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	89 85       	ldd	r24, Y+9	; 0x09
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	fa 01       	movw	r30, r20
    12f2:	e8 1b       	sub	r30, r24
    12f4:	f9 0b       	sbc	r31, r25
    12f6:	cf 01       	movw	r24, r30
    12f8:	e4 e1       	ldi	r30, 0x14	; 20
    12fa:	e2 9f       	mul	r30, r18
    12fc:	a0 01       	movw	r20, r0
    12fe:	e3 9f       	mul	r30, r19
    1300:	50 0d       	add	r21, r0
    1302:	11 24       	eor	r1, r1
    1304:	e0 e5       	ldi	r30, 0x50	; 80
    1306:	e6 9f       	mul	r30, r22
    1308:	90 01       	movw	r18, r0
    130a:	e7 9f       	mul	r30, r23
    130c:	30 0d       	add	r19, r0
    130e:	11 24       	eor	r1, r1
    1310:	24 0f       	add	r18, r20
    1312:	35 1f       	adc	r19, r21
    1314:	82 0f       	add	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	82 5f       	subi	r24, 0xF2	; 242
    131a:	9c 4f       	sbci	r25, 0xFC	; 252
    131c:	2a 85       	ldd	r18, Y+10	; 0x0a
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	8f 5f       	subi	r24, 0xFF	; 255
    1326:	89 87       	std	Y+9, r24	; 0x09
    1328:	89 85       	ldd	r24, Y+9	; 0x09
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	08 f4       	brcc	.+2      	; 0x1330 <__stack+0x231>
    132e:	96 cf       	rjmp	.-212    	; 0x125c <__stack+0x15d>
    1330:	00 00       	nop
    1332:	63 96       	adiw	r28, 0x13	; 19
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <dsp_clear>:
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	00 d0       	rcall	.+0      	; 0x134c <dsp_clear+0x6>
    134c:	00 d0       	rcall	.+0      	; 0x134e <dsp_clear+0x8>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	1a 82       	std	Y+2, r1	; 0x02
    1354:	19 82       	std	Y+1, r1	; 0x01
    1356:	56 c0       	rjmp	.+172    	; 0x1404 <dsp_clear+0xbe>
    1358:	1c 82       	std	Y+4, r1	; 0x04
    135a:	1b 82       	std	Y+3, r1	; 0x03
    135c:	49 c0       	rjmp	.+146    	; 0x13f0 <dsp_clear+0xaa>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	44 e1       	ldi	r20, 0x14	; 20
    1364:	48 9f       	mul	r20, r24
    1366:	90 01       	movw	r18, r0
    1368:	49 9f       	mul	r20, r25
    136a:	30 0d       	add	r19, r0
    136c:	11 24       	eor	r1, r1
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	82 0f       	add	r24, r18
    1374:	93 1f       	adc	r25, r19
    1376:	82 5f       	subi	r24, 0xF2	; 242
    1378:	9c 4f       	sbci	r25, 0xFC	; 252
    137a:	20 e1       	ldi	r18, 0x10	; 16
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	44 e1       	ldi	r20, 0x14	; 20
    1386:	48 9f       	mul	r20, r24
    1388:	90 01       	movw	r18, r0
    138a:	49 9f       	mul	r20, r25
    138c:	30 0d       	add	r19, r0
    138e:	11 24       	eor	r1, r1
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	9c 81       	ldd	r25, Y+4	; 0x04
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	82 5a       	subi	r24, 0xA2	; 162
    139a:	9c 4f       	sbci	r25, 0xFC	; 252
    139c:	20 e1       	ldi	r18, 0x10	; 16
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	9a 81       	ldd	r25, Y+2	; 0x02
    13a6:	44 e1       	ldi	r20, 0x14	; 20
    13a8:	48 9f       	mul	r20, r24
    13aa:	90 01       	movw	r18, r0
    13ac:	49 9f       	mul	r20, r25
    13ae:	30 0d       	add	r19, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	82 0f       	add	r24, r18
    13b8:	93 1f       	adc	r25, r19
    13ba:	82 55       	subi	r24, 0x52	; 82
    13bc:	9c 4f       	sbci	r25, 0xFC	; 252
    13be:	20 e1       	ldi	r18, 0x10	; 16
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	44 e1       	ldi	r20, 0x14	; 20
    13ca:	48 9f       	mul	r20, r24
    13cc:	90 01       	movw	r18, r0
    13ce:	49 9f       	mul	r20, r25
    13d0:	30 0d       	add	r19, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	82 0f       	add	r24, r18
    13da:	93 1f       	adc	r25, r19
    13dc:	82 50       	subi	r24, 0x02	; 2
    13de:	9c 4f       	sbci	r25, 0xFC	; 252
    13e0:	20 e1       	ldi	r18, 0x10	; 16
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	8b 83       	std	Y+3, r24	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	44 97       	sbiw	r24, 0x14	; 20
    13f6:	0c f4       	brge	.+2      	; 0x13fa <dsp_clear+0xb4>
    13f8:	b2 cf       	rjmp	.-156    	; 0x135e <dsp_clear+0x18>
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
    13fc:	9a 81       	ldd	r25, Y+2	; 0x02
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	04 97       	sbiw	r24, 0x04	; 4
    140a:	0c f4       	brge	.+2      	; 0x140e <dsp_clear+0xc8>
    140c:	a5 cf       	rjmp	.-182    	; 0x1358 <dsp_clear+0x12>
    140e:	00 00       	nop
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <dsp_arrayinit_static>:
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	84 e5       	ldi	r24, 0x54	; 84
    1428:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <dsp_data>
    142c:	83 e5       	ldi	r24, 0x53	; 83
    142e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <dsp_data+0x1>
    1432:	86 e5       	ldi	r24, 0x56	; 86
    1434:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <dsp_data+0x2>
    1438:	83 e5       	ldi	r24, 0x53	; 83
    143a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <dsp_data+0xa>
    143e:	80 e5       	ldi	r24, 0x50	; 80
    1440:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <dsp_data+0xb>
    1444:	84 e4       	ldi	r24, 0x44	; 68
    1446:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <dsp_data+0xc>
    144a:	83 e4       	ldi	r24, 0x43	; 67
    144c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <dsp_data+0x14>
    1450:	8f e4       	ldi	r24, 0x4F	; 79
    1452:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <dsp_data+0x15>
    1456:	8f e4       	ldi	r24, 0x4F	; 79
    1458:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <dsp_data+0x16>
    145c:	8c e4       	ldi	r24, 0x4C	; 76
    145e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <dsp_data+0x17>
    1462:	81 e4       	ldi	r24, 0x41	; 65
    1464:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <dsp_data+0x1e>
    1468:	83 e4       	ldi	r24, 0x43	; 67
    146a:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <dsp_data+0x1f>
    146e:	84 e5       	ldi	r24, 0x54	; 84
    1470:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <dsp_data+0x20>
    1474:	82 e4       	ldi	r24, 0x42	; 66
    1476:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <dsp_data+0x28>
    147a:	82 e4       	ldi	r24, 0x42	; 66
    147c:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <dsp_data+0x29>
    1480:	83 e5       	ldi	r24, 0x53	; 83
    1482:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <dsp_data+0x32>
    1486:	8f e4       	ldi	r24, 0x4F	; 79
    1488:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <dsp_data+0x33>
    148c:	83 e4       	ldi	r24, 0x43	; 67
    148e:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <dsp_data+0x34>
    1492:	8c e4       	ldi	r24, 0x4C	; 76
    1494:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <dsp_data+0x46>
    1498:	86 e5       	ldi	r24, 0x56	; 86
    149a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <dsp_data+0x47>
    149e:	83 e5       	ldi	r24, 0x53	; 83
    14a0:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <dsp_data+0x48>
    14a4:	86 e5       	ldi	r24, 0x56	; 86
    14a6:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <dsp_data+0x8>
    14aa:	8b e4       	ldi	r24, 0x4B	; 75
    14ac:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <dsp_data+0x11>
    14b0:	8d e4       	ldi	r24, 0x4D	; 77
    14b2:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <dsp_data+0x12>
    14b6:	88 e4       	ldi	r24, 0x48	; 72
    14b8:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <dsp_data+0x13>
    14bc:	83 e4       	ldi	r24, 0x43	; 67
    14be:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <dsp_data+0x1c>
    14c2:	83 e4       	ldi	r24, 0x43	; 67
    14c4:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <dsp_data+0x25>
    14c8:	8d e2       	ldi	r24, 0x2D	; 45
    14ca:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <dsp_data+0x30>
    14ce:	85 e2       	ldi	r24, 0x25	; 37
    14d0:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <dsp_data+0x39>
    14d4:	86 e5       	ldi	r24, 0x56	; 86
    14d6:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <dsp_data+0x4d>
    14da:	84 e5       	ldi	r24, 0x54	; 84
    14dc:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <dsp_data+0x50>
    14e0:	80 e5       	ldi	r24, 0x50	; 80
    14e2:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <dsp_data+0x51>
    14e6:	83 e5       	ldi	r24, 0x53	; 83
    14e8:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <dsp_data+0x52>
    14ec:	81 e3       	ldi	r24, 0x31	; 49
    14ee:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <dsp_data+0x53>
    14f2:	82 e3       	ldi	r24, 0x32	; 50
    14f4:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <dsp_data+0x5a>
    14f8:	81 e4       	ldi	r24, 0x41	; 65
    14fa:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <dsp_data+0x64>
    14fe:	80 e5       	ldi	r24, 0x50	; 80
    1500:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <dsp_data+0x65>
    1504:	83 e5       	ldi	r24, 0x53	; 83
    1506:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <dsp_data+0x66>
    150a:	81 e3       	ldi	r24, 0x31	; 49
    150c:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <dsp_data+0x67>
    1510:	82 e3       	ldi	r24, 0x32	; 50
    1512:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <dsp_data+0x6e>
    1516:	84 e5       	ldi	r24, 0x54	; 84
    1518:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <dsp_data+0x78>
    151c:	80 e5       	ldi	r24, 0x50	; 80
    151e:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <dsp_data+0x79>
    1522:	83 e5       	ldi	r24, 0x53	; 83
    1524:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <dsp_data+0x7a>
    1528:	85 e4       	ldi	r24, 0x45	; 69
    152a:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <dsp_data+0x7b>
    152e:	82 e4       	ldi	r24, 0x42	; 66
    1530:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <dsp_data+0x8c>
    1534:	80 e5       	ldi	r24, 0x50	; 80
    1536:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <dsp_data+0x8d>
    153a:	86 e4       	ldi	r24, 0x46	; 70
    153c:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <dsp_data+0x8e>
    1540:	82 e5       	ldi	r24, 0x52	; 82
    1542:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <dsp_data+0x94>
    1546:	85 e2       	ldi	r24, 0x25	; 37
    1548:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <dsp_data+0x58>
    154c:	85 e2       	ldi	r24, 0x25	; 37
    154e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <dsp_data+0x6c>
    1552:	85 e2       	ldi	r24, 0x25	; 37
    1554:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <dsp_data+0x80>
    1558:	85 e2       	ldi	r24, 0x25	; 37
    155a:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <dsp_data+0x5f>
    155e:	85 e2       	ldi	r24, 0x25	; 37
    1560:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <dsp_data+0x73>
    1564:	82 e4       	ldi	r24, 0x42	; 66
    1566:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <dsp_data+0x92>
    156a:	82 e4       	ldi	r24, 0x42	; 66
    156c:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <dsp_data+0x98>
    1570:	84 e5       	ldi	r24, 0x54	; 84
    1572:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <dsp_data+0xa0>
    1576:	83 e4       	ldi	r24, 0x43	; 67
    1578:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <dsp_data+0xa1>
    157c:	82 e4       	ldi	r24, 0x42	; 66
    157e:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <dsp_data+0xb4>
    1582:	85 e4       	ldi	r24, 0x45	; 69
    1584:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <dsp_data+0xb5>
    1588:	83 e5       	ldi	r24, 0x53	; 83
    158a:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <dsp_data+0xb6>
    158e:	80 e5       	ldi	r24, 0x50	; 80
    1590:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <dsp_data+0xc8>
    1594:	82 e5       	ldi	r24, 0x52	; 82
    1596:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <dsp_data+0xc9>
    159a:	85 e4       	ldi	r24, 0x45	; 69
    159c:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <dsp_data+0xca>
    15a0:	8c e4       	ldi	r24, 0x4C	; 76
    15a2:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <dsp_data+0xdc>
    15a6:	8e e4       	ldi	r24, 0x4E	; 78
    15a8:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <dsp_data+0xdd>
    15ac:	83 e5       	ldi	r24, 0x53	; 83
    15ae:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dsp_data+0xa5>
    15b2:	80 e5       	ldi	r24, 0x50	; 80
    15b4:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <dsp_data+0xa6>
    15b8:	85 e4       	ldi	r24, 0x45	; 69
    15ba:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <dsp_data+0xa7>
    15be:	84 e4       	ldi	r24, 0x44	; 68
    15c0:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <dsp_data+0xa8>
    15c4:	8b e4       	ldi	r24, 0x4B	; 75
    15c6:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <dsp_data+0xad>
    15ca:	8d e4       	ldi	r24, 0x4D	; 77
    15cc:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <dsp_data+0xae>
    15d0:	88 e4       	ldi	r24, 0x48	; 72
    15d2:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dsp_data+0xaf>
    15d6:	8f e4       	ldi	r24, 0x4F	; 79
    15d8:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <dsp_data+0xe2>
    15dc:	84 e4       	ldi	r24, 0x44	; 68
    15de:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <dsp_data+0xe3>
    15e2:	8f e4       	ldi	r24, 0x4F	; 79
    15e4:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <dsp_data+0xe4>
    15e8:	8b e4       	ldi	r24, 0x4B	; 75
    15ea:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <dsp_data+0xe9>
    15ee:	8d e4       	ldi	r24, 0x4D	; 77
    15f0:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <dsp_data+0xea>
    15f4:	8a e3       	ldi	r24, 0x3A	; 58
    15f6:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <dsp_data+0xb9>
    15fa:	8a e3       	ldi	r24, 0x3A	; 58
    15fc:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <dsp_data+0xbc>
    1600:	8a e3       	ldi	r24, 0x3A	; 58
    1602:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <dsp_data+0xcd>
    1606:	8a e3       	ldi	r24, 0x3A	; 58
    1608:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <dsp_data+0xd0>
    160c:	00 00       	nop
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <invert_binary_number>:
	clear_top_right_bar();
	uint16_t Top_Right_Bar_Divider = (max_value_r - min_value_r) / (LED_COUNT_TOP_RIGHT - 1);
	int8_t amount_r = (current_value_r - min_value_r + Top_Right_Bar_Divider) / Top_Right_Bar_Divider;
	if (amount_r > 0) {led_right_top_bar_select(amount_r);}
	else {led_right_top_bar_select(0);}
}
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	00 d0       	rcall	.+0      	; 0x161a <invert_binary_number+0x6>
    161a:	1f 92       	push	r1
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	19 82       	std	Y+1, r1	; 0x01
    1624:	1a 82       	std	Y+2, r1	; 0x02
    1626:	22 c0       	rjmp	.+68     	; 0x166c <invert_binary_number+0x58>
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	2a 81       	ldd	r18, Y+2	; 0x02
    1630:	22 2f       	mov	r18, r18
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <invert_binary_number+0x26>
    1636:	95 95       	asr	r25
    1638:	87 95       	ror	r24
    163a:	2a 95       	dec	r18
    163c:	e2 f7       	brpl	.-8      	; 0x1636 <invert_binary_number+0x22>
    163e:	81 70       	andi	r24, 0x01	; 1
    1640:	99 27       	eor	r25, r25
    1642:	2a 81       	ldd	r18, Y+2	; 0x02
    1644:	22 2f       	mov	r18, r18
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	47 e0       	ldi	r20, 0x07	; 7
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	ba 01       	movw	r22, r20
    164e:	62 1b       	sub	r22, r18
    1650:	73 0b       	sbc	r23, r19
    1652:	9b 01       	movw	r18, r22
    1654:	02 c0       	rjmp	.+4      	; 0x165a <invert_binary_number+0x46>
    1656:	88 0f       	add	r24, r24
    1658:	99 1f       	adc	r25, r25
    165a:	2a 95       	dec	r18
    165c:	e2 f7       	brpl	.-8      	; 0x1656 <invert_binary_number+0x42>
    165e:	98 2f       	mov	r25, r24
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	89 2b       	or	r24, r25
    1664:	89 83       	std	Y+1, r24	; 0x01
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	8f 5f       	subi	r24, 0xFF	; 255
    166a:	8a 83       	std	Y+2, r24	; 0x02
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	88 30       	cpi	r24, 0x08	; 8
    1670:	d8 f2       	brcs	.-74     	; 0x1628 <invert_binary_number+0x14>
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	08 95       	ret

00001680 <clear_top_left_bar>:
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	82 e2       	ldi	r24, 0x22	; 34
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	22 e2       	ldi	r18, 0x22	; 34
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	f9 01       	movw	r30, r18
    1692:	20 81       	ld	r18, Z
    1694:	2f 70       	andi	r18, 0x0F	; 15
    1696:	fc 01       	movw	r30, r24
    1698:	20 83       	st	Z, r18
    169a:	84 e3       	ldi	r24, 0x34	; 52
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	24 e3       	ldi	r18, 0x34	; 52
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	f9 01       	movw	r30, r18
    16a4:	20 81       	ld	r18, Z
    16a6:	2b 7f       	andi	r18, 0xFB	; 251
    16a8:	fc 01       	movw	r30, r24
    16aa:	20 83       	st	Z, r18
    16ac:	00 00       	nop
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <clear_top_right_bar>:
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	88 e2       	ldi	r24, 0x28	; 40
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	fc 01       	movw	r30, r24
    16c2:	10 82       	st	Z, r1
    16c4:	84 e3       	ldi	r24, 0x34	; 52
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	24 e3       	ldi	r18, 0x34	; 52
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	f9 01       	movw	r30, r18
    16ce:	20 81       	ld	r18, Z
    16d0:	2c 7f       	andi	r18, 0xFC	; 252
    16d2:	fc 01       	movw	r30, r24
    16d4:	20 83       	st	Z, r18
    16d6:	00 00       	nop
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	08 95       	ret

000016de <led_left_top_bar_select>:

//This Function turns on the desired amount of LEDs of the left Top Bar
void led_left_top_bar_select(uint8_t select_l)
{
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	1f 92       	push	r1
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= ~(0xFF << select_l) << PA4;
    16ea:	82 e2       	ldi	r24, 0x22	; 34
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	22 e2       	ldi	r18, 0x22	; 34
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	f9 01       	movw	r30, r18
    16f4:	20 81       	ld	r18, Z
    16f6:	62 2f       	mov	r22, r18
    16f8:	29 81       	ldd	r18, Y+1	; 0x01
    16fa:	42 2f       	mov	r20, r18
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	2f ef       	ldi	r18, 0xFF	; 255
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <led_left_top_bar_select+0x2a>
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	4a 95       	dec	r20
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <led_left_top_bar_select+0x26>
    170c:	20 95       	com	r18
    170e:	30 95       	com	r19
    1710:	22 95       	swap	r18
    1712:	32 95       	swap	r19
    1714:	30 7f       	andi	r19, 0xF0	; 240
    1716:	32 27       	eor	r19, r18
    1718:	20 7f       	andi	r18, 0xF0	; 240
    171a:	32 27       	eor	r19, r18
    171c:	26 2b       	or	r18, r22
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
	PORTG |= (1<<PG2) & ((0x80) >> select_l);
    1722:	84 e3       	ldi	r24, 0x34	; 52
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	24 e3       	ldi	r18, 0x34	; 52
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	f9 01       	movw	r30, r18
    172c:	20 81       	ld	r18, Z
    172e:	62 2f       	mov	r22, r18
    1730:	29 81       	ldd	r18, Y+1	; 0x01
    1732:	42 2f       	mov	r20, r18
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	20 e8       	ldi	r18, 0x80	; 128
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <led_left_top_bar_select+0x62>
    173c:	35 95       	asr	r19
    173e:	27 95       	ror	r18
    1740:	4a 95       	dec	r20
    1742:	e2 f7       	brpl	.-8      	; 0x173c <led_left_top_bar_select+0x5e>
    1744:	24 70       	andi	r18, 0x04	; 4
    1746:	26 2b       	or	r18, r22
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
}
    174c:	00 00       	nop
    174e:	0f 90       	pop	r0
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	08 95       	ret

00001756 <led_right_top_bar_select>:

//This Function turns on the desired amount of LEDs of the right Top Bar
void led_right_top_bar_select(uint8_t select_r)
{
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	1f 92       	push	r1
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
    1760:	89 83       	std	Y+1, r24	; 0x01
	PORTC |= ~(0xFF >> select_r);
    1762:	88 e2       	ldi	r24, 0x28	; 40
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	28 e2       	ldi	r18, 0x28	; 40
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	f9 01       	movw	r30, r18
    176c:	20 81       	ld	r18, Z
    176e:	62 2f       	mov	r22, r18
    1770:	29 81       	ldd	r18, Y+1	; 0x01
    1772:	42 2f       	mov	r20, r18
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	2f ef       	ldi	r18, 0xFF	; 255
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <led_right_top_bar_select+0x2a>
    177c:	35 95       	asr	r19
    177e:	27 95       	ror	r18
    1780:	4a 95       	dec	r20
    1782:	e2 f7       	brpl	.-8      	; 0x177c <led_right_top_bar_select+0x26>
    1784:	20 95       	com	r18
    1786:	26 2b       	or	r18, r22
    1788:	fc 01       	movw	r30, r24
    178a:	20 83       	st	Z, r18
	PORTG |= (~(0xFF << (select_r/9)) << (select_r/9)) + (select_r/10);
    178c:	84 e3       	ldi	r24, 0x34	; 52
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	24 e3       	ldi	r18, 0x34	; 52
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	62 2f       	mov	r22, r18
    179a:	39 81       	ldd	r19, Y+1	; 0x01
    179c:	29 e3       	ldi	r18, 0x39	; 57
    179e:	32 9f       	mul	r19, r18
    17a0:	21 2d       	mov	r18, r1
    17a2:	11 24       	eor	r1, r1
    17a4:	26 95       	lsr	r18
    17a6:	42 2f       	mov	r20, r18
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	2f ef       	ldi	r18, 0xFF	; 255
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <led_right_top_bar_select+0x5e>
    17b0:	22 0f       	add	r18, r18
    17b2:	33 1f       	adc	r19, r19
    17b4:	4a 95       	dec	r20
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <led_right_top_bar_select+0x5a>
    17b8:	20 95       	com	r18
    17ba:	30 95       	com	r19
    17bc:	59 81       	ldd	r21, Y+1	; 0x01
    17be:	49 e3       	ldi	r20, 0x39	; 57
    17c0:	54 9f       	mul	r21, r20
    17c2:	41 2d       	mov	r20, r1
    17c4:	11 24       	eor	r1, r1
    17c6:	46 95       	lsr	r20
    17c8:	44 2f       	mov	r20, r20
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <led_right_top_bar_select+0x7c>
    17ce:	22 0f       	add	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	4a 95       	dec	r20
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <led_right_top_bar_select+0x78>
    17d6:	42 2f       	mov	r20, r18
    17d8:	39 81       	ldd	r19, Y+1	; 0x01
    17da:	2d ec       	ldi	r18, 0xCD	; 205
    17dc:	32 9f       	mul	r19, r18
    17de:	21 2d       	mov	r18, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	26 95       	lsr	r18
    17e4:	26 95       	lsr	r18
    17e6:	26 95       	lsr	r18
    17e8:	24 0f       	add	r18, r20
    17ea:	26 2b       	or	r18, r22
    17ec:	fc 01       	movw	r30, r24
    17ee:	20 83       	st	Z, r18
}
    17f0:	00 00       	nop
    17f2:	0f 90       	pop	r0
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <dsp_writedata>:


//This Function writes data into the Display
void dsp_writedata(uint8_t data,uint8_t rs)
{
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	00 d0       	rcall	.+0      	; 0x1804 <dsp_writedata+0xa>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <dsp_writedata+0xc>
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	6c 83       	std	Y+4, r22	; 0x04
	//PORTE as Output
	
	PORTE = invert_binary_number(data);
    180e:	0e e2       	ldi	r16, 0x2E	; 46
    1810:	10 e0       	ldi	r17, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	ff de       	rcall	.-514    	; 0x1614 <invert_binary_number>
    1816:	f8 01       	movw	r30, r16
    1818:	80 83       	st	Z, r24
	
	//SETS THE RS PIN
	if (rs==1) {PORTB |= (1<<PB6);}
    181a:	8c 81       	ldd	r24, Y+4	; 0x04
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	51 f4       	brne	.+20     	; 0x1834 <dsp_writedata+0x3a>
    1820:	85 e2       	ldi	r24, 0x25	; 37
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	25 e2       	ldi	r18, 0x25	; 37
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	f9 01       	movw	r30, r18
    182a:	20 81       	ld	r18, Z
    182c:	20 64       	ori	r18, 0x40	; 64
    182e:	fc 01       	movw	r30, r24
    1830:	20 83       	st	Z, r18
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <dsp_writedata+0x4c>
	else {PORTB &= ~(1<<PB6);}
    1834:	85 e2       	ldi	r24, 0x25	; 37
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	25 e2       	ldi	r18, 0x25	; 37
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	f9 01       	movw	r30, r18
    183e:	20 81       	ld	r18, Z
    1840:	2f 7b       	andi	r18, 0xBF	; 191
    1842:	fc 01       	movw	r30, r24
    1844:	20 83       	st	Z, r18

	//Sets enable high
	PORTB |= (1<<PB4);
    1846:	85 e2       	ldi	r24, 0x25	; 37
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	25 e2       	ldi	r18, 0x25	; 37
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	f9 01       	movw	r30, r18
    1850:	20 81       	ld	r18, Z
    1852:	20 61       	ori	r18, 0x10	; 16
    1854:	fc 01       	movw	r30, r24
    1856:	20 83       	st	Z, r18
	//Sets enable low
	for(int wait = 0; wait<100; wait++){}
    1858:	1a 82       	std	Y+2, r1	; 0x02
    185a:	19 82       	std	Y+1, r1	; 0x01
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <dsp_writedata+0x6e>
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	9a 81       	ldd	r25, Y+2	; 0x02
    186c:	84 36       	cpi	r24, 0x64	; 100
    186e:	91 05       	cpc	r25, r1
    1870:	b4 f3       	brlt	.-20     	; 0x185e <dsp_writedata+0x64>
	PORTB &= ~(1<<PB4);
    1872:	85 e2       	ldi	r24, 0x25	; 37
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	25 e2       	ldi	r18, 0x25	; 37
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	f9 01       	movw	r30, r18
    187c:	20 81       	ld	r18, Z
    187e:	2f 7e       	andi	r18, 0xEF	; 239
    1880:	fc 01       	movw	r30, r24
    1882:	20 83       	st	Z, r18
	//This is done so that the display will read the data pins and process them
}
    1884:	00 00       	nop
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

00001898 <dsp_customchar>:
//Function to set customchars
//charpos = position in cgram
//line 1-8 lines of the char

void dsp_customchar(uint8_t charpos, uint8_t line1, uint8_t line2, uint8_t line3, uint8_t line4, uint8_t line5, uint8_t line6, uint8_t line7, uint8_t line8)
{	
    1898:	8f 92       	push	r8
    189a:	af 92       	push	r10
    189c:	cf 92       	push	r12
    189e:	ef 92       	push	r14
    18a0:	0f 93       	push	r16
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	29 97       	sbiw	r28, 0x09	; 9
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	6a 83       	std	Y+2, r22	; 0x02
    18ba:	4b 83       	std	Y+3, r20	; 0x03
    18bc:	2c 83       	std	Y+4, r18	; 0x04
    18be:	0d 83       	std	Y+5, r16	; 0x05
    18c0:	ee 82       	std	Y+6, r14	; 0x06
    18c2:	cf 82       	std	Y+7, r12	; 0x07
    18c4:	a8 86       	std	Y+8, r10	; 0x08
    18c6:	89 86       	std	Y+9, r8	; 0x09
	//where to write in cgram
	dsp_writedata(0x40+8*charpos,0);
    18c8:	89 81       	ldd	r24, Y+1	; 0x01
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	08 96       	adiw	r24, 0x08	; 8
    18d0:	88 0f       	add	r24, r24
    18d2:	88 0f       	add	r24, r24
    18d4:	88 0f       	add	r24, r24
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	90 df       	rcall	.-224    	; 0x17fa <dsp_writedata>

	//write each line
	dsp_writedata(line1,1);
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	8d df       	rcall	.-230    	; 0x17fa <dsp_writedata>
	dsp_writedata(line2,1);
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	8a df       	rcall	.-236    	; 0x17fa <dsp_writedata>
	dsp_writedata(line3,1);
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	87 df       	rcall	.-242    	; 0x17fa <dsp_writedata>
	dsp_writedata(line4,1);
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	84 df       	rcall	.-248    	; 0x17fa <dsp_writedata>
	dsp_writedata(line5,1);
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	8e 81       	ldd	r24, Y+6	; 0x06
    18f6:	81 df       	rcall	.-254    	; 0x17fa <dsp_writedata>
	dsp_writedata(line6,1);
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	8f 81       	ldd	r24, Y+7	; 0x07
    18fc:	7e df       	rcall	.-260    	; 0x17fa <dsp_writedata>
	dsp_writedata(line7,1);
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	88 85       	ldd	r24, Y+8	; 0x08
    1902:	7b df       	rcall	.-266    	; 0x17fa <dsp_writedata>
	dsp_writedata(line8,1);
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	89 85       	ldd	r24, Y+9	; 0x09
    1908:	78 df       	rcall	.-272    	; 0x17fa <dsp_writedata>
    190a:	60 e0       	ldi	r22, 0x00	; 0

	//dsiplay return home
	dsp_writedata(0x02,0);
    190c:	82 e0       	ldi	r24, 0x02	; 2
    190e:	75 df       	rcall	.-278    	; 0x17fa <dsp_writedata>
    1910:	00 00       	nop
    1912:	29 96       	adiw	r28, 0x09	; 9
}
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	0f 91       	pop	r16
    1924:	ef 90       	pop	r14
    1926:	cf 90       	pop	r12
    1928:	af 90       	pop	r10
    192a:	8f 90       	pop	r8
    192c:	08 95       	ret

0000192e <dsp_write>:
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29


void dsp_write(uint8_t dsp_mode)
{	
    1932:	1f 92       	push	r1
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	89 83       	std	Y+1, r24	; 0x01
	if (counter<20)
    193a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    193e:	84 31       	cpi	r24, 0x14	; 20
    1940:	28 f5       	brcc	.+74     	; 0x198c <dsp_write+0x5e>
	dsp_writedata(dsp_data[dsp_mode][dsp_linecounter][counter++],1);
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	68 2f       	mov	r22, r24
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    1954:	91 e0       	ldi	r25, 0x01	; 1
    1956:	98 0f       	add	r25, r24
    1958:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <counter>
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	e4 e1       	ldi	r30, 0x14	; 20
    1962:	e2 9f       	mul	r30, r18
    1964:	a0 01       	movw	r20, r0
    1966:	e3 9f       	mul	r30, r19
    1968:	50 0d       	add	r21, r0
    196a:	11 24       	eor	r1, r1
    196c:	e0 e5       	ldi	r30, 0x50	; 80
    196e:	e6 9f       	mul	r30, r22
    1970:	90 01       	movw	r18, r0
    1972:	e7 9f       	mul	r30, r23
    1974:	30 0d       	add	r19, r0
    1976:	11 24       	eor	r1, r1
    1978:	24 0f       	add	r18, r20
    197a:	35 1f       	adc	r19, r21
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	82 5f       	subi	r24, 0xF2	; 242
    1982:	9c 4f       	sbci	r25, 0xFC	; 252
    1984:	fc 01       	movw	r30, r24
    1986:	80 81       	ld	r24, Z
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	37 df       	rcall	.-402    	; 0x17fa <dsp_writedata>
	if (counter == 20)
    198c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    1990:	84 31       	cpi	r24, 0x14	; 20
    1992:	89 f4       	brne	.+34     	; 0x19b6 <dsp_write+0x88>
	{
		//go into next line
		dsp_writedata(dsp_line[dsp_linecounter],0);
    1994:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	89 5f       	subi	r24, 0xF9	; 249
    199e:	9e 4f       	sbci	r25, 0xFE	; 254
    19a0:	fc 01       	movw	r30, r24
    19a2:	80 81       	ld	r24, Z
    19a4:	60 e0       	ldi	r22, 0x00	; 0
    19a6:	29 df       	rcall	.-430    	; 0x17fa <dsp_writedata>
		counter=0;
    19a8:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <counter>
		dsp_linecounter+=1;
    19ac:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19b0:	8f 5f       	subi	r24, 0xFF	; 255
    19b2:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <dsp_linecounter>
	}
	if (dsp_linecounter == 4)
    19b6:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19ba:	84 30       	cpi	r24, 0x04	; 4
    19bc:	11 f4       	brne	.+4      	; 0x19c2 <dsp_write+0x94>
	{
		dsp_linecounter = 0;
    19be:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <dsp_linecounter>
	}
}
    19c2:	00 00       	nop
    19c4:	0f 90       	pop	r0
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	08 95       	ret

000019cc <dsp_definechars>:


void dsp_definechars()
{
    19cc:	8f 92       	push	r8
    19ce:	af 92       	push	r10
    19d0:	cf 92       	push	r12
    19d2:	ef 92       	push	r14
    19d4:	0f 93       	push	r16
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
	//definition of needed custom chars
	dsp_customchar(0,0,0,0,0,0,0x1F,0x1F,0x1F);
    19de:	0f 2e       	mov	r0, r31
    19e0:	ff e1       	ldi	r31, 0x1F	; 31
    19e2:	8f 2e       	mov	r8, r31
    19e4:	f0 2d       	mov	r31, r0
    19e6:	0f 2e       	mov	r0, r31
    19e8:	ff e1       	ldi	r31, 0x1F	; 31
    19ea:	af 2e       	mov	r10, r31
    19ec:	f0 2d       	mov	r31, r0
    19ee:	0f 2e       	mov	r0, r31
    19f0:	ff e1       	ldi	r31, 0x1F	; 31
    19f2:	cf 2e       	mov	r12, r31
    19f4:	f0 2d       	mov	r31, r0
    19f6:	e1 2c       	mov	r14, r1
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	4a df       	rcall	.-364    	; 0x1898 <dsp_customchar>
	dsp_customchar(1,0x1F,0x1F,0,0,0,0,0,0);
    1a04:	81 2c       	mov	r8, r1
    1a06:	a1 2c       	mov	r10, r1
    1a08:	c1 2c       	mov	r12, r1
    1a0a:	e1 2c       	mov	r14, r1
    1a0c:	00 e0       	ldi	r16, 0x00	; 0
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	4f e1       	ldi	r20, 0x1F	; 31
    1a12:	6f e1       	ldi	r22, 0x1F	; 31
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	40 df       	rcall	.-384    	; 0x1898 <dsp_customchar>
	dsp_customchar(2,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF);
    1a18:	0f 2e       	mov	r0, r31
    1a1a:	ff ee       	ldi	r31, 0xEF	; 239
    1a1c:	8f 2e       	mov	r8, r31
    1a1e:	f0 2d       	mov	r31, r0
    1a20:	0f 2e       	mov	r0, r31
    1a22:	ff ee       	ldi	r31, 0xEF	; 239
    1a24:	af 2e       	mov	r10, r31
    1a26:	f0 2d       	mov	r31, r0
    1a28:	0f 2e       	mov	r0, r31
    1a2a:	ff ee       	ldi	r31, 0xEF	; 239
    1a2c:	cf 2e       	mov	r12, r31
    1a2e:	f0 2d       	mov	r31, r0
    1a30:	0f 2e       	mov	r0, r31
    1a32:	ff ee       	ldi	r31, 0xEF	; 239
    1a34:	ef 2e       	mov	r14, r31
    1a36:	f0 2d       	mov	r31, r0
    1a38:	0f ee       	ldi	r16, 0xEF	; 239
    1a3a:	2f ee       	ldi	r18, 0xEF	; 239
    1a3c:	4f ee       	ldi	r20, 0xEF	; 239
    1a3e:	6f ee       	ldi	r22, 0xEF	; 239
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	2a df       	rcall	.-428    	; 0x1898 <dsp_customchar>
	dsp_customchar(3,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E);
    1a44:	0f 2e       	mov	r0, r31
    1a46:	fe e1       	ldi	r31, 0x1E	; 30
    1a48:	8f 2e       	mov	r8, r31
    1a4a:	f0 2d       	mov	r31, r0
    1a4c:	0f 2e       	mov	r0, r31
    1a4e:	fe e1       	ldi	r31, 0x1E	; 30
    1a50:	af 2e       	mov	r10, r31
    1a52:	f0 2d       	mov	r31, r0
    1a54:	0f 2e       	mov	r0, r31
    1a56:	fe e1       	ldi	r31, 0x1E	; 30
    1a58:	cf 2e       	mov	r12, r31
    1a5a:	f0 2d       	mov	r31, r0
    1a5c:	0f 2e       	mov	r0, r31
    1a5e:	fe e1       	ldi	r31, 0x1E	; 30
    1a60:	ef 2e       	mov	r14, r31
    1a62:	f0 2d       	mov	r31, r0
    1a64:	0e e1       	ldi	r16, 0x1E	; 30
    1a66:	2e e1       	ldi	r18, 0x1E	; 30
    1a68:	4e e1       	ldi	r20, 0x1E	; 30
    1a6a:	6e e1       	ldi	r22, 0x1E	; 30
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	14 df       	rcall	.-472    	; 0x1898 <dsp_customchar>
	dsp_customchar(4,0xFF,0xFF,0xFF,0xFF,0,0,0,0);
    1a70:	81 2c       	mov	r8, r1
    1a72:	a1 2c       	mov	r10, r1
    1a74:	c1 2c       	mov	r12, r1
    1a76:	e1 2c       	mov	r14, r1
    1a78:	0f ef       	ldi	r16, 0xFF	; 255
    1a7a:	2f ef       	ldi	r18, 0xFF	; 255
    1a7c:	4f ef       	ldi	r20, 0xFF	; 255
    1a7e:	6f ef       	ldi	r22, 0xFF	; 255
    1a80:	84 e0       	ldi	r24, 0x04	; 4
    1a82:	0a df       	rcall	.-492    	; 0x1898 <dsp_customchar>
	dsp_customchar(5,0xFF,0xFF,0xFF,0xFF,0xEF,0xEF,0xEF,0xEF);
    1a84:	0f 2e       	mov	r0, r31
    1a86:	ff ee       	ldi	r31, 0xEF	; 239
    1a88:	8f 2e       	mov	r8, r31
    1a8a:	f0 2d       	mov	r31, r0
    1a8c:	0f 2e       	mov	r0, r31
    1a8e:	ff ee       	ldi	r31, 0xEF	; 239
    1a90:	af 2e       	mov	r10, r31
    1a92:	f0 2d       	mov	r31, r0
    1a94:	0f 2e       	mov	r0, r31
    1a96:	ff ee       	ldi	r31, 0xEF	; 239
    1a98:	cf 2e       	mov	r12, r31
    1a9a:	f0 2d       	mov	r31, r0
    1a9c:	0f 2e       	mov	r0, r31
    1a9e:	ff ee       	ldi	r31, 0xEF	; 239
    1aa0:	ef 2e       	mov	r14, r31
    1aa2:	f0 2d       	mov	r31, r0
    1aa4:	0f ef       	ldi	r16, 0xFF	; 255
    1aa6:	2f ef       	ldi	r18, 0xFF	; 255
    1aa8:	4f ef       	ldi	r20, 0xFF	; 255
    1aaa:	6f ef       	ldi	r22, 0xFF	; 255
    1aac:	85 e0       	ldi	r24, 0x05	; 5
    1aae:	f4 de       	rcall	.-536    	; 0x1898 <dsp_customchar>
	dsp_customchar(6,0x08,0x15,0x0A,0x04,0x0A,0x15,0x02,0x00);
    1ab0:	81 2c       	mov	r8, r1
    1ab2:	68 94       	set
    1ab4:	aa 24       	eor	r10, r10
    1ab6:	a1 f8       	bld	r10, 1
    1ab8:	0f 2e       	mov	r0, r31
    1aba:	f5 e1       	ldi	r31, 0x15	; 21
    1abc:	cf 2e       	mov	r12, r31
    1abe:	f0 2d       	mov	r31, r0
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	fa e0       	ldi	r31, 0x0A	; 10
    1ac4:	ef 2e       	mov	r14, r31
    1ac6:	f0 2d       	mov	r31, r0
    1ac8:	04 e0       	ldi	r16, 0x04	; 4
    1aca:	2a e0       	ldi	r18, 0x0A	; 10
    1acc:	45 e1       	ldi	r20, 0x15	; 21
    1ace:	68 e0       	ldi	r22, 0x08	; 8
    1ad0:	86 e0       	ldi	r24, 0x06	; 6
    1ad2:	e2 de       	rcall	.-572    	; 0x1898 <dsp_customchar>
};
    1ad4:	00 00       	nop
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	0f 91       	pop	r16
    1adc:	ef 90       	pop	r14
    1ade:	cf 90       	pop	r12
    1ae0:	af 90       	pop	r10
    1ae2:	8f 90       	pop	r8
    1ae4:	08 95       	ret

00001ae6 <dsp_init>:

//runs through the init commands

void dsp_init()
{
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <dsp_init+0x6>
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1af0:	1a 82       	std	Y+2, r1	; 0x02
    1af2:	19 82       	std	Y+1, r1	; 0x01
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <dsp_init+0x2a>
	{
		dsp_writedata(dsp_command[i],0);
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	80 50       	subi	r24, 0x00	; 0
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	fc 01       	movw	r30, r24
    1b00:	80 81       	ld	r24, Z
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	7a de       	rcall	.-780    	; 0x17fa <dsp_writedata>
//runs through the init commands

void dsp_init()
{
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	07 97       	sbiw	r24, 0x07	; 7
    1b16:	7c f3       	brlt	.-34     	; 0x1af6 <dsp_init+0x10>
	{
		dsp_writedata(dsp_command[i],0);
	}
}
    1b18:	00 00       	nop
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <selftest>:
// 			}
// 		}
// 	}
// }

void selftest(){
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
	
	if (systime_selftest+selftest_time*2 >= sys_time)
    1b2c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1b30:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1b34:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1b38:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1b3c:	88 54       	subi	r24, 0x48	; 72
    1b3e:	94 4f       	sbci	r25, 0xF4	; 244
    1b40:	af 4f       	sbci	r26, 0xFF	; 255
    1b42:	bf 4f       	sbci	r27, 0xFF	; 255
    1b44:	9c 01       	movw	r18, r24
    1b46:	ad 01       	movw	r20, r26
    1b48:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1b4c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1b50:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1b54:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1b58:	28 17       	cp	r18, r24
    1b5a:	39 07       	cpc	r19, r25
    1b5c:	4a 07       	cpc	r20, r26
    1b5e:	5b 07       	cpc	r21, r27
    1b60:	d8 f0       	brcs	.+54     	; 0x1b98 <selftest+0x74>
	{
		string_to_digit(0,"      DIC V0.1      ",0,0);
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	6c e0       	ldi	r22, 0x0C	; 12
    1b68:	71 e0       	ldi	r23, 0x01	; 1
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	93 d8       	rcall	.-3802   	; 0xc94 <string_to_digit>
		string_to_digit(0,"  Software written  ",0,1);
    1b6e:	21 e0       	ldi	r18, 0x01	; 1
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	61 e2       	ldi	r22, 0x21	; 33
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	8d d8       	rcall	.-3814   	; 0xc94 <string_to_digit>
		string_to_digit(0,"         by         ",0,2);
    1b7a:	22 e0       	ldi	r18, 0x02	; 2
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	66 e3       	ldi	r22, 0x36	; 54
    1b80:	71 e0       	ldi	r23, 0x01	; 1
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	87 d8       	rcall	.-3826   	; 0xc94 <string_to_digit>
		string_to_digit(0,"Baltic Racing Alumni",0,3);
    1b86:	23 e0       	ldi	r18, 0x03	; 3
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	6b e4       	ldi	r22, 0x4B	; 75
    1b8c:	71 e0       	ldi	r23, 0x01	; 1
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);	
    1b90:	81 d8       	rcall	.-3838   	; 0xc94 <string_to_digit>
    1b92:	80 e0       	ldi	r24, 0x00	; 0
    1b94:	cc de       	rcall	.-616    	; 0x192e <dsp_write>
    1b96:	35 c0       	rjmp	.+106    	; 0x1c02 <selftest+0xde>
	}
	else if (systime_selftest+selftest_time*4 >= sys_time)
    1b98:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1b9c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1ba0:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1ba4:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1ba8:	80 59       	subi	r24, 0x90	; 144
    1baa:	98 4e       	sbci	r25, 0xE8	; 232
    1bac:	af 4f       	sbci	r26, 0xFF	; 255
    1bae:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	ad 01       	movw	r20, r26
    1bb4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1bb8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1bbc:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1bc0:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1bc4:	28 17       	cp	r18, r24
    1bc6:	39 07       	cpc	r19, r25
    1bc8:	4a 07       	cpc	r20, r26
    1bca:	5b 07       	cpc	r21, r27
    1bcc:	d0 f0       	brcs	.+52     	; 0x1c02 <selftest+0xde>
	{
		string_to_digit(0,"   And fixed by     ",0,0);
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	60 e6       	ldi	r22, 0x60	; 96
    1bd4:	71 e0       	ldi	r23, 0x01	; 1
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	5d d8       	rcall	.-3910   	; 0xc94 <string_to_digit>
		string_to_digit(0,"      Deine Mudda   ",0,1);
    1bda:	21 e0       	ldi	r18, 0x01	; 1
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	65 e7       	ldi	r22, 0x75	; 117
    1be0:	71 e0       	ldi	r23, 0x01	; 1
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	57 d8       	rcall	.-3922   	; 0xc94 <string_to_digit>
		string_to_digit(0,"--------------------",0,2);
    1be6:	22 e0       	ldi	r18, 0x02	; 2
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	6a e8       	ldi	r22, 0x8A	; 138
    1bec:	71 e0       	ldi	r23, 0x01	; 1
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	51 d8       	rcall	.-3934   	; 0xc94 <string_to_digit>
		string_to_digit(0,"  #MOSFET-Barbecue  ",0,3);
    1bf2:	23 e0       	ldi	r18, 0x03	; 3
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	6f e9       	ldi	r22, 0x9F	; 159
    1bf8:	71 e0       	ldi	r23, 0x01	; 1
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	4b d8       	rcall	.-3946   	; 0xc94 <string_to_digit>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);
    1c00:	96 de       	rcall	.-724    	; 0x192e <dsp_write>
    1c02:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	}
		
	if (systime_selftest + LEDS_on * (selftest_time/LED_Count+1)*4 < sys_time )
    1c06:	48 2f       	mov	r20, r24
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	24 e9       	ldi	r18, 0x94	; 148
    1c0c:	31 e0       	ldi	r19, 0x01	; 1
    1c0e:	42 9f       	mul	r20, r18
    1c10:	c0 01       	movw	r24, r0
    1c12:	43 9f       	mul	r20, r19
    1c14:	90 0d       	add	r25, r0
    1c16:	52 9f       	mul	r21, r18
    1c18:	90 0d       	add	r25, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	99 0f       	add	r25, r25
    1c20:	44 0b       	sbc	r20, r20
    1c22:	55 0b       	sbc	r21, r21
    1c24:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1c28:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1c2c:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1c30:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1c34:	82 0f       	add	r24, r18
    1c36:	93 1f       	adc	r25, r19
    1c38:	a4 1f       	adc	r26, r20
    1c3a:	b5 1f       	adc	r27, r21
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	ad 01       	movw	r20, r26
    1c40:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1c44:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1c48:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1c4c:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1c50:	28 17       	cp	r18, r24
    1c52:	39 07       	cpc	r19, r25
    1c54:	4a 07       	cpc	r20, r26
    1c56:	5b 07       	cpc	r21, r27
    1c58:	98 f4       	brcc	.+38     	; 0x1c80 <selftest+0x15c>
    1c5a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	{
		if (LEDS_on <= LED_COUNT_TOP_LEFT)
    1c5e:	86 30       	cpi	r24, 0x06	; 6
    1c60:	20 f4       	brcc	.+8      	; 0x1c6a <selftest+0x146>
		{
			led_left_top_bar_select(LEDS_on);
    1c62:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1c66:	3b dd       	rcall	.-1418   	; 0x16de <led_left_top_bar_select>
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <selftest+0x152>
    1c6a:	85 e0       	ldi	r24, 0x05	; 5
		}
		else
		{
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    1c6c:	38 dd       	rcall	.-1424   	; 0x16de <led_left_top_bar_select>
    1c6e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
			led_right_top_bar_select(LEDS_on-LED_COUNT_TOP_LEFT);
    1c72:	85 50       	subi	r24, 0x05	; 5
    1c74:	70 dd       	rcall	.-1312   	; 0x1756 <led_right_top_bar_select>
    1c76:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1c7a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		LEDS_on++;
    1c7c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <LEDS_on>
    1c80:	00 00       	nop
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
 	}
    1c86:	08 95       	ret

00001c88 <error_handling>:
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	1f 92       	push	r1
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	19 82       	std	Y+1, r1	; 0x01
    1c94:	23 e0       	ldi	r18, 0x03	; 3
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	50 e0       	ldi	r21, 0x00	; 0
    1c9c:	64 eb       	ldi	r22, 0xB4	; 180
    1c9e:	71 e0       	ldi	r23, 0x01	; 1
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 4a 06 	call	0xc94	; 0xc94 <string_to_digit>
    1ca8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1cac:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1cb0:	83 37       	cpi	r24, 0x73	; 115
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	78 f0       	brcs	.+30     	; 0x1cd4 <error_handling+0x4c>
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	23 e0       	ldi	r18, 0x03	; 3
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	6f eb       	ldi	r22, 0xBF	; 191
    1cc4:	71 e0       	ldi	r23, 0x01	; 1
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 4a 06 	call	0xc94	; 0xc94 <string_to_digit>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	8c 5f       	subi	r24, 0xFC	; 252
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1cd8:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1cdc:	31 e0       	ldi	r19, 0x01	; 1
    1cde:	cc 97       	sbiw	r24, 0x3c	; 60
    1ce0:	08 f4       	brcc	.+2      	; 0x1ce4 <error_handling+0x5c>
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	88 2f       	mov	r24, r24
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	04 96       	adiw	r24, 0x04	; 4
    1cec:	21 e0       	ldi	r18, 0x01	; 1
    1cee:	0b 97       	sbiw	r24, 0x0b	; 11
    1cf0:	08 f0       	brcs	.+2      	; 0x1cf4 <error_handling+0x6c>
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	83 2f       	mov	r24, r19
    1cf6:	82 23       	and	r24, r18
    1cf8:	88 23       	and	r24, r24
    1cfa:	79 f0       	breq	.+30     	; 0x1d1a <error_handling+0x92>
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	23 e0       	ldi	r18, 0x03	; 3
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	ac 01       	movw	r20, r24
    1d08:	6f eb       	ldi	r22, 0xBF	; 191
    1d0a:	71 e0       	ldi	r23, 0x01	; 1
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 4a 06 	call	0xc94	; 0xc94 <string_to_digit>
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	8c 5f       	subi	r24, 0xFC	; 252
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	88 23       	and	r24, r24
    1d1e:	51 f4       	brne	.+20     	; 0x1d34 <error_handling+0xac>
    1d20:	23 e0       	ldi	r18, 0x03	; 3
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	64 ec       	ldi	r22, 0xC4	; 196
    1d2a:	71 e0       	ldi	r23, 0x01	; 1
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 4a 06 	call	0xc94	; 0xc94 <string_to_digit>
    1d34:	00 00       	nop
    1d36:	0f 90       	pop	r0
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <main>:
void LED_Blink_CTRL();


// MAIN FUNCTION
int main(void)
{
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
	//Init and config part
	
	port_config();
    1d4e:	c9 d3       	rcall	.+1938   	; 0x24e2 <port_config>
	sys_timer_config();
    1d50:	3e d4       	rcall	.+2172   	; 0x25ce <sys_timer_config>
    1d52:	0e 94 5f 02 	call	0x4be	; 0x4be <can_init_messages>
	can_init_messages();
	dsp_init();
    1d56:	c7 de       	rcall	.-626    	; 0x1ae6 <dsp_init>
    1d58:	39 de       	rcall	.-910    	; 0x19cc <dsp_definechars>
	dsp_definechars();
    1d5a:	0e 94 a7 00 	call	0x14e	; 0x14e <can_cfg>
	can_cfg();
    1d5e:	f3 da       	rcall	.-2586   	; 0x1346 <dsp_clear>
	
	dsp_clear();
    1d60:	78 94       	sei
    1d62:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
	sei();
	systime_selftest = sys_time;
    1d66:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1d6a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1d6e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1d72:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <systime_selftest+0x1>
    1d76:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <systime_selftest>
    1d7a:	01 c0       	rjmp	.+2      	; 0x1d7e <main+0x40>
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1d7c:	d3 de       	rcall	.-602    	; 0x1b24 <selftest>
	{
		selftest();
    1d7e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
	
	dsp_clear();
	sei();
	systime_selftest = sys_time;
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1d82:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1d86:	80 59       	subi	r24, 0x90	; 144
    1d88:	98 4e       	sbci	r25, 0xE8	; 232
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	99 0f       	add	r25, r25
    1d8e:	44 0b       	sbc	r20, r20
    1d90:	55 0b       	sbc	r21, r21
    1d92:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1d96:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1d9a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1d9e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1da2:	28 17       	cp	r18, r24
    1da4:	39 07       	cpc	r19, r25
    1da6:	4a 07       	cpc	r20, r26
    1da8:	5b 07       	cpc	r21, r27
    1daa:	40 f7       	brcc	.-48     	; 0x1d7c <main+0x3e>
	{
		selftest();
	}
	LED_Blink(10,3000);
    1dac:	68 eb       	ldi	r22, 0xB8	; 184
    1dae:	7b e0       	ldi	r23, 0x0B	; 11
    1db0:	8a e0       	ldi	r24, 0x0A	; 10
    1db2:	52 d2       	rcall	.+1188   	; 0x2258 <LED_Blink>
    1db4:	c8 da       	rcall	.-2672   	; 0x1346 <dsp_clear>
	
	dsp_clear();
    1db6:	33 db       	rcall	.-2458   	; 0x141e <dsp_arrayinit_static>
    1db8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
	
	dsp_arrayinit_static();
    1dbc:	81 32       	cpi	r24, 0x21	; 33

	
	//Loop
	while(1){

		if(update_data>=33){ //refresh rate for display about 30Hz
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <main+0x84>
    1dc0:	d8 c1       	rjmp	.+944    	; 0x2172 <main+0x434>
    1dc2:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <update_data>
    1dc6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			update_data = 0;
    1dca:	88 23       	and	r24, r24
			
			if (dsp_mde == 0){ //DiSPlay Mode 0 = Home
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <main+0x92>
    1dce:	3f c1       	rjmp	.+638    	; 0x204e <main+0x310>
    1dd0:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <TSVoltage>
    1dd4:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <TSVoltage+0x1>
				num_to_digit(0,TSVoltage,0,3,5,0);
    1dd8:	e1 2c       	mov	r14, r1
    1dda:	05 e0       	ldi	r16, 0x05	; 5
    1ddc:	23 e0       	ldi	r18, 0x03	; 3
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	bc 01       	movw	r22, r24
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    1de8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    1dec:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(0,GPS_Speed,0,3,14,0);
    1df0:	e1 2c       	mov	r14, r1
    1df2:	0e e0       	ldi	r16, 0x0E	; 14
    1df4:	23 e0       	ldi	r18, 0x03	; 3
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	bc 01       	movw	r22, r24
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    1e00:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1e04:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
				num_to_digit(0,CLT,0,2,6,1);//writes the number 121 for clt TEST ONLY!!!
    1e08:	ee 24       	eor	r14, r14
    1e0a:	e3 94       	inc	r14
    1e0c:	06 e0       	ldi	r16, 0x06	; 6
    1e0e:	22 e0       	ldi	r18, 0x02	; 2
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	bc 01       	movw	r22, r24
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    1e1a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <AccumulatorTemperature>
    1e1e:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <AccumulatorTemperature+0x1>
				num_to_digit(0,AccumulatorTemperature,0,2,15,1);
    1e22:	ee 24       	eor	r14, r14
    1e24:	e3 94       	inc	r14
    1e26:	0f e0       	ldi	r16, 0x0F	; 15
    1e28:	22 e0       	ldi	r18, 0x02	; 2
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    1e34:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <SOC>
    1e38:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <SOC+0x1>
				num_to_digit(0,SOC,0,3,14,2);
    1e3c:	68 94       	set
    1e3e:	ee 24       	eor	r14, r14
    1e40:	e1 f8       	bld	r14, 1
    1e42:	0e e0       	ldi	r16, 0x0E	; 14
    1e44:	23 e0       	ldi	r18, 0x03	; 3
    1e46:	40 e0       	ldi	r20, 0x00	; 0
    1e48:	bc 01       	movw	r22, r24
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    1e50:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <LVSVoltage>
    1e54:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <LVSVoltage+0x1>
				num_to_digit(0,LVSVoltage,0,2,15,3);
    1e58:	0f 2e       	mov	r0, r31
    1e5a:	f3 e0       	ldi	r31, 0x03	; 3
    1e5c:	ef 2e       	mov	r14, r31
    1e5e:	f0 2d       	mov	r31, r0
    1e60:	0f e0       	ldi	r16, 0x0F	; 15
    1e62:	22 e0       	ldi	r18, 0x02	; 2
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	bc 01       	movw	r22, r24
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    1e6e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <Rotary_Encoder_Left>
    1e72:	88 23       	and	r24, r24

//-------------------------- Sitching between brake bias or LC Active------------------------------
					if (Rotary_Encoder_Left == 0){
    1e74:	71 f4       	brne	.+28     	; 0x1e92 <main+0x154>
    1e76:	22 e0       	ldi	r18, 0x02	; 2
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	67 ec       	ldi	r22, 0xC7	; 199
						string_to_digit(0,"LC ACTIVE",0,2);
    1e7c:	71 e0       	ldi	r23, 0x01	; 1
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	0e 94 4a 06 	call	0xc94	; 0xc94 <string_to_digit>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
						LC_change = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <LC_Active>
						LC_Active =TRUE;
    1e90:	2b c0       	rjmp	.+86     	; 0x1ee8 <main+0x1aa>
    1e92:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <LC_Active>
    1e96:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
					}
					else{
						LC_Active = FALSE;
    1e9a:	88 23       	and	r24, r24
						//on first iteration clear the window
						if ( LC_change > 0){
    1e9c:	91 f0       	breq	.+36     	; 0x1ec2 <main+0x184>
    1e9e:	80 e1       	ldi	r24, 0x10	; 16
    1ea0:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <dsp_data+0x2a>
							dsp_data[0][2][2] = 0x10;
    1ea4:	80 e1       	ldi	r24, 0x10	; 16
    1ea6:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <dsp_data+0x2b>
							dsp_data[0][2][3] = 0x10;
    1eaa:	80 e1       	ldi	r24, 0x10	; 16
    1eac:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <dsp_data+0x2c>
							dsp_data[0][2][4] = 0x10;
    1eb0:	80 e1       	ldi	r24, 0x10	; 16
    1eb2:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <dsp_data+0x2d>
							dsp_data[0][2][5] = 0x10;
    1eb6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
							LC_change--;
    1eba:	81 50       	subi	r24, 0x01	; 1
    1ebc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
    1ec0:	ae da       	rcall	.-2724   	; 0x141e <dsp_arrayinit_static>
    1ec2:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <BPR>
							dsp_arrayinit_static();
    1ec6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
						}
						num_to_digit(0,calc_BB(BPF,BPR),0,2,6,2);//writes the number 55 for BB  TEST ONLY!!!
    1eca:	69 2f       	mov	r22, r25
    1ecc:	0e 94 cb 05 	call	0xb96	; 0xb96 <calc_BB>
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	68 94       	set
    1ed6:	ee 24       	eor	r14, r14
    1ed8:	e1 f8       	bld	r14, 1
    1eda:	06 e0       	ldi	r16, 0x06	; 6
    1edc:	22 e0       	ldi	r18, 0x02	; 2
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    1ee8:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <Laptime>
    1eec:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <Laptime+0x1>
					}
//--------------------------------Switching between error indicator and diff time ---------------------------------------
				difftime = Laptime-Besttime;//calculate the differenz from your best time from your last
    1ef0:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <Laptime+0x2>
    1ef4:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <Laptime+0x3>
    1ef8:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    1efc:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
    1f00:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    1f04:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    1f08:	79 01       	movw	r14, r18
    1f0a:	8a 01       	movw	r16, r20
    1f0c:	e8 1a       	sub	r14, r24
    1f0e:	f9 0a       	sbc	r15, r25
    1f10:	0a 0b       	sbc	r16, r26
    1f12:	1b 0b       	sbc	r17, r27
    1f14:	d8 01       	movw	r26, r16
    1f16:	c7 01       	movw	r24, r14
    1f18:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <difftime>
    1f1c:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <difftime+0x1>
    1f20:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <difftime+0x2>
    1f24:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <difftime+0x3>
    1f28:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <difftime_old>
    1f2c:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <difftime_old+0x1>
				
				if (difftime_old != difftime){//If your diff time has been updated (new Lap) we want to show your diff on the homescreen
    1f30:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <difftime_old+0x2>
    1f34:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <difftime_old+0x3>
    1f38:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1f3c:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
    1f40:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1f44:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1f48:	28 17       	cp	r18, r24
    1f4a:	39 07       	cpc	r19, r25
    1f4c:	4a 07       	cpc	r20, r26
    1f4e:	5b 07       	cpc	r21, r27
    1f50:	a1 f1       	breq	.+104    	; 0x1fba <main+0x27c>
    1f52:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1f56:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
					systime_time_indicator = sys_time;
    1f5a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1f5e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1f62:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1f66:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1f6a:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1f6e:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1f72:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <systime_time_indicator>
    1f76:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <systime_time_indicator+0x1>
					systime_time_indicator += time_indicator_intervall;
    1f7a:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1f7e:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1f82:	88 57       	subi	r24, 0x78	; 120
    1f84:	9c 4e       	sbci	r25, 0xEC	; 236
    1f86:	af 4f       	sbci	r26, 0xFF	; 255
    1f88:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8a:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1f8e:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1f92:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1f96:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1f9a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1f9e:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					difftime_old = difftime;
    1fa2:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1fa6:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1faa:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <difftime_old>
    1fae:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <difftime_old+0x1>
    1fb2:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <difftime_old+0x2>
    1fb6:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <difftime_old+0x3>
    1fba:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <systime_time_indicator>
    1fbe:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <systime_time_indicator+0x1>
				}
				if (systime_time_indicator > sys_time){
    1fc2:	40 91 41 02 	lds	r20, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1fc6:	50 91 42 02 	lds	r21, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1fca:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1fce:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1fd2:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1fd6:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1fda:	82 17       	cp	r24, r18
    1fdc:	93 07       	cpc	r25, r19
    1fde:	a4 07       	cpc	r26, r20
    1fe0:	b5 07       	cpc	r27, r21
    1fe2:	68 f5       	brcc	.+90     	; 0x203e <main+0x300>
    1fe4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1fe8:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					time_to_digit(0,abs(difftime),1,3);
    1fec:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1ff0:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1ff4:	99 23       	and	r25, r25
    1ff6:	1c f4       	brge	.+6      	; 0x1ffe <main+0x2c0>
    1ff8:	91 95       	neg	r25
    1ffa:	81 95       	neg	r24
    1ffc:	91 09       	sbc	r25, r1
    1ffe:	09 2e       	mov	r0, r25
    2000:	00 0c       	add	r0, r0
    2002:	aa 0b       	sbc	r26, r26
    2004:	bb 0b       	sbc	r27, r27
    2006:	03 e0       	ldi	r16, 0x03	; 3
    2008:	21 e0       	ldi	r18, 0x01	; 1
    200a:	ac 01       	movw	r20, r24
    200c:	bd 01       	movw	r22, r26
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 01 08 	call	0x1002	; 0x1002 <time_to_digit>
    2014:	8a e3       	ldi	r24, 0x3A	; 58
    2016:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <dsp_data+0x41>
					dsp_data[0][3][5] = ':';
    201a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    201e:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					if (difftime >= 0){
    2022:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    2026:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    202a:	bb 23       	and	r27, r27
    202c:	24 f0       	brlt	.+8      	; 0x2036 <main+0x2f8>
    202e:	8b e2       	ldi	r24, 0x2B	; 43
    2030:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
						dsp_data[0][3][0] = '+';
    2034:	0c c0       	rjmp	.+24     	; 0x204e <main+0x310>
    2036:	8d e2       	ldi	r24, 0x2D	; 45
    2038:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
					}
					else{
					dsp_data[0][3][0] = '-';
    203c:	08 c0       	rjmp	.+16     	; 0x204e <main+0x310>
    203e:	24 de       	rcall	.-952    	; 0x1c88 <error_handling>
    2040:	23 e0       	ldi	r18, 0x03	; 3
					}
				}
				else{//If the diff time has not been updated within the the last intervall we want to show the error stuff
					error_handling();
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	68 e2       	ldi	r22, 0x28	; 40
					string_to_digit(0,error_indicator,0,3);					
    2046:	72 e0       	ldi	r23, 0x02	; 2
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	0e 94 4a 06 	call	0xc94	; 0xc94 <string_to_digit>
    204e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    2052:	81 30       	cpi	r24, 0x01	; 1
			}
			
			
			
			
			if (dsp_mde == 1){ //debug screen
    2054:	c1 f5       	brne	.+112    	; 0x20c6 <main+0x388>
    2056:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <APPS1>
    205a:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS1,0,3,5,1);
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	ee 24       	eor	r14, r14
    2060:	e3 94       	inc	r14
    2062:	05 e0       	ldi	r16, 0x05	; 5
    2064:	23 e0       	ldi	r18, 0x03	; 3
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	bc 01       	movw	r22, r24
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    2070:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <APPS2>
    2074:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS2,0,3,12,1);
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	ee 24       	eor	r14, r14
    207a:	e3 94       	inc	r14
    207c:	0c e0       	ldi	r16, 0x0C	; 12
    207e:	23 e0       	ldi	r18, 0x03	; 3
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	bc 01       	movw	r22, r24
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    208a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
    208e:	88 2f       	mov	r24, r24

				num_to_digit(1,BPF,0,2,4,3);
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0f 2e       	mov	r0, r31
    2094:	f3 e0       	ldi	r31, 0x03	; 3
    2096:	ef 2e       	mov	r14, r31
    2098:	f0 2d       	mov	r31, r0
    209a:	04 e0       	ldi	r16, 0x04	; 4
    209c:	22 e0       	ldi	r18, 0x02	; 2
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	bc 01       	movw	r22, r24
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    20a8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <BPR>
    20ac:	88 2f       	mov	r24, r24
				num_to_digit(1,BPR,0,2,10,3);				
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0f 2e       	mov	r0, r31
    20b2:	f3 e0       	ldi	r31, 0x03	; 3
    20b4:	ef 2e       	mov	r14, r31
    20b6:	f0 2d       	mov	r31, r0
    20b8:	0a e0       	ldi	r16, 0x0A	; 10
    20ba:	22 e0       	ldi	r18, 0x02	; 2
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	bc 01       	movw	r22, r24
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    20c6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    20ca:	82 30       	cpi	r24, 0x02	; 2
			
			
			
			
			
			if (dsp_mde == 2){ //Times screen
    20cc:	09 f0       	breq	.+2      	; 0x20d0 <main+0x392>
    20ce:	51 c0       	rjmp	.+162    	; 0x2172 <main+0x434>
    20d0:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    20d4:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
				time_to_digit(2,Besttime,4,1); //BEST/LAP Convertes a time in ms to minutes:seconds:milliseconds
    20d8:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    20dc:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    20e0:	01 e0       	ldi	r16, 0x01	; 1
    20e2:	24 e0       	ldi	r18, 0x04	; 4
    20e4:	ac 01       	movw	r20, r24
    20e6:	bd 01       	movw	r22, r26
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	0e 94 01 08 	call	0x1002	; 0x1002 <time_to_digit>
    20ee:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Pred_time>
    20f2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Pred_time+0x1>
				time_to_digit(2,Pred_time,4,2); //Predicted
    20f6:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <Pred_time+0x2>
    20fa:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <Pred_time+0x3>
    20fe:	02 e0       	ldi	r16, 0x02	; 2
    2100:	24 e0       	ldi	r18, 0x04	; 4
    2102:	ac 01       	movw	r20, r24
    2104:	bd 01       	movw	r22, r26
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	0e 94 01 08 	call	0x1002	; 0x1002 <time_to_digit>
    210c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <ODO>
    2110:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <ODO+0x1>
				num_to_digit(2,ODO,0,3,10,3); //ODO
    2114:	0f 2e       	mov	r0, r31
    2116:	f3 e0       	ldi	r31, 0x03	; 3
    2118:	ef 2e       	mov	r14, r31
    211a:	f0 2d       	mov	r31, r0
    211c:	0a e0       	ldi	r16, 0x0A	; 10
    211e:	23 e0       	ldi	r18, 0x03	; 3
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	bc 01       	movw	r22, r24
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    212a:	e1 2c       	mov	r14, r1
    212c:	03 e0       	ldi	r16, 0x03	; 3
    212e:	21 e0       	ldi	r18, 0x01	; 1
				num_to_digit(2,9,0,1,3,0);//TC setting needs to be implemented!!!
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	69 e0       	ldi	r22, 0x09	; 9
    2134:	70 e0       	ldi	r23, 0x00	; 0
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    213c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <LapNumber>
    2140:	88 2f       	mov	r24, r24
				num_to_digit(2,LapNumber,0,2,3,3);//Lap number
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0f 2e       	mov	r0, r31
    2146:	f3 e0       	ldi	r31, 0x03	; 3
    2148:	ef 2e       	mov	r14, r31
    214a:	f0 2d       	mov	r31, r0
    214c:	03 e0       	ldi	r16, 0x03	; 3
    214e:	22 e0       	ldi	r18, 0x02	; 2
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	bc 01       	movw	r22, r24
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    215a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    215e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(2,GPS_Speed,0,3,10,0);//Speed
    2162:	e1 2c       	mov	r14, r1
    2164:	0a e0       	ldi	r16, 0x0A	; 10
    2166:	23 e0       	ldi	r18, 0x03	; 3
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	bc 01       	movw	r22, r24
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <num_to_digit>
    2172:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <draw_data>
				
			}
		}
		if(draw_data){ //1000Hz/1ms loop
    2176:	88 23       	and	r24, r24
    2178:	31 f0       	breq	.+12     	; 0x2186 <main+0x448>
    217a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			dsp_write(dsp_mde);
    217e:	d7 db       	rcall	.-2130   	; 0x192e <dsp_write>
    2180:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <draw_data>
			draw_data = 0;
    2184:	96 d0       	rcall	.+300    	; 0x22b2 <LED_Blink_CTRL>
    2186:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
			LED_Blink_CTRL();		
    218a:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}	
		if((sys_time - time_100) >= 10){//100Hz/10ms loop
    218e:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    2192:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    2196:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <time_100>
    219a:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <time_100+0x1>
    219e:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <time_100+0x2>
    21a2:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <time_100+0x3>
    21a6:	79 01       	movw	r14, r18
    21a8:	8a 01       	movw	r16, r20
    21aa:	e8 1a       	sub	r14, r24
    21ac:	f9 0a       	sbc	r15, r25
    21ae:	0a 0b       	sbc	r16, r26
    21b0:	1b 0b       	sbc	r17, r27
    21b2:	d8 01       	movw	r26, r16
    21b4:	c7 01       	movw	r24, r14
    21b6:	0a 97       	sbiw	r24, 0x0a	; 10
    21b8:	a1 05       	cpc	r26, r1
    21ba:	b1 05       	cpc	r27, r1
    21bc:	a0 f0       	brcs	.+40     	; 0x21e6 <main+0x4a8>
    21be:	0e 94 38 03 	call	0x670	; 0x670 <CAN_recieve>
    21c2:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_put_data>
			CAN_recieve();
    21c6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
			CAN_put_data();			
    21ca:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_100 = sys_time;		
    21ce:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    21d2:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    21d6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <time_100>
    21da:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <time_100+0x1>
    21de:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <time_100+0x2>
    21e2:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <time_100+0x3>
    21e6:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
    21ea:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}
		if((sys_time - time_10) >= 100){//10Hz/100ms loop
    21ee:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    21f2:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    21f6:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <time_10>
    21fa:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <time_10+0x1>
    21fe:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <time_10+0x2>
    2202:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <time_10+0x3>
    2206:	79 01       	movw	r14, r18
    2208:	8a 01       	movw	r16, r20
    220a:	e8 1a       	sub	r14, r24
    220c:	f9 0a       	sbc	r15, r25
    220e:	0a 0b       	sbc	r16, r26
    2210:	1b 0b       	sbc	r17, r27
    2212:	d8 01       	movw	r26, r16
    2214:	c7 01       	movw	r24, r14
    2216:	84 36       	cpi	r24, 0x64	; 100
    2218:	91 05       	cpc	r25, r1
    221a:	a1 05       	cpc	r26, r1
    221c:	b1 05       	cpc	r27, r1
    221e:	08 f4       	brcc	.+2      	; 0x2222 <main+0x4e4>
    2220:	cb cd       	rjmp	.-1130   	; 0x1db8 <main+0x7a>
    2222:	84 e3       	ldi	r24, 0x34	; 52
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	24 e3       	ldi	r18, 0x34	; 52
			PORTG ^= (1<<PG3);
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	f9 01       	movw	r30, r18
    222c:	30 81       	ld	r19, Z
    222e:	28 e0       	ldi	r18, 0x08	; 8
    2230:	23 27       	eor	r18, r19
    2232:	fc 01       	movw	r30, r24
    2234:	20 83       	st	Z, r18
    2236:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    223a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_10 = sys_time;
    223e:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2242:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2246:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <time_10>
    224a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <time_10+0x1>
    224e:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <time_10+0x2>
    2252:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <time_10+0x3>
    2256:	b0 cd       	rjmp	.-1184   	; 0x1db8 <main+0x7a>

00002258 <LED_Blink>:
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
		}
	}	
    225c:	00 d0       	rcall	.+0      	; 0x225e <LED_Blink+0x6>
}

void LED_Blink(uint8_t Anzahl_Blinks, uint16_t Zeit_fuer_Blinken){
    225e:	1f 92       	push	r1
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	7b 83       	std	Y+3, r23	; 0x03
    2268:	6a 83       	std	Y+2, r22	; 0x02
	Anzahl_Blinks_Glob = Anzahl_Blinks;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
    226c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <Anzahl_Blinks_Glob>
	Zeit_fuer_Blinken_Glob = Zeit_fuer_Blinken;
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	9b 81       	ldd	r25, Y+3	; 0x03
    2274:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    2278:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <Zeit_fuer_Blinken_Glob>
	sys_time_blink = sys_time;
    227c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    2280:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    2284:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2288:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    228c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <sys_time_blink>
    2290:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <sys_time_blink+0x1>
    2294:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <sys_time_blink+0x2>
    2298:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <sys_time_blink+0x3>
	LED_Blink_Flag = 0;
    229c:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    22a0:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	}
    22a4:	00 00       	nop
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	08 95       	ret

000022b2 <LED_Blink_CTRL>:

void LED_Blink_CTRL(){
    22b2:	0f 93       	push	r16
    22b4:	1f 93       	push	r17
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	
	if (LED_Blink_Flag < Anzahl_Blinks_Glob)
    22be:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <LED_Blink_Flag>
    22c2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    22c6:	98 17       	cp	r25, r24
    22c8:	08 f0       	brcs	.+2      	; 0x22cc <LED_Blink_CTRL+0x1a>
    22ca:	a2 c0       	rjmp	.+324    	; 0x2410 <LED_Blink_CTRL+0x15e>
	{
		if (((sys_time_blink + (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)/2) + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 0))
    22cc:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    22d0:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    22d4:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	ac 01       	movw	r20, r24
    22e2:	c9 01       	movw	r24, r18
    22e4:	ba 01       	movw	r22, r20
    22e6:	45 d3       	rcall	.+1674   	; 0x2972 <__udivmodhi4>
    22e8:	cb 01       	movw	r24, r22
    22ea:	96 95       	lsr	r25
    22ec:	87 95       	ror	r24
    22ee:	9c 01       	movw	r18, r24
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    22f8:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    22fc:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    2300:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    2304:	89 01       	movw	r16, r18
    2306:	9a 01       	movw	r18, r20
    2308:	08 0f       	add	r16, r24
    230a:	19 1f       	adc	r17, r25
    230c:	2a 1f       	adc	r18, r26
    230e:	3b 1f       	adc	r19, r27
    2310:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2314:	e8 2f       	mov	r30, r24
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    231c:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    2320:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	88 0f       	add	r24, r24
    232a:	99 1f       	adc	r25, r25
    232c:	bc 01       	movw	r22, r24
    232e:	ca 01       	movw	r24, r20
    2330:	20 d3       	rcall	.+1600   	; 0x2972 <__udivmodhi4>
    2332:	cb 01       	movw	r24, r22
    2334:	ac 01       	movw	r20, r24
    2336:	e4 9f       	mul	r30, r20
    2338:	c0 01       	movw	r24, r0
    233a:	e5 9f       	mul	r30, r21
    233c:	90 0d       	add	r25, r0
    233e:	f4 9f       	mul	r31, r20
    2340:	90 0d       	add	r25, r0
    2342:	11 24       	eor	r1, r1
    2344:	cc 01       	movw	r24, r24
    2346:	a0 e0       	ldi	r26, 0x00	; 0
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	a9 01       	movw	r20, r18
    234c:	98 01       	movw	r18, r16
    234e:	28 0f       	add	r18, r24
    2350:	39 1f       	adc	r19, r25
    2352:	4a 1f       	adc	r20, r26
    2354:	5b 1f       	adc	r21, r27
    2356:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    235a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    235e:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2362:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2366:	82 17       	cp	r24, r18
    2368:	93 07       	cpc	r25, r19
    236a:	a4 07       	cpc	r26, r20
    236c:	b5 07       	cpc	r27, r21
    236e:	88 f0       	brcs	.+34     	; 0x2392 <LED_Blink_CTRL+0xe0>
    2370:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
    2374:	88 23       	and	r24, r24
    2376:	69 f4       	brne	.+26     	; 0x2392 <LED_Blink_CTRL+0xe0>
		{
			LED_Blink_on = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <LED_Blink_on>
			
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    237e:	85 e0       	ldi	r24, 0x05	; 5
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
    2380:	ae d9       	rcall	.-3236   	; 0x16de <led_left_top_bar_select>
    2382:	8a e0       	ldi	r24, 0x0A	; 10
    2384:	e8 d9       	rcall	.-3120   	; 0x1756 <led_right_top_bar_select>
			
			LED_Blink_Flag++;
    2386:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    238a:	8f 5f       	subi	r24, 0xFF	; 255
    238c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <LED_Blink_Flag>
	Anzahl_Blinks_Glob = 0;
	LED_Blink_on = 0;
	clear_top_left_bar();
	clear_top_right_bar();
	}
    2390:	47 c0       	rjmp	.+142    	; 0x2420 <LED_Blink_CTRL+0x16e>
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
			
			LED_Blink_Flag++;
			
		}
		else if (((sys_time_blink  + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 1))
    2392:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    239e:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    23a2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    23a6:	88 2f       	mov	r24, r24
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	bc 01       	movw	r22, r24
    23b0:	ca 01       	movw	r24, r20
    23b2:	df d2       	rcall	.+1470   	; 0x2972 <__udivmodhi4>
    23b4:	cb 01       	movw	r24, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	24 9f       	mul	r18, r20
    23ba:	c0 01       	movw	r24, r0
    23bc:	25 9f       	mul	r18, r21
    23be:	90 0d       	add	r25, r0
    23c0:	34 9f       	mul	r19, r20
    23c2:	90 0d       	add	r25, r0
    23c4:	11 24       	eor	r1, r1
    23c6:	9c 01       	movw	r18, r24
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    23d0:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    23d4:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    23d8:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    23dc:	28 0f       	add	r18, r24
    23de:	39 1f       	adc	r19, r25
    23e0:	4a 1f       	adc	r20, r26
    23e2:	5b 1f       	adc	r21, r27
    23e4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    23e8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    23ec:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    23f0:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    23f4:	82 17       	cp	r24, r18
    23f6:	93 07       	cpc	r25, r19
    23f8:	a4 07       	cpc	r26, r20
    23fa:	b5 07       	cpc	r27, r21
    23fc:	88 f0       	brcs	.+34     	; 0x2420 <LED_Blink_CTRL+0x16e>
    23fe:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
		{
			LED_Blink_on = 0;
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	69 f4       	brne	.+26     	; 0x2420 <LED_Blink_CTRL+0x16e>
			clear_top_left_bar();
    2406:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
			clear_top_right_bar();
    240a:	3a d9       	rcall	.-3468   	; 0x1680 <clear_top_left_bar>
    240c:	53 d9       	rcall	.-3418   	; 0x16b4 <clear_top_right_bar>
		}
	}else{
	LED_Blink_Flag = 0;
    240e:	08 c0       	rjmp	.+16     	; 0x2420 <LED_Blink_CTRL+0x16e>
	Anzahl_Blinks_Glob = 0;
    2410:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    2414:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <Anzahl_Blinks_Glob>
	clear_top_left_bar();
    2418:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	clear_top_right_bar();
    241c:	31 d9       	rcall	.-3486   	; 0x1680 <clear_top_left_bar>
    241e:	4a d9       	rcall	.-3436   	; 0x16b4 <clear_top_right_bar>
	}
    2420:	00 00       	nop
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	08 95       	ret

0000242c <__vector_20>:
    242c:	1f 92       	push	r1
    242e:	0f 92       	push	r0
    2430:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2434:	0f 92       	push	r0
    2436:	11 24       	eor	r1, r1
    2438:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    243c:	0f 92       	push	r0
    243e:	2f 93       	push	r18
    2440:	3f 93       	push	r19
    2442:	8f 93       	push	r24
    2444:	9f 93       	push	r25
    2446:	ef 93       	push	r30
    2448:	ff 93       	push	r31
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <spi_state>
    2456:	88 2f       	mov	r24, r24
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	82 30       	cpi	r24, 0x02	; 2
    245c:	91 05       	cpc	r25, r1
    245e:	81 f0       	breq	.+32     	; 0x2480 <__vector_20+0x54>
    2460:	83 30       	cpi	r24, 0x03	; 3
    2462:	91 05       	cpc	r25, r1
    2464:	b9 f0       	breq	.+46     	; 0x2494 <__vector_20+0x68>
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	09 f0       	breq	.+2      	; 0x246c <__vector_20+0x40>
    246a:	29 c0       	rjmp	.+82     	; 0x24be <__vector_20+0x92>
    246c:	8e e4       	ldi	r24, 0x4E	; 78
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <current_msg+0x2>
    2474:	fc 01       	movw	r30, r24
    2476:	20 83       	st	Z, r18
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    247e:	1f c0       	rjmp	.+62     	; 0x24be <__vector_20+0x92>
    2480:	8e e4       	ldi	r24, 0x4E	; 78
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <current_msg+0x3>
    2488:	fc 01       	movw	r30, r24
    248a:	20 83       	st	Z, r18
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    2492:	15 c0       	rjmp	.+42     	; 0x24be <__vector_20+0x92>
    2494:	85 e2       	ldi	r24, 0x25	; 37
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	25 e2       	ldi	r18, 0x25	; 37
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	f9 01       	movw	r30, r18
    249e:	20 81       	ld	r18, Z
    24a0:	20 68       	ori	r18, 0x80	; 128
    24a2:	fc 01       	movw	r30, r24
    24a4:	20 83       	st	Z, r18
    24a6:	82 e2       	ldi	r24, 0x22	; 34
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	22 e2       	ldi	r18, 0x22	; 34
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	f9 01       	movw	r30, r18
    24b0:	20 81       	ld	r18, Z
    24b2:	28 60       	ori	r18, 0x08	; 8
    24b4:	fc 01       	movw	r30, r24
    24b6:	20 83       	st	Z, r18
    24b8:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <spi_state>
    24bc:	00 00       	nop
    24be:	00 00       	nop
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	ff 91       	pop	r31
    24c6:	ef 91       	pop	r30
    24c8:	9f 91       	pop	r25
    24ca:	8f 91       	pop	r24
    24cc:	3f 91       	pop	r19
    24ce:	2f 91       	pop	r18
    24d0:	0f 90       	pop	r0
    24d2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    24d6:	0f 90       	pop	r0
    24d8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    24dc:	0f 90       	pop	r0
    24de:	1f 90       	pop	r1
    24e0:	18 95       	reti

000024e2 <port_config>:
extern volatile unsigned long sys_time;
uint8_t update_data = 0;
uint8_t draw_data = 0;

void port_config(void)
{
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
	//PA2 --> IMD_LED
	//PA3 --> Chip_Select_RGB_Left
	//(PA4 - PA7) --> Top Bar
	DDRA |= (1<<PA2) | (1<<PA3) | (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
    24ea:	81 e2       	ldi	r24, 0x21	; 33
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	21 e2       	ldi	r18, 0x21	; 33
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	f9 01       	movw	r30, r18
    24f4:	20 81       	ld	r18, Z
    24f6:	2c 6f       	ori	r18, 0xFC	; 252
    24f8:	fc 01       	movw	r30, r24
    24fa:	20 83       	st	Z, r18
	
	//Button Inputs
	DDRA &= ~(1<<PA0) & ~(1<<PA1);
    24fc:	81 e2       	ldi	r24, 0x21	; 33
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	21 e2       	ldi	r18, 0x21	; 33
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	f9 01       	movw	r30, r18
    2506:	20 81       	ld	r18, Z
    2508:	2c 7f       	andi	r18, 0xFC	; 252
    250a:	fc 01       	movw	r30, r24
    250c:	20 83       	st	Z, r18
	//PB2 --> MOSI
	//PB4 --> Display_Enable
	//PB5 --> Display_R/W
	//PB6 --> Display_RS
	//PB7 --> Chip_Select_RGB_Right
	DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
    250e:	84 e2       	ldi	r24, 0x24	; 36
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	24 e2       	ldi	r18, 0x24	; 36
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	f9 01       	movw	r30, r18
    2518:	20 81       	ld	r18, Z
    251a:	26 6f       	ori	r18, 0xF6	; 246
    251c:	fc 01       	movw	r30, r24
    251e:	20 83       	st	Z, r18
	
	//PB3 --> MISO
	DDRB &= ~(1<<PB3);
    2520:	84 e2       	ldi	r24, 0x24	; 36
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	24 e2       	ldi	r18, 0x24	; 36
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	f9 01       	movw	r30, r18
    252a:	20 81       	ld	r18, Z
    252c:	27 7f       	andi	r18, 0xF7	; 247
    252e:	fc 01       	movw	r30, r24
    2530:	20 83       	st	Z, r18
	
	//Top Bar
	DDRC = 0xFF;
    2532:	87 e2       	ldi	r24, 0x27	; 39
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	2f ef       	ldi	r18, 0xFF	; 255
    2538:	fc 01       	movw	r30, r24
    253a:	20 83       	st	Z, r18
	
	//Bottom Bar
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3) | (1<<PD4) | (1<<PD7);
    253c:	8a e2       	ldi	r24, 0x2A	; 42
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	2a e2       	ldi	r18, 0x2A	; 42
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	f9 01       	movw	r30, r18
    2546:	20 81       	ld	r18, Z
    2548:	2f 69       	ori	r18, 0x9F	; 159
    254a:	fc 01       	movw	r30, r24
    254c:	20 83       	st	Z, r18
	
	//Display-Bus Bar
	DDRE = 0xFF;
    254e:	8d e2       	ldi	r24, 0x2D	; 45
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	2f ef       	ldi	r18, 0xFF	; 255
    2554:	fc 01       	movw	r30, r24
    2556:	20 83       	st	Z, r18
	
	//SDCI Inputs:
	//PF1 --> SDB_DB
	//PF2 --> Inertia
	//PF3 --> BOTS
	DDRF &= ~(1<<PF1) & ~(1<<PF2) & ~(1<<PF3);
    2558:	80 e3       	ldi	r24, 0x30	; 48
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	20 e3       	ldi	r18, 0x30	; 48
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	f9 01       	movw	r30, r18
    2562:	20 81       	ld	r18, Z
    2564:	21 7f       	andi	r18, 0xF1	; 241
    2566:	fc 01       	movw	r30, r24
    2568:	20 83       	st	Z, r18
	
	//(PG0 - PG2) --> Top Bar
	//PG3 --> Heart
	//PG4 --> Fault
	DDRG |= (1<<PG0) | (1<<PG1) | (1<<PG2) | (1<<PG3) | (1<<PG4);
    256a:	83 e3       	ldi	r24, 0x33	; 51
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	23 e3       	ldi	r18, 0x33	; 51
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	f9 01       	movw	r30, r18
    2574:	20 81       	ld	r18, Z
    2576:	2f 61       	ori	r18, 0x1F	; 31
    2578:	fc 01       	movw	r30, r24
    257a:	20 83       	st	Z, r18
	
	//Resetting all PORTS
	PORTA = 0;
    257c:	82 e2       	ldi	r24, 0x22	; 34
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	fc 01       	movw	r30, r24
    2582:	10 82       	st	Z, r1
	//Resetting Display-Control-Ports
	PORTB = 0;
    2584:	85 e2       	ldi	r24, 0x25	; 37
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	fc 01       	movw	r30, r24
    258a:	10 82       	st	Z, r1
	PORTC = 0;
    258c:	88 e2       	ldi	r24, 0x28	; 40
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	fc 01       	movw	r30, r24
    2592:	10 82       	st	Z, r1
	PORTD = 0;
    2594:	8b e2       	ldi	r24, 0x2B	; 43
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	fc 01       	movw	r30, r24
    259a:	10 82       	st	Z, r1
	//Resetting Display-Bus Bar
	PORTE = 0;
    259c:	8e e2       	ldi	r24, 0x2E	; 46
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	fc 01       	movw	r30, r24
    25a2:	10 82       	st	Z, r1
	PORTF = 0;
    25a4:	81 e3       	ldi	r24, 0x31	; 49
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	fc 01       	movw	r30, r24
    25aa:	10 82       	st	Z, r1
	PORTG = 0;
    25ac:	84 e3       	ldi	r24, 0x34	; 52
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	fc 01       	movw	r30, r24
    25b2:	10 82       	st	Z, r1
	
	//Selecting Pull-Up Resistors for Button - Inputs
	PORTA |= (1<<PA0) | (1<<PA1);
    25b4:	82 e2       	ldi	r24, 0x22	; 34
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	22 e2       	ldi	r18, 0x22	; 34
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	f9 01       	movw	r30, r18
    25be:	20 81       	ld	r18, Z
    25c0:	23 60       	ori	r18, 0x03	; 3
    25c2:	fc 01       	movw	r30, r24
    25c4:	20 83       	st	Z, r18
}
    25c6:	00 00       	nop
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	08 95       	ret

000025ce <sys_timer_config>:

void sys_timer_config(void)
{
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
	//8 bit Timer 0 configuration
	//Mode --> CTC, Divider --> /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
    25d6:	84 e4       	ldi	r24, 0x44	; 68
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	2b e0       	ldi	r18, 0x0B	; 11
    25dc:	fc 01       	movw	r30, r24
    25de:	20 83       	st	Z, r18
	//compare interrupt enable
	TIMSK0 = 0 | (1<<OCIE0A);
    25e0:	8e e6       	ldi	r24, 0x6E	; 110
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	22 e0       	ldi	r18, 0x02	; 2
    25e6:	fc 01       	movw	r30, r24
    25e8:	20 83       	st	Z, r18
	//compare value for 1ms;
	OCR0A = 250-1;
    25ea:	87 e4       	ldi	r24, 0x47	; 71
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	29 ef       	ldi	r18, 0xF9	; 249
    25f0:	fc 01       	movw	r30, r24
    25f2:	20 83       	st	Z, r18
}
    25f4:	00 00       	nop
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <__vector_16>:

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
    25fc:	1f 92       	push	r1
    25fe:	0f 92       	push	r0
    2600:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2604:	0f 92       	push	r0
    2606:	11 24       	eor	r1, r1
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	af 93       	push	r26
    260e:	bf 93       	push	r27
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	draw_data = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <draw_data>
	update_data++;
    261e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
    2622:	8f 5f       	subi	r24, 0xFF	; 255
    2624:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <update_data>
	sys_time++;
    2628:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    262c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    2630:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2634:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	a1 1d       	adc	r26, r1
    263c:	b1 1d       	adc	r27, r1
    263e:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <sys_time>
    2642:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <sys_time+0x1>
    2646:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <sys_time+0x2>
    264a:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <sys_time+0x3>
	
}
    264e:	00 00       	nop
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	bf 91       	pop	r27
    2656:	af 91       	pop	r26
    2658:	9f 91       	pop	r25
    265a:	8f 91       	pop	r24
    265c:	0f 90       	pop	r0
    265e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2662:	0f 90       	pop	r0
    2664:	1f 90       	pop	r1
    2666:	18 95       	reti

00002668 <__divsf3>:
    2668:	0c d0       	rcall	.+24     	; 0x2682 <__divsf3x>
    266a:	e6 c0       	rjmp	.+460    	; 0x2838 <__fp_round>
    266c:	de d0       	rcall	.+444    	; 0x282a <__fp_pscB>
    266e:	40 f0       	brcs	.+16     	; 0x2680 <__divsf3+0x18>
    2670:	d5 d0       	rcall	.+426    	; 0x281c <__fp_pscA>
    2672:	30 f0       	brcs	.+12     	; 0x2680 <__divsf3+0x18>
    2674:	21 f4       	brne	.+8      	; 0x267e <__divsf3+0x16>
    2676:	5f 3f       	cpi	r21, 0xFF	; 255
    2678:	19 f0       	breq	.+6      	; 0x2680 <__divsf3+0x18>
    267a:	c7 c0       	rjmp	.+398    	; 0x280a <__fp_inf>
    267c:	51 11       	cpse	r21, r1
    267e:	10 c1       	rjmp	.+544    	; 0x28a0 <__fp_szero>
    2680:	ca c0       	rjmp	.+404    	; 0x2816 <__fp_nan>

00002682 <__divsf3x>:
    2682:	eb d0       	rcall	.+470    	; 0x285a <__fp_split3>
    2684:	98 f3       	brcs	.-26     	; 0x266c <__divsf3+0x4>

00002686 <__divsf3_pse>:
    2686:	99 23       	and	r25, r25
    2688:	c9 f3       	breq	.-14     	; 0x267c <__divsf3+0x14>
    268a:	55 23       	and	r21, r21
    268c:	b1 f3       	breq	.-20     	; 0x267a <__divsf3+0x12>
    268e:	95 1b       	sub	r25, r21
    2690:	55 0b       	sbc	r21, r21
    2692:	bb 27       	eor	r27, r27
    2694:	aa 27       	eor	r26, r26
    2696:	62 17       	cp	r22, r18
    2698:	73 07       	cpc	r23, r19
    269a:	84 07       	cpc	r24, r20
    269c:	38 f0       	brcs	.+14     	; 0x26ac <__divsf3_pse+0x26>
    269e:	9f 5f       	subi	r25, 0xFF	; 255
    26a0:	5f 4f       	sbci	r21, 0xFF	; 255
    26a2:	22 0f       	add	r18, r18
    26a4:	33 1f       	adc	r19, r19
    26a6:	44 1f       	adc	r20, r20
    26a8:	aa 1f       	adc	r26, r26
    26aa:	a9 f3       	breq	.-22     	; 0x2696 <__divsf3_pse+0x10>
    26ac:	33 d0       	rcall	.+102    	; 0x2714 <__divsf3_pse+0x8e>
    26ae:	0e 2e       	mov	r0, r30
    26b0:	3a f0       	brmi	.+14     	; 0x26c0 <__divsf3_pse+0x3a>
    26b2:	e0 e8       	ldi	r30, 0x80	; 128
    26b4:	30 d0       	rcall	.+96     	; 0x2716 <__divsf3_pse+0x90>
    26b6:	91 50       	subi	r25, 0x01	; 1
    26b8:	50 40       	sbci	r21, 0x00	; 0
    26ba:	e6 95       	lsr	r30
    26bc:	00 1c       	adc	r0, r0
    26be:	ca f7       	brpl	.-14     	; 0x26b2 <__divsf3_pse+0x2c>
    26c0:	29 d0       	rcall	.+82     	; 0x2714 <__divsf3_pse+0x8e>
    26c2:	fe 2f       	mov	r31, r30
    26c4:	27 d0       	rcall	.+78     	; 0x2714 <__divsf3_pse+0x8e>
    26c6:	66 0f       	add	r22, r22
    26c8:	77 1f       	adc	r23, r23
    26ca:	88 1f       	adc	r24, r24
    26cc:	bb 1f       	adc	r27, r27
    26ce:	26 17       	cp	r18, r22
    26d0:	37 07       	cpc	r19, r23
    26d2:	48 07       	cpc	r20, r24
    26d4:	ab 07       	cpc	r26, r27
    26d6:	b0 e8       	ldi	r27, 0x80	; 128
    26d8:	09 f0       	breq	.+2      	; 0x26dc <__divsf3_pse+0x56>
    26da:	bb 0b       	sbc	r27, r27
    26dc:	80 2d       	mov	r24, r0
    26de:	bf 01       	movw	r22, r30
    26e0:	ff 27       	eor	r31, r31
    26e2:	93 58       	subi	r25, 0x83	; 131
    26e4:	5f 4f       	sbci	r21, 0xFF	; 255
    26e6:	2a f0       	brmi	.+10     	; 0x26f2 <__divsf3_pse+0x6c>
    26e8:	9e 3f       	cpi	r25, 0xFE	; 254
    26ea:	51 05       	cpc	r21, r1
    26ec:	68 f0       	brcs	.+26     	; 0x2708 <__divsf3_pse+0x82>
    26ee:	8d c0       	rjmp	.+282    	; 0x280a <__fp_inf>
    26f0:	d7 c0       	rjmp	.+430    	; 0x28a0 <__fp_szero>
    26f2:	5f 3f       	cpi	r21, 0xFF	; 255
    26f4:	ec f3       	brlt	.-6      	; 0x26f0 <__divsf3_pse+0x6a>
    26f6:	98 3e       	cpi	r25, 0xE8	; 232
    26f8:	dc f3       	brlt	.-10     	; 0x26f0 <__divsf3_pse+0x6a>
    26fa:	86 95       	lsr	r24
    26fc:	77 95       	ror	r23
    26fe:	67 95       	ror	r22
    2700:	b7 95       	ror	r27
    2702:	f7 95       	ror	r31
    2704:	9f 5f       	subi	r25, 0xFF	; 255
    2706:	c9 f7       	brne	.-14     	; 0x26fa <__divsf3_pse+0x74>
    2708:	88 0f       	add	r24, r24
    270a:	91 1d       	adc	r25, r1
    270c:	96 95       	lsr	r25
    270e:	87 95       	ror	r24
    2710:	97 f9       	bld	r25, 7
    2712:	08 95       	ret
    2714:	e1 e0       	ldi	r30, 0x01	; 1
    2716:	66 0f       	add	r22, r22
    2718:	77 1f       	adc	r23, r23
    271a:	88 1f       	adc	r24, r24
    271c:	bb 1f       	adc	r27, r27
    271e:	62 17       	cp	r22, r18
    2720:	73 07       	cpc	r23, r19
    2722:	84 07       	cpc	r24, r20
    2724:	ba 07       	cpc	r27, r26
    2726:	20 f0       	brcs	.+8      	; 0x2730 <__divsf3_pse+0xaa>
    2728:	62 1b       	sub	r22, r18
    272a:	73 0b       	sbc	r23, r19
    272c:	84 0b       	sbc	r24, r20
    272e:	ba 0b       	sbc	r27, r26
    2730:	ee 1f       	adc	r30, r30
    2732:	88 f7       	brcc	.-30     	; 0x2716 <__divsf3_pse+0x90>
    2734:	e0 95       	com	r30
    2736:	08 95       	ret

00002738 <__fixunssfsi>:
    2738:	98 d0       	rcall	.+304    	; 0x286a <__fp_splitA>
    273a:	88 f0       	brcs	.+34     	; 0x275e <__fixunssfsi+0x26>
    273c:	9f 57       	subi	r25, 0x7F	; 127
    273e:	90 f0       	brcs	.+36     	; 0x2764 <__fixunssfsi+0x2c>
    2740:	b9 2f       	mov	r27, r25
    2742:	99 27       	eor	r25, r25
    2744:	b7 51       	subi	r27, 0x17	; 23
    2746:	a0 f0       	brcs	.+40     	; 0x2770 <__fixunssfsi+0x38>
    2748:	d1 f0       	breq	.+52     	; 0x277e <__fixunssfsi+0x46>
    274a:	66 0f       	add	r22, r22
    274c:	77 1f       	adc	r23, r23
    274e:	88 1f       	adc	r24, r24
    2750:	99 1f       	adc	r25, r25
    2752:	1a f0       	brmi	.+6      	; 0x275a <__fixunssfsi+0x22>
    2754:	ba 95       	dec	r27
    2756:	c9 f7       	brne	.-14     	; 0x274a <__fixunssfsi+0x12>
    2758:	12 c0       	rjmp	.+36     	; 0x277e <__fixunssfsi+0x46>
    275a:	b1 30       	cpi	r27, 0x01	; 1
    275c:	81 f0       	breq	.+32     	; 0x277e <__fixunssfsi+0x46>
    275e:	9f d0       	rcall	.+318    	; 0x289e <__fp_zero>
    2760:	b1 e0       	ldi	r27, 0x01	; 1
    2762:	08 95       	ret
    2764:	9c c0       	rjmp	.+312    	; 0x289e <__fp_zero>
    2766:	67 2f       	mov	r22, r23
    2768:	78 2f       	mov	r23, r24
    276a:	88 27       	eor	r24, r24
    276c:	b8 5f       	subi	r27, 0xF8	; 248
    276e:	39 f0       	breq	.+14     	; 0x277e <__fixunssfsi+0x46>
    2770:	b9 3f       	cpi	r27, 0xF9	; 249
    2772:	cc f3       	brlt	.-14     	; 0x2766 <__fixunssfsi+0x2e>
    2774:	86 95       	lsr	r24
    2776:	77 95       	ror	r23
    2778:	67 95       	ror	r22
    277a:	b3 95       	inc	r27
    277c:	d9 f7       	brne	.-10     	; 0x2774 <__fixunssfsi+0x3c>
    277e:	3e f4       	brtc	.+14     	; 0x278e <__fixunssfsi+0x56>
    2780:	90 95       	com	r25
    2782:	80 95       	com	r24
    2784:	70 95       	com	r23
    2786:	61 95       	neg	r22
    2788:	7f 4f       	sbci	r23, 0xFF	; 255
    278a:	8f 4f       	sbci	r24, 0xFF	; 255
    278c:	9f 4f       	sbci	r25, 0xFF	; 255
    278e:	08 95       	ret

00002790 <__floatunsisf>:
    2790:	e8 94       	clt
    2792:	09 c0       	rjmp	.+18     	; 0x27a6 <__floatsisf+0x12>

00002794 <__floatsisf>:
    2794:	97 fb       	bst	r25, 7
    2796:	3e f4       	brtc	.+14     	; 0x27a6 <__floatsisf+0x12>
    2798:	90 95       	com	r25
    279a:	80 95       	com	r24
    279c:	70 95       	com	r23
    279e:	61 95       	neg	r22
    27a0:	7f 4f       	sbci	r23, 0xFF	; 255
    27a2:	8f 4f       	sbci	r24, 0xFF	; 255
    27a4:	9f 4f       	sbci	r25, 0xFF	; 255
    27a6:	99 23       	and	r25, r25
    27a8:	a9 f0       	breq	.+42     	; 0x27d4 <__floatsisf+0x40>
    27aa:	f9 2f       	mov	r31, r25
    27ac:	96 e9       	ldi	r25, 0x96	; 150
    27ae:	bb 27       	eor	r27, r27
    27b0:	93 95       	inc	r25
    27b2:	f6 95       	lsr	r31
    27b4:	87 95       	ror	r24
    27b6:	77 95       	ror	r23
    27b8:	67 95       	ror	r22
    27ba:	b7 95       	ror	r27
    27bc:	f1 11       	cpse	r31, r1
    27be:	f8 cf       	rjmp	.-16     	; 0x27b0 <__floatsisf+0x1c>
    27c0:	fa f4       	brpl	.+62     	; 0x2800 <__floatsisf+0x6c>
    27c2:	bb 0f       	add	r27, r27
    27c4:	11 f4       	brne	.+4      	; 0x27ca <__floatsisf+0x36>
    27c6:	60 ff       	sbrs	r22, 0
    27c8:	1b c0       	rjmp	.+54     	; 0x2800 <__floatsisf+0x6c>
    27ca:	6f 5f       	subi	r22, 0xFF	; 255
    27cc:	7f 4f       	sbci	r23, 0xFF	; 255
    27ce:	8f 4f       	sbci	r24, 0xFF	; 255
    27d0:	9f 4f       	sbci	r25, 0xFF	; 255
    27d2:	16 c0       	rjmp	.+44     	; 0x2800 <__floatsisf+0x6c>
    27d4:	88 23       	and	r24, r24
    27d6:	11 f0       	breq	.+4      	; 0x27dc <__floatsisf+0x48>
    27d8:	96 e9       	ldi	r25, 0x96	; 150
    27da:	11 c0       	rjmp	.+34     	; 0x27fe <__floatsisf+0x6a>
    27dc:	77 23       	and	r23, r23
    27de:	21 f0       	breq	.+8      	; 0x27e8 <__floatsisf+0x54>
    27e0:	9e e8       	ldi	r25, 0x8E	; 142
    27e2:	87 2f       	mov	r24, r23
    27e4:	76 2f       	mov	r23, r22
    27e6:	05 c0       	rjmp	.+10     	; 0x27f2 <__floatsisf+0x5e>
    27e8:	66 23       	and	r22, r22
    27ea:	71 f0       	breq	.+28     	; 0x2808 <__floatsisf+0x74>
    27ec:	96 e8       	ldi	r25, 0x86	; 134
    27ee:	86 2f       	mov	r24, r22
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	2a f0       	brmi	.+10     	; 0x2800 <__floatsisf+0x6c>
    27f6:	9a 95       	dec	r25
    27f8:	66 0f       	add	r22, r22
    27fa:	77 1f       	adc	r23, r23
    27fc:	88 1f       	adc	r24, r24
    27fe:	da f7       	brpl	.-10     	; 0x27f6 <__floatsisf+0x62>
    2800:	88 0f       	add	r24, r24
    2802:	96 95       	lsr	r25
    2804:	87 95       	ror	r24
    2806:	97 f9       	bld	r25, 7
    2808:	08 95       	ret

0000280a <__fp_inf>:
    280a:	97 f9       	bld	r25, 7
    280c:	9f 67       	ori	r25, 0x7F	; 127
    280e:	80 e8       	ldi	r24, 0x80	; 128
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	08 95       	ret

00002816 <__fp_nan>:
    2816:	9f ef       	ldi	r25, 0xFF	; 255
    2818:	80 ec       	ldi	r24, 0xC0	; 192
    281a:	08 95       	ret

0000281c <__fp_pscA>:
    281c:	00 24       	eor	r0, r0
    281e:	0a 94       	dec	r0
    2820:	16 16       	cp	r1, r22
    2822:	17 06       	cpc	r1, r23
    2824:	18 06       	cpc	r1, r24
    2826:	09 06       	cpc	r0, r25
    2828:	08 95       	ret

0000282a <__fp_pscB>:
    282a:	00 24       	eor	r0, r0
    282c:	0a 94       	dec	r0
    282e:	12 16       	cp	r1, r18
    2830:	13 06       	cpc	r1, r19
    2832:	14 06       	cpc	r1, r20
    2834:	05 06       	cpc	r0, r21
    2836:	08 95       	ret

00002838 <__fp_round>:
    2838:	09 2e       	mov	r0, r25
    283a:	03 94       	inc	r0
    283c:	00 0c       	add	r0, r0
    283e:	11 f4       	brne	.+4      	; 0x2844 <__fp_round+0xc>
    2840:	88 23       	and	r24, r24
    2842:	52 f0       	brmi	.+20     	; 0x2858 <__fp_round+0x20>
    2844:	bb 0f       	add	r27, r27
    2846:	40 f4       	brcc	.+16     	; 0x2858 <__fp_round+0x20>
    2848:	bf 2b       	or	r27, r31
    284a:	11 f4       	brne	.+4      	; 0x2850 <__fp_round+0x18>
    284c:	60 ff       	sbrs	r22, 0
    284e:	04 c0       	rjmp	.+8      	; 0x2858 <__fp_round+0x20>
    2850:	6f 5f       	subi	r22, 0xFF	; 255
    2852:	7f 4f       	sbci	r23, 0xFF	; 255
    2854:	8f 4f       	sbci	r24, 0xFF	; 255
    2856:	9f 4f       	sbci	r25, 0xFF	; 255
    2858:	08 95       	ret

0000285a <__fp_split3>:
    285a:	57 fd       	sbrc	r21, 7
    285c:	90 58       	subi	r25, 0x80	; 128
    285e:	44 0f       	add	r20, r20
    2860:	55 1f       	adc	r21, r21
    2862:	59 f0       	breq	.+22     	; 0x287a <__fp_splitA+0x10>
    2864:	5f 3f       	cpi	r21, 0xFF	; 255
    2866:	71 f0       	breq	.+28     	; 0x2884 <__fp_splitA+0x1a>
    2868:	47 95       	ror	r20

0000286a <__fp_splitA>:
    286a:	88 0f       	add	r24, r24
    286c:	97 fb       	bst	r25, 7
    286e:	99 1f       	adc	r25, r25
    2870:	61 f0       	breq	.+24     	; 0x288a <__fp_splitA+0x20>
    2872:	9f 3f       	cpi	r25, 0xFF	; 255
    2874:	79 f0       	breq	.+30     	; 0x2894 <__fp_splitA+0x2a>
    2876:	87 95       	ror	r24
    2878:	08 95       	ret
    287a:	12 16       	cp	r1, r18
    287c:	13 06       	cpc	r1, r19
    287e:	14 06       	cpc	r1, r20
    2880:	55 1f       	adc	r21, r21
    2882:	f2 cf       	rjmp	.-28     	; 0x2868 <__fp_split3+0xe>
    2884:	46 95       	lsr	r20
    2886:	f1 df       	rcall	.-30     	; 0x286a <__fp_splitA>
    2888:	08 c0       	rjmp	.+16     	; 0x289a <__fp_splitA+0x30>
    288a:	16 16       	cp	r1, r22
    288c:	17 06       	cpc	r1, r23
    288e:	18 06       	cpc	r1, r24
    2890:	99 1f       	adc	r25, r25
    2892:	f1 cf       	rjmp	.-30     	; 0x2876 <__fp_splitA+0xc>
    2894:	86 95       	lsr	r24
    2896:	71 05       	cpc	r23, r1
    2898:	61 05       	cpc	r22, r1
    289a:	08 94       	sec
    289c:	08 95       	ret

0000289e <__fp_zero>:
    289e:	e8 94       	clt

000028a0 <__fp_szero>:
    28a0:	bb 27       	eor	r27, r27
    28a2:	66 27       	eor	r22, r22
    28a4:	77 27       	eor	r23, r23
    28a6:	cb 01       	movw	r24, r22
    28a8:	97 f9       	bld	r25, 7
    28aa:	08 95       	ret

000028ac <__mulsf3>:
    28ac:	0b d0       	rcall	.+22     	; 0x28c4 <__mulsf3x>
    28ae:	c4 cf       	rjmp	.-120    	; 0x2838 <__fp_round>
    28b0:	b5 df       	rcall	.-150    	; 0x281c <__fp_pscA>
    28b2:	28 f0       	brcs	.+10     	; 0x28be <__mulsf3+0x12>
    28b4:	ba df       	rcall	.-140    	; 0x282a <__fp_pscB>
    28b6:	18 f0       	brcs	.+6      	; 0x28be <__mulsf3+0x12>
    28b8:	95 23       	and	r25, r21
    28ba:	09 f0       	breq	.+2      	; 0x28be <__mulsf3+0x12>
    28bc:	a6 cf       	rjmp	.-180    	; 0x280a <__fp_inf>
    28be:	ab cf       	rjmp	.-170    	; 0x2816 <__fp_nan>
    28c0:	11 24       	eor	r1, r1
    28c2:	ee cf       	rjmp	.-36     	; 0x28a0 <__fp_szero>

000028c4 <__mulsf3x>:
    28c4:	ca df       	rcall	.-108    	; 0x285a <__fp_split3>
    28c6:	a0 f3       	brcs	.-24     	; 0x28b0 <__mulsf3+0x4>

000028c8 <__mulsf3_pse>:
    28c8:	95 9f       	mul	r25, r21
    28ca:	d1 f3       	breq	.-12     	; 0x28c0 <__mulsf3+0x14>
    28cc:	95 0f       	add	r25, r21
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	55 1f       	adc	r21, r21
    28d2:	62 9f       	mul	r22, r18
    28d4:	f0 01       	movw	r30, r0
    28d6:	72 9f       	mul	r23, r18
    28d8:	bb 27       	eor	r27, r27
    28da:	f0 0d       	add	r31, r0
    28dc:	b1 1d       	adc	r27, r1
    28de:	63 9f       	mul	r22, r19
    28e0:	aa 27       	eor	r26, r26
    28e2:	f0 0d       	add	r31, r0
    28e4:	b1 1d       	adc	r27, r1
    28e6:	aa 1f       	adc	r26, r26
    28e8:	64 9f       	mul	r22, r20
    28ea:	66 27       	eor	r22, r22
    28ec:	b0 0d       	add	r27, r0
    28ee:	a1 1d       	adc	r26, r1
    28f0:	66 1f       	adc	r22, r22
    28f2:	82 9f       	mul	r24, r18
    28f4:	22 27       	eor	r18, r18
    28f6:	b0 0d       	add	r27, r0
    28f8:	a1 1d       	adc	r26, r1
    28fa:	62 1f       	adc	r22, r18
    28fc:	73 9f       	mul	r23, r19
    28fe:	b0 0d       	add	r27, r0
    2900:	a1 1d       	adc	r26, r1
    2902:	62 1f       	adc	r22, r18
    2904:	83 9f       	mul	r24, r19
    2906:	a0 0d       	add	r26, r0
    2908:	61 1d       	adc	r22, r1
    290a:	22 1f       	adc	r18, r18
    290c:	74 9f       	mul	r23, r20
    290e:	33 27       	eor	r19, r19
    2910:	a0 0d       	add	r26, r0
    2912:	61 1d       	adc	r22, r1
    2914:	23 1f       	adc	r18, r19
    2916:	84 9f       	mul	r24, r20
    2918:	60 0d       	add	r22, r0
    291a:	21 1d       	adc	r18, r1
    291c:	82 2f       	mov	r24, r18
    291e:	76 2f       	mov	r23, r22
    2920:	6a 2f       	mov	r22, r26
    2922:	11 24       	eor	r1, r1
    2924:	9f 57       	subi	r25, 0x7F	; 127
    2926:	50 40       	sbci	r21, 0x00	; 0
    2928:	8a f0       	brmi	.+34     	; 0x294c <__mulsf3_pse+0x84>
    292a:	e1 f0       	breq	.+56     	; 0x2964 <__mulsf3_pse+0x9c>
    292c:	88 23       	and	r24, r24
    292e:	4a f0       	brmi	.+18     	; 0x2942 <__mulsf3_pse+0x7a>
    2930:	ee 0f       	add	r30, r30
    2932:	ff 1f       	adc	r31, r31
    2934:	bb 1f       	adc	r27, r27
    2936:	66 1f       	adc	r22, r22
    2938:	77 1f       	adc	r23, r23
    293a:	88 1f       	adc	r24, r24
    293c:	91 50       	subi	r25, 0x01	; 1
    293e:	50 40       	sbci	r21, 0x00	; 0
    2940:	a9 f7       	brne	.-22     	; 0x292c <__mulsf3_pse+0x64>
    2942:	9e 3f       	cpi	r25, 0xFE	; 254
    2944:	51 05       	cpc	r21, r1
    2946:	70 f0       	brcs	.+28     	; 0x2964 <__mulsf3_pse+0x9c>
    2948:	60 cf       	rjmp	.-320    	; 0x280a <__fp_inf>
    294a:	aa cf       	rjmp	.-172    	; 0x28a0 <__fp_szero>
    294c:	5f 3f       	cpi	r21, 0xFF	; 255
    294e:	ec f3       	brlt	.-6      	; 0x294a <__mulsf3_pse+0x82>
    2950:	98 3e       	cpi	r25, 0xE8	; 232
    2952:	dc f3       	brlt	.-10     	; 0x294a <__mulsf3_pse+0x82>
    2954:	86 95       	lsr	r24
    2956:	77 95       	ror	r23
    2958:	67 95       	ror	r22
    295a:	b7 95       	ror	r27
    295c:	f7 95       	ror	r31
    295e:	e7 95       	ror	r30
    2960:	9f 5f       	subi	r25, 0xFF	; 255
    2962:	c1 f7       	brne	.-16     	; 0x2954 <__mulsf3_pse+0x8c>
    2964:	fe 2b       	or	r31, r30
    2966:	88 0f       	add	r24, r24
    2968:	91 1d       	adc	r25, r1
    296a:	96 95       	lsr	r25
    296c:	87 95       	ror	r24
    296e:	97 f9       	bld	r25, 7
    2970:	08 95       	ret

00002972 <__udivmodhi4>:
    2972:	aa 1b       	sub	r26, r26
    2974:	bb 1b       	sub	r27, r27
    2976:	51 e1       	ldi	r21, 0x11	; 17
    2978:	07 c0       	rjmp	.+14     	; 0x2988 <__udivmodhi4_ep>

0000297a <__udivmodhi4_loop>:
    297a:	aa 1f       	adc	r26, r26
    297c:	bb 1f       	adc	r27, r27
    297e:	a6 17       	cp	r26, r22
    2980:	b7 07       	cpc	r27, r23
    2982:	10 f0       	brcs	.+4      	; 0x2988 <__udivmodhi4_ep>
    2984:	a6 1b       	sub	r26, r22
    2986:	b7 0b       	sbc	r27, r23

00002988 <__udivmodhi4_ep>:
    2988:	88 1f       	adc	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	5a 95       	dec	r21
    298e:	a9 f7       	brne	.-22     	; 0x297a <__udivmodhi4_loop>
    2990:	80 95       	com	r24
    2992:	90 95       	com	r25
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	08 95       	ret

0000299a <__divmodhi4>:
    299a:	97 fb       	bst	r25, 7
    299c:	07 2e       	mov	r0, r23
    299e:	16 f4       	brtc	.+4      	; 0x29a4 <__divmodhi4+0xa>
    29a0:	00 94       	com	r0
    29a2:	06 d0       	rcall	.+12     	; 0x29b0 <__divmodhi4_neg1>
    29a4:	77 fd       	sbrc	r23, 7
    29a6:	08 d0       	rcall	.+16     	; 0x29b8 <__divmodhi4_neg2>
    29a8:	e4 df       	rcall	.-56     	; 0x2972 <__udivmodhi4>
    29aa:	07 fc       	sbrc	r0, 7
    29ac:	05 d0       	rcall	.+10     	; 0x29b8 <__divmodhi4_neg2>
    29ae:	3e f4       	brtc	.+14     	; 0x29be <__divmodhi4_exit>

000029b0 <__divmodhi4_neg1>:
    29b0:	90 95       	com	r25
    29b2:	81 95       	neg	r24
    29b4:	9f 4f       	sbci	r25, 0xFF	; 255
    29b6:	08 95       	ret

000029b8 <__divmodhi4_neg2>:
    29b8:	70 95       	com	r23
    29ba:	61 95       	neg	r22
    29bc:	7f 4f       	sbci	r23, 0xFF	; 255

000029be <__divmodhi4_exit>:
    29be:	08 95       	ret

000029c0 <__udivmodsi4>:
    29c0:	a1 e2       	ldi	r26, 0x21	; 33
    29c2:	1a 2e       	mov	r1, r26
    29c4:	aa 1b       	sub	r26, r26
    29c6:	bb 1b       	sub	r27, r27
    29c8:	fd 01       	movw	r30, r26
    29ca:	0d c0       	rjmp	.+26     	; 0x29e6 <__udivmodsi4_ep>

000029cc <__udivmodsi4_loop>:
    29cc:	aa 1f       	adc	r26, r26
    29ce:	bb 1f       	adc	r27, r27
    29d0:	ee 1f       	adc	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	a2 17       	cp	r26, r18
    29d6:	b3 07       	cpc	r27, r19
    29d8:	e4 07       	cpc	r30, r20
    29da:	f5 07       	cpc	r31, r21
    29dc:	20 f0       	brcs	.+8      	; 0x29e6 <__udivmodsi4_ep>
    29de:	a2 1b       	sub	r26, r18
    29e0:	b3 0b       	sbc	r27, r19
    29e2:	e4 0b       	sbc	r30, r20
    29e4:	f5 0b       	sbc	r31, r21

000029e6 <__udivmodsi4_ep>:
    29e6:	66 1f       	adc	r22, r22
    29e8:	77 1f       	adc	r23, r23
    29ea:	88 1f       	adc	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	1a 94       	dec	r1
    29f0:	69 f7       	brne	.-38     	; 0x29cc <__udivmodsi4_loop>
    29f2:	60 95       	com	r22
    29f4:	70 95       	com	r23
    29f6:	80 95       	com	r24
    29f8:	90 95       	com	r25
    29fa:	9b 01       	movw	r18, r22
    29fc:	ac 01       	movw	r20, r24
    29fe:	bd 01       	movw	r22, r26
    2a00:	cf 01       	movw	r24, r30
    2a02:	08 95       	ret

00002a04 <__umulhisi3>:
    2a04:	a2 9f       	mul	r26, r18
    2a06:	b0 01       	movw	r22, r0
    2a08:	b3 9f       	mul	r27, r19
    2a0a:	c0 01       	movw	r24, r0
    2a0c:	a3 9f       	mul	r26, r19
    2a0e:	70 0d       	add	r23, r0
    2a10:	81 1d       	adc	r24, r1
    2a12:	11 24       	eor	r1, r1
    2a14:	91 1d       	adc	r25, r1
    2a16:	b2 9f       	mul	r27, r18
    2a18:	70 0d       	add	r23, r0
    2a1a:	81 1d       	adc	r24, r1
    2a1c:	11 24       	eor	r1, r1
    2a1e:	91 1d       	adc	r25, r1
    2a20:	08 95       	ret

00002a22 <strlen>:
    2a22:	fc 01       	movw	r30, r24
    2a24:	01 90       	ld	r0, Z+
    2a26:	00 20       	and	r0, r0
    2a28:	e9 f7       	brne	.-6      	; 0x2a24 <strlen+0x2>
    2a2a:	80 95       	com	r24
    2a2c:	90 95       	com	r25
    2a2e:	8e 0f       	add	r24, r30
    2a30:	9f 1f       	adc	r25, r31
    2a32:	08 95       	ret

00002a34 <_exit>:
    2a34:	f8 94       	cli

00002a36 <__stop_program>:
    2a36:	ff cf       	rjmp	.-2      	; 0x2a36 <__stop_program>
