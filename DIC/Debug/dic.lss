
dic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006bc  00000750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddb  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b40  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b3  00000000  00000000  00002177  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a5  00000000  00000000  000028ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000336  00000000  00000000  00002f91  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000032c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	d2 c2       	rjmp	.+1444   	; 0x5e6 <__vector_16>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	ec eb       	ldi	r30, 0xBC	; 188
  a8:	f6 e0       	ldi	r31, 0x06	; 6
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a4 30       	cpi	r26, 0x04	; 4
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a4 e0       	ldi	r26, 0x04	; 4
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a4 31       	cpi	r26, 0x14	; 20
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	47 d1       	rcall	.+654    	; 0x35a <main>
  cc:	f5 c2       	rjmp	.+1514   	; 0x6b8 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <clear_top_left_bar>:
};
*/

//This Function turns off the left Top Bar
void clear_top_left_bar(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	PORTA &= ~(1<<PA4) & ~(1<<PA5) & ~(1<<PA6) & ~(1<<PA7);
  d8:	82 e2       	ldi	r24, 0x22	; 34
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	22 e2       	ldi	r18, 0x22	; 34
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	2f 70       	andi	r18, 0x0F	; 15
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	PORTG &= ~(1<<PG2);
  ea:	84 e3       	ldi	r24, 0x34	; 52
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	24 e3       	ldi	r18, 0x34	; 52
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	2b 7f       	andi	r18, 0xFB	; 251
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
}
  fc:	00 00       	nop
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <clear_top_right_bar>:

//This Function turns off the right Top Bar
void clear_top_right_bar(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	PORTC = 0;
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	10 82       	st	Z, r1
	PORTG &= ~(1<<PG0) & ~(1<<PG1);
 114:	84 e3       	ldi	r24, 0x34	; 52
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	24 e3       	ldi	r18, 0x34	; 52
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2c 7f       	andi	r18, 0xFC	; 252
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
}
 126:	00 00       	nop
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <led_top_left_bar>:

//This Function calculates the amount of LEDs of the left Top Bar which needs to be turned on
void led_top_left_bar(uint16_t max_value_l, uint16_t min_value_l, uint16_t current_value_l)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	29 97       	sbiw	r28, 0x09	; 9
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
 142:	9d 83       	std	Y+5, r25	; 0x05
 144:	8c 83       	std	Y+4, r24	; 0x04
 146:	7f 83       	std	Y+7, r23	; 0x07
 148:	6e 83       	std	Y+6, r22	; 0x06
 14a:	59 87       	std	Y+9, r21	; 0x09
 14c:	48 87       	std	Y+8, r20	; 0x08
	clear_top_left_bar();
 14e:	c0 df       	rcall	.-128    	; 0xd0 <clear_top_left_bar>
	uint16_t Top_Left_Bar_Divider = (max_value_l - min_value_l) / (LED_COUNT_TOP_LEFT - 1);
 150:	2c 81       	ldd	r18, Y+4	; 0x04
 152:	3d 81       	ldd	r19, Y+5	; 0x05
 154:	8e 81       	ldd	r24, Y+6	; 0x06
 156:	9f 81       	ldd	r25, Y+7	; 0x07
 158:	a9 01       	movw	r20, r18
 15a:	48 1b       	sub	r20, r24
 15c:	59 0b       	sbc	r21, r25
 15e:	ca 01       	movw	r24, r20
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
	int8_t amount_l = (current_value_l - min_value_l + Top_Left_Bar_Divider) / Top_Left_Bar_Divider;
 16c:	28 85       	ldd	r18, Y+8	; 0x08
 16e:	39 85       	ldd	r19, Y+9	; 0x09
 170:	8e 81       	ldd	r24, Y+6	; 0x06
 172:	9f 81       	ldd	r25, Y+7	; 0x07
 174:	28 1b       	sub	r18, r24
 176:	39 0b       	sbc	r19, r25
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	29 81       	ldd	r18, Y+1	; 0x01
 182:	3a 81       	ldd	r19, Y+2	; 0x02
 184:	b9 01       	movw	r22, r18
 186:	75 d2       	rcall	.+1258   	; 0x672 <__udivmodhi4>
 188:	cb 01       	movw	r24, r22
 18a:	8b 83       	std	Y+3, r24	; 0x03
	if (amount_l > 0) {led_left_top_bar_select(amount_l);}
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	18 16       	cp	r1, r24
 190:	1c f4       	brge	.+6      	; 0x198 <led_top_left_bar+0x6a>
 192:	8b 81       	ldd	r24, Y+3	; 0x03
	else {led_left_top_bar_select(0);}
}
 194:	54 d0       	rcall	.+168    	; 0x23e <led_left_top_bar_select>
{
	clear_top_left_bar();
	uint16_t Top_Left_Bar_Divider = (max_value_l - min_value_l) / (LED_COUNT_TOP_LEFT - 1);
	int8_t amount_l = (current_value_l - min_value_l + Top_Left_Bar_Divider) / Top_Left_Bar_Divider;
	if (amount_l > 0) {led_left_top_bar_select(amount_l);}
	else {led_left_top_bar_select(0);}
 196:	02 c0       	rjmp	.+4      	; 0x19c <led_top_left_bar+0x6e>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	51 d0       	rcall	.+162    	; 0x23e <led_left_top_bar_select>
}
 19c:	00 00       	nop
 19e:	29 96       	adiw	r28, 0x09	; 9
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <led_top_right_bar>:

//This Function calculates the amount of LEDs of the right Top Bar which needs to be turned on
void led_top_right_bar(uint16_t max_value_r, uint16_t min_value_r, uint16_t current_value_r)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	29 97       	sbiw	r28, 0x09	; 9
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	9d 83       	std	Y+5, r25	; 0x05
 1c6:	8c 83       	std	Y+4, r24	; 0x04
 1c8:	7f 83       	std	Y+7, r23	; 0x07
 1ca:	6e 83       	std	Y+6, r22	; 0x06
 1cc:	59 87       	std	Y+9, r21	; 0x09
 1ce:	48 87       	std	Y+8, r20	; 0x08
	clear_top_right_bar();
 1d0:	99 df       	rcall	.-206    	; 0x104 <clear_top_right_bar>
	uint16_t Top_Right_Bar_Divider = (max_value_r - min_value_r) / (LED_COUNT_TOP_RIGHT - 1);
 1d2:	2c 81       	ldd	r18, Y+4	; 0x04
 1d4:	3d 81       	ldd	r19, Y+5	; 0x05
 1d6:	8e 81       	ldd	r24, Y+6	; 0x06
 1d8:	9f 81       	ldd	r25, Y+7	; 0x07
 1da:	a9 01       	movw	r20, r18
 1dc:	48 1b       	sub	r20, r24
 1de:	59 0b       	sbc	r21, r25
 1e0:	ca 01       	movw	r24, r20
 1e2:	9c 01       	movw	r18, r24
 1e4:	af e8       	ldi	r26, 0x8F	; 143
 1e6:	b3 ee       	ldi	r27, 0xE3	; 227
 1e8:	58 d2       	rcall	.+1200   	; 0x69a <__umulhisi3>
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
	int8_t amount_r = (current_value_r - min_value_r + Top_Right_Bar_Divider) / Top_Right_Bar_Divider;
 1fa:	28 85       	ldd	r18, Y+8	; 0x08
 1fc:	39 85       	ldd	r19, Y+9	; 0x09
 1fe:	8e 81       	ldd	r24, Y+6	; 0x06
 200:	9f 81       	ldd	r25, Y+7	; 0x07
 202:	28 1b       	sub	r18, r24
 204:	39 0b       	sbc	r19, r25
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	82 0f       	add	r24, r18
 20c:	93 1f       	adc	r25, r19
 20e:	29 81       	ldd	r18, Y+1	; 0x01
 210:	3a 81       	ldd	r19, Y+2	; 0x02
 212:	b9 01       	movw	r22, r18
 214:	2e d2       	rcall	.+1116   	; 0x672 <__udivmodhi4>
 216:	cb 01       	movw	r24, r22
 218:	8b 83       	std	Y+3, r24	; 0x03
	if (amount_r > 0) {led_right_top_bar_select(amount_r);}
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	18 16       	cp	r1, r24
 21e:	1c f4       	brge	.+6      	; 0x226 <led_top_right_bar+0x76>
 220:	8b 81       	ldd	r24, Y+3	; 0x03
	else {led_right_top_bar_select(0);}
}
 222:	49 d0       	rcall	.+146    	; 0x2b6 <led_right_top_bar_select>
{
	clear_top_right_bar();
	uint16_t Top_Right_Bar_Divider = (max_value_r - min_value_r) / (LED_COUNT_TOP_RIGHT - 1);
	int8_t amount_r = (current_value_r - min_value_r + Top_Right_Bar_Divider) / Top_Right_Bar_Divider;
	if (amount_r > 0) {led_right_top_bar_select(amount_r);}
	else {led_right_top_bar_select(0);}
 224:	02 c0       	rjmp	.+4      	; 0x22a <led_top_right_bar+0x7a>
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	46 d0       	rcall	.+140    	; 0x2b6 <led_right_top_bar_select>
}
 22a:	00 00       	nop
 22c:	29 96       	adiw	r28, 0x09	; 9
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <led_left_top_bar_select>:

//This Function turns on the desired amount of LEDs of the left Top Bar
void led_left_top_bar_select(uint8_t select_l)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	1f 92       	push	r1
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= ~(0xFF << select_l) << PA4;
 24a:	82 e2       	ldi	r24, 0x22	; 34
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	22 e2       	ldi	r18, 0x22	; 34
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	f9 01       	movw	r30, r18
 254:	20 81       	ld	r18, Z
 256:	62 2f       	mov	r22, r18
 258:	29 81       	ldd	r18, Y+1	; 0x01
 25a:	42 2f       	mov	r20, r18
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <led_left_top_bar_select+0x2a>
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	4a 95       	dec	r20
 26a:	e2 f7       	brpl	.-8      	; 0x264 <led_left_top_bar_select+0x26>
 26c:	20 95       	com	r18
 26e:	30 95       	com	r19
 270:	22 95       	swap	r18
 272:	32 95       	swap	r19
 274:	30 7f       	andi	r19, 0xF0	; 240
 276:	32 27       	eor	r19, r18
 278:	20 7f       	andi	r18, 0xF0	; 240
 27a:	32 27       	eor	r19, r18
 27c:	26 2b       	or	r18, r22
 27e:	fc 01       	movw	r30, r24
 280:	20 83       	st	Z, r18
	PORTG |= (1<<PG2) & ((0x80) >> select_l);
 282:	84 e3       	ldi	r24, 0x34	; 52
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	24 e3       	ldi	r18, 0x34	; 52
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	20 81       	ld	r18, Z
 28e:	62 2f       	mov	r22, r18
 290:	29 81       	ldd	r18, Y+1	; 0x01
 292:	42 2f       	mov	r20, r18
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	20 e8       	ldi	r18, 0x80	; 128
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <led_left_top_bar_select+0x62>
 29c:	35 95       	asr	r19
 29e:	27 95       	ror	r18
 2a0:	4a 95       	dec	r20
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <led_left_top_bar_select+0x5e>
 2a4:	24 70       	andi	r18, 0x04	; 4
 2a6:	26 2b       	or	r18, r22
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
}
 2ac:	00 00       	nop
 2ae:	0f 90       	pop	r0
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <led_right_top_bar_select>:

//This Function turns on the desired amount of LEDs of the right Top Bar
void led_right_top_bar_select(uint8_t select_r)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	1f 92       	push	r1
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	89 83       	std	Y+1, r24	; 0x01
	//PORTC |= ~(0xFF >> select_r);
	PORTC |= ~(0xFF >> select_r);
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	28 e2       	ldi	r18, 0x28	; 40
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	f9 01       	movw	r30, r18
 2cc:	20 81       	ld	r18, Z
 2ce:	62 2f       	mov	r22, r18
 2d0:	29 81       	ldd	r18, Y+1	; 0x01
 2d2:	42 2f       	mov	r20, r18
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <led_right_top_bar_select+0x2a>
 2dc:	35 95       	asr	r19
 2de:	27 95       	ror	r18
 2e0:	4a 95       	dec	r20
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <led_right_top_bar_select+0x26>
 2e4:	20 95       	com	r18
 2e6:	26 2b       	or	r18, r22
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
	PORTG |= (~(0xFF << (select_r/9)) << (select_r/9)) + (select_r/10);
 2ec:	84 e3       	ldi	r24, 0x34	; 52
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	24 e3       	ldi	r18, 0x34	; 52
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	20 81       	ld	r18, Z
 2f8:	62 2f       	mov	r22, r18
 2fa:	39 81       	ldd	r19, Y+1	; 0x01
 2fc:	29 e3       	ldi	r18, 0x39	; 57
 2fe:	32 9f       	mul	r19, r18
 300:	21 2d       	mov	r18, r1
 302:	11 24       	eor	r1, r1
 304:	26 95       	lsr	r18
 306:	42 2f       	mov	r20, r18
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <led_right_top_bar_select+0x5e>
 310:	22 0f       	add	r18, r18
 312:	33 1f       	adc	r19, r19
 314:	4a 95       	dec	r20
 316:	e2 f7       	brpl	.-8      	; 0x310 <led_right_top_bar_select+0x5a>
 318:	20 95       	com	r18
 31a:	30 95       	com	r19
 31c:	59 81       	ldd	r21, Y+1	; 0x01
 31e:	49 e3       	ldi	r20, 0x39	; 57
 320:	54 9f       	mul	r21, r20
 322:	41 2d       	mov	r20, r1
 324:	11 24       	eor	r1, r1
 326:	46 95       	lsr	r20
 328:	44 2f       	mov	r20, r20
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <led_right_top_bar_select+0x7c>
 32e:	22 0f       	add	r18, r18
 330:	33 1f       	adc	r19, r19
 332:	4a 95       	dec	r20
 334:	e2 f7       	brpl	.-8      	; 0x32e <led_right_top_bar_select+0x78>
 336:	42 2f       	mov	r20, r18
 338:	39 81       	ldd	r19, Y+1	; 0x01
 33a:	2d ec       	ldi	r18, 0xCD	; 205
 33c:	32 9f       	mul	r19, r18
 33e:	21 2d       	mov	r18, r1
 340:	11 24       	eor	r1, r1
 342:	26 95       	lsr	r18
 344:	26 95       	lsr	r18
 346:	26 95       	lsr	r18
 348:	24 0f       	add	r18, r20
 34a:	26 2b       	or	r18, r22
 34c:	fc 01       	movw	r30, r24
 34e:	20 83       	st	Z, r18
}
 350:	00 00       	nop
 352:	0f 90       	pop	r0
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <main>:
//uint8_t update_data = 0;
//uint8_t draw_data = 0;

/*	MAIN	*/
int main(void)
{
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
	port_config();
 36a:	b0 d0       	rcall	.+352    	; 0x4cc <port_config>
	sys_timer_config();
 36c:	25 d1       	rcall	.+586    	; 0x5b8 <sys_timer_config>
 36e:	78 94       	sei
	
	//Enable maskable Interrupts
	sei();
 370:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
	
	/*	FOREVER DO	*/
	while(1)
	{
		if (sys_time - time_100Hz >= 10)
 374:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 378:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end+0x2>
 37c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x3>
 380:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <time_100Hz>
 384:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <time_100Hz+0x1>
 388:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <time_100Hz+0x2>
 38c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <time_100Hz+0x3>
 390:	79 01       	movw	r14, r18
 392:	8a 01       	movw	r16, r20
 394:	e8 1a       	sub	r14, r24
 396:	f9 0a       	sbc	r15, r25
 398:	0a 0b       	sbc	r16, r26
 39a:	1b 0b       	sbc	r17, r27
 39c:	d8 01       	movw	r26, r16
 39e:	c7 01       	movw	r24, r14
 3a0:	0a 97       	sbiw	r24, 0x0a	; 10
 3a2:	a1 05       	cpc	r26, r1
 3a4:	b1 05       	cpc	r27, r1
 3a6:	08 f4       	brcc	.+2      	; 0x3aa <main+0x50>
 3a8:	4d c0       	rjmp	.+154    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 3aa:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <led>
		{
			led_top_right_bar(hv_max,hv_min,led);
 3ae:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <led+0x1>
 3b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <hv_min>
 3b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <hv_min+0x1>
 3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3c2:	b9 01       	movw	r22, r18
 3c4:	f5 de       	rcall	.-534    	; 0x1b0 <led_top_right_bar>
 3c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
			time_100Hz = sys_time;
 3ca:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 3ce:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 3d2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 3d6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <time_100Hz>
 3da:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <time_100Hz+0x1>
 3de:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <time_100Hz+0x2>
 3e2:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <time_100Hz+0x3>
 3e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <direction>
			if (direction == 0)
 3ea:	88 23       	and	r24, r24
 3ec:	a1 f4       	brne	.+40     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ee:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <led>
			{
				if (led > 550) {direction = 1;}
 3f2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <led+0x1>
 3f6:	87 32       	cpi	r24, 0x27	; 39
 3f8:	92 40       	sbci	r25, 0x02	; 2
 3fa:	20 f0       	brcs	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <direction>
 402:	09 c0       	rjmp	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 404:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <led>
				else {led++;}
 408:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <led+0x1>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <led+0x1>
 412:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <led>
 416:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <direction>
			}
			if (direction == 1)
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	99 f4       	brne	.+38     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 41e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <led>
			{
				if (led < 280) {direction = 0;}
 422:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <led+0x1>
 426:	88 31       	cpi	r24, 0x18	; 24
 428:	91 40       	sbci	r25, 0x01	; 1
 42a:	18 f4       	brcc	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <direction>
 430:	09 c0       	rjmp	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 432:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <led>
				else {led--;}
 436:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <led+0x1>
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <led+0x1>
 440:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <led>
 444:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
			}
		}
		
		if (sys_time - time_50Hz >= 20)
 448:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 44c:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <__data_end+0x2>
 450:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <__data_end+0x3>
 454:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <time_50Hz>
 458:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <time_50Hz+0x1>
 45c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <time_50Hz+0x2>
 460:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <time_50Hz+0x3>
 464:	79 01       	movw	r14, r18
 466:	8a 01       	movw	r16, r20
 468:	e8 1a       	sub	r14, r24
 46a:	f9 0a       	sbc	r15, r25
 46c:	0a 0b       	sbc	r16, r26
 46e:	1b 0b       	sbc	r17, r27
 470:	d8 01       	movw	r26, r16
 472:	c7 01       	movw	r24, r14
 474:	44 97       	sbiw	r24, 0x14	; 20
 476:	a1 05       	cpc	r26, r1
 478:	b1 05       	cpc	r27, r1
 47a:	08 f4       	brcc	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	79 cf       	rjmp	.-270    	; 0x370 <main+0x16>
 47e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
		{
			time_50Hz = sys_time;
 482:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 486:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 48a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 48e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <time_50Hz>
 492:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <time_50Hz+0x1>
 496:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <time_50Hz+0x2>
 49a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <time_50Hz+0x3>
 49e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_2>
			led_top_left_bar(140,0,led_2);
 4a2:	88 2f       	mov	r24, r24
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	ac 01       	movw	r20, r24
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	8c e8       	ldi	r24, 0x8C	; 140
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	3e de       	rcall	.-900    	; 0x12e <led_top_left_bar>
 4b2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_2>
			if (led_2 > 140) {led_2 = 0;}
 4b6:	8d 38       	cpi	r24, 0x8D	; 141
 4b8:	18 f0       	brcs	.+6      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4ba:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <led_2>
 4be:	58 cf       	rjmp	.-336    	; 0x370 <main+0x16>
 4c0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <led_2>
			else {led_2++;}
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <led_2>
 4ca:	52 cf       	rjmp	.-348    	; 0x370 <main+0x16>

000004cc <port_config>:

/*	Extern Global Variables	*/
extern volatile unsigned long sys_time;

void port_config(void)
{
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
	//PA2 --> IMD_LED
	//PA3 --> Chip_Select_RGB_Left
	//(PA4 - PA7) --> Top Bar
	DDRA |= (1<<PA2) | (1<<PA3) | (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
 4d4:	81 e2       	ldi	r24, 0x21	; 33
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	21 e2       	ldi	r18, 0x21	; 33
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	2c 6f       	ori	r18, 0xFC	; 252
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
	
	//Button Inputs
	DDRA &= ~(1<<PA0) & ~(1<<PA1);
 4e6:	81 e2       	ldi	r24, 0x21	; 33
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	21 e2       	ldi	r18, 0x21	; 33
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	2c 7f       	andi	r18, 0xFC	; 252
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
	//PB2 --> MOSI
	//PB4 --> Display_Enable
	//PB5 --> Display_R/W
	//PB6 --> Display_RS
	//PB7 --> Chip_Select_RGB_Right
	DDRB |= (1<<PB1) | (1<<PB2) |(1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
 4f8:	84 e2       	ldi	r24, 0x24	; 36
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	24 e2       	ldi	r18, 0x24	; 36
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	f9 01       	movw	r30, r18
 502:	20 81       	ld	r18, Z
 504:	26 6f       	ori	r18, 0xF6	; 246
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
	
	//PB3 --> MISO
	DDRB &= ~(1<<PB3);
 50a:	84 e2       	ldi	r24, 0x24	; 36
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	24 e2       	ldi	r18, 0x24	; 36
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	f9 01       	movw	r30, r18
 514:	20 81       	ld	r18, Z
 516:	27 7f       	andi	r18, 0xF7	; 247
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
	
	//Top Bar
	DDRC = 0xFF;
 51c:	87 e2       	ldi	r24, 0x27	; 39
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
	
	//Bottom Bar
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3) | (1<<PD4) | (1<<PD7);
 526:	8a e2       	ldi	r24, 0x2A	; 42
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	2a e2       	ldi	r18, 0x2A	; 42
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	20 81       	ld	r18, Z
 532:	2f 69       	ori	r18, 0x9F	; 159
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
	
	//Display-Bus Bar
	DDRE = 0xFF;
 538:	8d e2       	ldi	r24, 0x2D	; 45
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	2f ef       	ldi	r18, 0xFF	; 255
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
	
	//SDCI Inputs:
	//PF1 --> SDB_DB
	//PF2 --> Inertia
	//PF3 --> BOTS
	DDRF &= ~(1<<PF1) & ~(1<<PF2) & ~(1<<PF3);
 542:	80 e3       	ldi	r24, 0x30	; 48
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	20 e3       	ldi	r18, 0x30	; 48
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	f9 01       	movw	r30, r18
 54c:	20 81       	ld	r18, Z
 54e:	21 7f       	andi	r18, 0xF1	; 241
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
	
	//(PG0 - PG2) --> Top Bar
	//PG3 --> Heart
	//PG4 --> Fault
	DDRG |= (1<<PG0) | (1<<PG1) | (1<<PG2) | (1<<PG3) | (1<<PG4);
 554:	83 e3       	ldi	r24, 0x33	; 51
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	23 e3       	ldi	r18, 0x33	; 51
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	f9 01       	movw	r30, r18
 55e:	20 81       	ld	r18, Z
 560:	2f 61       	ori	r18, 0x1F	; 31
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18
	
	//Resetting all PORTS
	PORTA = 0;
 566:	82 e2       	ldi	r24, 0x22	; 34
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	fc 01       	movw	r30, r24
 56c:	10 82       	st	Z, r1
	//Resetting Display-Control-Ports
	PORTB = 0;
 56e:	85 e2       	ldi	r24, 0x25	; 37
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	fc 01       	movw	r30, r24
 574:	10 82       	st	Z, r1
	PORTC = 0;
 576:	88 e2       	ldi	r24, 0x28	; 40
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	fc 01       	movw	r30, r24
 57c:	10 82       	st	Z, r1
	PORTD = 0;
 57e:	8b e2       	ldi	r24, 0x2B	; 43
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	fc 01       	movw	r30, r24
 584:	10 82       	st	Z, r1
	//Resetting Display-Bus Bar
	PORTE = 0;
 586:	8e e2       	ldi	r24, 0x2E	; 46
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	fc 01       	movw	r30, r24
 58c:	10 82       	st	Z, r1
	PORTF = 0;
 58e:	81 e3       	ldi	r24, 0x31	; 49
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	fc 01       	movw	r30, r24
 594:	10 82       	st	Z, r1
	PORTG = 0;
 596:	84 e3       	ldi	r24, 0x34	; 52
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	fc 01       	movw	r30, r24
 59c:	10 82       	st	Z, r1
	
	//Selecting Pull-Up Resistors for Button - Inputs
	PORTA |= (1<<PA0) | (1<<PA1);
 59e:	82 e2       	ldi	r24, 0x22	; 34
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	22 e2       	ldi	r18, 0x22	; 34
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	23 60       	ori	r18, 0x03	; 3
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
}
 5b0:	00 00       	nop
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <sys_timer_config>:

void sys_timer_config(void)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
	//8 bit Timer 0 configuration
	//Mode --> CTC, Divider --> /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
 5c0:	84 e4       	ldi	r24, 0x44	; 68
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	2b e0       	ldi	r18, 0x0B	; 11
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
	//compare interrupt enable
	TIMSK0 = 0 | (1<<OCIE0A);
 5ca:	8e e6       	ldi	r24, 0x6E	; 110
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	22 e0       	ldi	r18, 0x02	; 2
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
	//compare value for 1ms;
	OCR0A = 250-1;
 5d4:	87 e4       	ldi	r24, 0x47	; 71
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	29 ef       	ldi	r18, 0xF9	; 249
 5da:	fc 01       	movw	r30, r24
 5dc:	20 83       	st	Z, r18
}
 5de:	00 00       	nop
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <__vector_16>:

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 5f6:	0f 92       	push	r0
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	8f 93       	push	r24
 5fe:	9f 93       	push	r25
 600:	af 93       	push	r26
 602:	bf 93       	push	r27
 604:	ef 93       	push	r30
 606:	ff 93       	push	r31
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
	//draw_data = 1;
	//update_data++;
	sys_time++;
 610:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 614:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 618:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 61c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	a1 1d       	adc	r26, r1
 624:	b1 1d       	adc	r27, r1
 626:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 62a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 62e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 632:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	PORTG ^= (1<<PG3);
 636:	84 e3       	ldi	r24, 0x34	; 52
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	24 e3       	ldi	r18, 0x34	; 52
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	f9 01       	movw	r30, r18
 640:	30 81       	ld	r19, Z
 642:	28 e0       	ldi	r18, 0x08	; 8
 644:	23 27       	eor	r18, r19
 646:	fc 01       	movw	r30, r24
 648:	20 83       	st	Z, r18
 64a:	00 00       	nop
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	3f 91       	pop	r19
 65e:	2f 91       	pop	r18
 660:	0f 90       	pop	r0
 662:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 666:	0f 90       	pop	r0
 668:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <__udivmodhi4>:
 672:	aa 1b       	sub	r26, r26
 674:	bb 1b       	sub	r27, r27
 676:	51 e1       	ldi	r21, 0x11	; 17
 678:	07 c0       	rjmp	.+14     	; 0x688 <__udivmodhi4_ep>

0000067a <__udivmodhi4_loop>:
 67a:	aa 1f       	adc	r26, r26
 67c:	bb 1f       	adc	r27, r27
 67e:	a6 17       	cp	r26, r22
 680:	b7 07       	cpc	r27, r23
 682:	10 f0       	brcs	.+4      	; 0x688 <__udivmodhi4_ep>
 684:	a6 1b       	sub	r26, r22
 686:	b7 0b       	sbc	r27, r23

00000688 <__udivmodhi4_ep>:
 688:	88 1f       	adc	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	5a 95       	dec	r21
 68e:	a9 f7       	brne	.-22     	; 0x67a <__udivmodhi4_loop>
 690:	80 95       	com	r24
 692:	90 95       	com	r25
 694:	bc 01       	movw	r22, r24
 696:	cd 01       	movw	r24, r26
 698:	08 95       	ret

0000069a <__umulhisi3>:
 69a:	a2 9f       	mul	r26, r18
 69c:	b0 01       	movw	r22, r0
 69e:	b3 9f       	mul	r27, r19
 6a0:	c0 01       	movw	r24, r0
 6a2:	a3 9f       	mul	r26, r19
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	b2 9f       	mul	r27, r18
 6ae:	70 0d       	add	r23, r0
 6b0:	81 1d       	adc	r24, r1
 6b2:	11 24       	eor	r1, r1
 6b4:	91 1d       	adc	r25, r1
 6b6:	08 95       	ret

000006b8 <_exit>:
 6b8:	f8 94       	cli

000006ba <__stop_program>:
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <__stop_program>
