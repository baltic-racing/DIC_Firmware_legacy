
dic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00002a26  00002aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000280  008001d2  008001d2  00002b8c  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00002b8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022b7  00000000  00000000  00002e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011be  00000000  00000000  00005103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d53  00000000  00000000  000062c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ec  00000000  00000000  00008014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f3b  00000000  00000000  00008700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d78  00000000  00000000  0000963b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000a3b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
      32:	00 00       	nop
      34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_16>
      44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__vector_20>
      54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
      62:	00 00       	nop
      64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
      66:	00 00       	nop
      68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e2       	ldi	r30, 0x26	; 38
      a8:	fa e2       	ldi	r31, 0x2A	; 42
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 3d       	cpi	r26, 0xD2	; 210
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	24 e0       	ldi	r18, 0x04	; 4
      bc:	a2 ed       	ldi	r26, 0xD2	; 210
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 35       	cpi	r26, 0x52	; 82
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <main>
      ce:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <_exit>

000000d2 <__bad_interrupt>:
      d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <can_check_free>:
#include "canlib.h"
#include <avr/io.h>



uint8_t can_check_free(uint8_t mobnum){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <can_check_free+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t mob_status = 0;
      e0:	19 82       	std	Y+1, r1	; 0x01
	
	if(mobnum >= 8){
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	88 30       	cpi	r24, 0x08	; 8
      e6:	c0 f0       	brcs	.+48     	; 0x118 <can_check_free+0x44>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
      e8:	8d ed       	ldi	r24, 0xDD	; 221
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	fc 01       	movw	r30, r24
      ee:	80 81       	ld	r24, Z
      f0:	88 2f       	mov	r24, r24
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a 81       	ldd	r18, Y+2	; 0x02
      f6:	22 2f       	mov	r18, r18
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	28 50       	subi	r18, 0x08	; 8
      fc:	31 09       	sbc	r19, r1
      fe:	02 c0       	rjmp	.+4      	; 0x104 <can_check_free+0x30>
     100:	95 95       	asr	r25
     102:	87 95       	ror	r24
     104:	2a 95       	dec	r18
     106:	e2 f7       	brpl	.-8      	; 0x100 <can_check_free+0x2c>
     108:	81 70       	andi	r24, 0x01	; 1
     10a:	99 27       	eor	r25, r25
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	89 2b       	or	r24, r25
     110:	09 f0       	breq	.+2      	; 0x114 <can_check_free+0x40>
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	29 83       	std	Y+1, r18	; 0x01
     116:	15 c0       	rjmp	.+42     	; 0x142 <can_check_free+0x6e>


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
     118:	8c ed       	ldi	r24, 0xDC	; 220
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	2a 81       	ldd	r18, Y+2	; 0x02
     126:	22 2f       	mov	r18, r18
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <can_check_free+0x5c>
     12c:	95 95       	asr	r25
     12e:	87 95       	ror	r24
     130:	2a 95       	dec	r18
     132:	e2 f7       	brpl	.-8      	; 0x12c <can_check_free+0x58>
     134:	81 70       	andi	r24, 0x01	; 1
     136:	99 27       	eor	r25, r25
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	89 2b       	or	r24, r25
     13c:	09 f0       	breq	.+2      	; 0x140 <can_check_free+0x6c>
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	29 83       	std	Y+1, r18	; 0x01
	}

	return mob_status;
     142:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <can_cfg>:
void can_cfg(){
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <can_cfg+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	
	CANGCON = 0; // Disable CAN
     158:	88 ed       	ldi	r24, 0xD8	; 216
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	10 82       	st	Z, r1
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     160:	19 82       	std	Y+1, r1	; 0x01
     162:	56 c0       	rjmp	.+172    	; 0x210 <can_cfg+0xc2>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     164:	8d ee       	ldi	r24, 0xED	; 237
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	29 81       	ldd	r18, Y+1	; 0x01
     16a:	22 2f       	mov	r18, r18
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	22 95       	swap	r18
     170:	32 95       	swap	r19
     172:	30 7f       	andi	r19, 0xF0	; 240
     174:	32 27       	eor	r19, r18
     176:	20 7f       	andi	r18, 0xF0	; 240
     178:	32 27       	eor	r19, r18
     17a:	28 60       	ori	r18, 0x08	; 8
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
		CANSTMOB = 0;
     180:	8e ee       	ldi	r24, 0xEE	; 238
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	10 82       	st	Z, r1
		CANCDMOB = 0;
     188:	8f ee       	ldi	r24, 0xEF	; 239
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	fc 01       	movw	r30, r24
     18e:	10 82       	st	Z, r1
		CANIDT4 = 0;
     190:	80 ef       	ldi	r24, 0xF0	; 240
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	10 82       	st	Z, r1
		CANIDT3 = 0;
     198:	81 ef       	ldi	r24, 0xF1	; 241
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	10 82       	st	Z, r1
		CANIDT2 = 0;
     1a0:	82 ef       	ldi	r24, 0xF2	; 242
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fc 01       	movw	r30, r24
     1a6:	10 82       	st	Z, r1
		CANIDT1 = 0;
     1a8:	83 ef       	ldi	r24, 0xF3	; 243
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	10 82       	st	Z, r1
		CANIDM4 = 0;
     1b0:	84 ef       	ldi	r24, 0xF4	; 244
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	fc 01       	movw	r30, r24
     1b6:	10 82       	st	Z, r1
		CANIDM3 = 0;
     1b8:	85 ef       	ldi	r24, 0xF5	; 245
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	10 82       	st	Z, r1
		CANIDM2 = 0;
     1c0:	86 ef       	ldi	r24, 0xF6	; 246
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	10 82       	st	Z, r1
		CANIDM1 = 0;
     1c8:	87 ef       	ldi	r24, 0xF7	; 247
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	10 82       	st	Z, r1
		for (uint8_t byte = 0; byte < 8; byte++){
     1d0:	1a 82       	std	Y+2, r1	; 0x02
     1d2:	18 c0       	rjmp	.+48     	; 0x204 <can_cfg+0xb6>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
     1d4:	8d ee       	ldi	r24, 0xED	; 237
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	22 2f       	mov	r18, r18
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	22 95       	swap	r18
     1e0:	32 95       	swap	r19
     1e2:	30 7f       	andi	r19, 0xF0	; 240
     1e4:	32 27       	eor	r19, r18
     1e6:	20 7f       	andi	r18, 0xF0	; 240
     1e8:	32 27       	eor	r19, r18
     1ea:	32 2f       	mov	r19, r18
     1ec:	2a 81       	ldd	r18, Y+2	; 0x02
     1ee:	23 2b       	or	r18, r19
     1f0:	28 60       	ori	r18, 0x08	; 8
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
			CANMSG = 0;
     1f6:	8a ef       	ldi	r24, 0xFA	; 250
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	10 82       	st	Z, r1
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	8a 83       	std	Y+2, r24	; 0x02
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 30       	cpi	r24, 0x08	; 8
     208:	28 f3       	brcs	.-54     	; 0x1d4 <can_cfg+0x86>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	8f 30       	cpi	r24, 0x0F	; 15
     214:	08 f4       	brcc	.+2      	; 0x218 <can_cfg+0xca>
     216:	a6 cf       	rjmp	.-180    	; 0x164 <can_cfg+0x16>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
     218:	82 ee       	ldi	r24, 0xE2	; 226
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	10 82       	st	Z, r1
	CANBT2 = 0x0C;// 500kBaud according
     220:	83 ee       	ldi	r24, 0xE3	; 227
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	2c e0       	ldi	r18, 0x0C	; 12
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
	CANBT3 = 0x36;// to Datasheet S. 267
     22a:	84 ee       	ldi	r24, 0xE4	; 228
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	26 e3       	ldi	r18, 0x36	; 54
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18

	CANGIE = 0;
     234:	8b ed       	ldi	r24, 0xDB	; 219
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	10 82       	st	Z, r1

	CANGCON |= (1<<ENASTB); // Enable CAN
     23c:	88 ed       	ldi	r24, 0xD8	; 216
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	28 ed       	ldi	r18, 0xD8	; 216
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	f9 01       	movw	r30, r18
     246:	20 81       	ld	r18, Z
     248:	22 60       	ori	r18, 0x02	; 2
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
	
	
	
}
     24e:	00 00       	nop
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <can_rx>:
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	00 d0       	rcall	.+0      	; 0x260 <can_rx+0x6>
     260:	00 d0       	rcall	.+0      	; 0x262 <can_rx+0x8>
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	9b 83       	std	Y+3, r25	; 0x03
     26a:	8a 83       	std	Y+2, r24	; 0x02
     26c:	7d 83       	std	Y+5, r23	; 0x05
     26e:	6c 83       	std	Y+4, r22	; 0x04
	
	CANPAGE = to_receive->mob_number << MOBNB0;
     270:	8d ee       	ldi	r24, 0xED	; 237
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	2a 81       	ldd	r18, Y+2	; 0x02
     276:	3b 81       	ldd	r19, Y+3	; 0x03
     278:	f9 01       	movw	r30, r18
     27a:	24 81       	ldd	r18, Z+4	; 0x04
     27c:	22 95       	swap	r18
     27e:	20 7f       	andi	r18, 0xF0	; 240
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	if (can_check_free(to_receive->mob_number)){
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	84 81       	ldd	r24, Z+4	; 0x04
     28c:	23 df       	rcall	.-442    	; 0xd4 <can_check_free>
     28e:	88 23       	and	r24, r24
     290:	09 f4       	brne	.+2      	; 0x294 <can_rx+0x3a>
     292:	50 c0       	rjmp	.+160    	; 0x334 <can_rx+0xda>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
     294:	83 ef       	ldi	r24, 0xF3	; 243
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	2a 81       	ldd	r18, Y+2	; 0x02
     29a:	3b 81       	ldd	r19, Y+3	; 0x03
     29c:	f9 01       	movw	r30, r18
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	36 95       	lsr	r19
     2a4:	27 95       	ror	r18
     2a6:	36 95       	lsr	r19
     2a8:	27 95       	ror	r18
     2aa:	36 95       	lsr	r19
     2ac:	27 95       	ror	r18
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
     2b2:	82 ef       	ldi	r24, 0xF2	; 242
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	2a 81       	ldd	r18, Y+2	; 0x02
     2b8:	3b 81       	ldd	r19, Y+3	; 0x03
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	31 81       	ldd	r19, Z+1	; 0x01
     2c0:	22 95       	swap	r18
     2c2:	22 0f       	add	r18, r18
     2c4:	20 7e       	andi	r18, 0xE0	; 224
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
		CANIDT3 = 0;
     2ca:	81 ef       	ldi	r24, 0xF1	; 241
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	10 82       	st	Z, r1
		CANIDT4 = 1<<RTRTAG;
     2d2:	80 ef       	ldi	r24, 0xF0	; 240
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	24 e0       	ldi	r18, 0x04	; 4
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
		CANIDM1 = to_receive->mob_idmask >>3;
     2dc:	87 ef       	ldi	r24, 0xF7	; 247
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	2a 81       	ldd	r18, Y+2	; 0x02
     2e2:	3b 81       	ldd	r19, Y+3	; 0x03
     2e4:	f9 01       	movw	r30, r18
     2e6:	22 81       	ldd	r18, Z+2	; 0x02
     2e8:	33 81       	ldd	r19, Z+3	; 0x03
     2ea:	36 95       	lsr	r19
     2ec:	27 95       	ror	r18
     2ee:	36 95       	lsr	r19
     2f0:	27 95       	ror	r18
     2f2:	36 95       	lsr	r19
     2f4:	27 95       	ror	r18
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
     2fa:	86 ef       	ldi	r24, 0xF6	; 246
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	3b 81       	ldd	r19, Y+3	; 0x03
     302:	f9 01       	movw	r30, r18
     304:	22 81       	ldd	r18, Z+2	; 0x02
     306:	33 81       	ldd	r19, Z+3	; 0x03
     308:	22 95       	swap	r18
     30a:	22 0f       	add	r18, r18
     30c:	20 7e       	andi	r18, 0xE0	; 224
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
		CANIDM3 = 0;
     312:	85 ef       	ldi	r24, 0xF5	; 245
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	10 82       	st	Z, r1
		CANIDM4 = 0;
     31a:	84 ef       	ldi	r24, 0xF4	; 244
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	10 82       	st	Z, r1
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
     322:	8f ee       	ldi	r24, 0xEF	; 239
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	28 ec       	ldi	r18, 0xC8	; 200
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
		CANSTMOB = 0;
     32c:	8e ee       	ldi	r24, 0xEE	; 238
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	10 82       	st	Z, r1
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     334:	19 82       	std	Y+1, r1	; 0x01
     336:	24 c0       	rjmp	.+72     	; 0x380 <can_rx+0x126>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
     338:	8d ee       	ldi	r24, 0xED	; 237
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	f9 01       	movw	r30, r18
     342:	24 81       	ldd	r18, Z+4	; 0x04
     344:	22 2f       	mov	r18, r18
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	22 95       	swap	r18
     34a:	32 95       	swap	r19
     34c:	30 7f       	andi	r19, 0xF0	; 240
     34e:	32 27       	eor	r19, r18
     350:	20 7f       	andi	r18, 0xF0	; 240
     352:	32 27       	eor	r19, r18
     354:	32 2f       	mov	r19, r18
     356:	29 81       	ldd	r18, Y+1	; 0x01
     358:	23 2b       	or	r18, r19
     35a:	28 60       	ori	r18, 0x08	; 8
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
		data[byte] = CANMSG;
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	2a ef       	ldi	r18, 0xFA	; 250
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	f9 01       	movw	r30, r18
     374:	20 81       	ld	r18, Z
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	c8 f2       	brcs	.-78     	; 0x338 <can_rx+0xde>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
     386:	00 00       	nop
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <can_tx+0x6>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <can_tx+0x8>
     3a0:	1f 92       	push	r1
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9b 83       	std	Y+3, r25	; 0x03
     3a8:	8a 83       	std	Y+2, r24	; 0x02
     3aa:	7d 83       	std	Y+5, r23	; 0x05
     3ac:	6c 83       	std	Y+4, r22	; 0x04
	
	for(uint8_t byte = 0; byte <8; byte++){
     3ae:	19 82       	std	Y+1, r1	; 0x01
     3b0:	24 c0       	rjmp	.+72     	; 0x3fa <can_tx+0x62>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
     3b2:	8d ee       	ldi	r24, 0xED	; 237
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	2a 81       	ldd	r18, Y+2	; 0x02
     3b8:	3b 81       	ldd	r19, Y+3	; 0x03
     3ba:	f9 01       	movw	r30, r18
     3bc:	24 81       	ldd	r18, Z+4	; 0x04
     3be:	22 2f       	mov	r18, r18
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	22 95       	swap	r18
     3c4:	32 95       	swap	r19
     3c6:	30 7f       	andi	r19, 0xF0	; 240
     3c8:	32 27       	eor	r19, r18
     3ca:	20 7f       	andi	r18, 0xF0	; 240
     3cc:	32 27       	eor	r19, r18
     3ce:	32 2f       	mov	r19, r18
     3d0:	29 81       	ldd	r18, Y+1	; 0x01
     3d2:	23 2b       	or	r18, r19
     3d4:	28 60       	ori	r18, 0x08	; 8
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
		CANMSG = data[byte];
     3da:	8a ef       	ldi	r24, 0xFA	; 250
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	22 2f       	mov	r18, r18
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	4c 81       	ldd	r20, Y+4	; 0x04
     3e6:	5d 81       	ldd	r21, Y+5	; 0x05
     3e8:	24 0f       	add	r18, r20
     3ea:	35 1f       	adc	r19, r21
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	88 30       	cpi	r24, 0x08	; 8
     3fe:	c8 f2       	brcs	.-78     	; 0x3b2 <can_tx+0x1a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
     400:	8d ee       	ldi	r24, 0xED	; 237
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2a 81       	ldd	r18, Y+2	; 0x02
     406:	3b 81       	ldd	r19, Y+3	; 0x03
     408:	f9 01       	movw	r30, r18
     40a:	24 81       	ldd	r18, Z+4	; 0x04
     40c:	22 95       	swap	r18
     40e:	20 7f       	andi	r18, 0xF0	; 240
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
	if (can_check_free(to_send->mob_number)){
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	fc 01       	movw	r30, r24
     41a:	84 81       	ldd	r24, Z+4	; 0x04
     41c:	5b de       	rcall	.-842    	; 0xd4 <can_check_free>
     41e:	88 23       	and	r24, r24
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	44 c0       	rjmp	.+136    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		CANSTMOB = 0;
     424:	8e ee       	ldi	r24, 0xEE	; 238
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fc 01       	movw	r30, r24
     42a:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
     42c:	83 ef       	ldi	r24, 0xF3	; 243
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	3b 81       	ldd	r19, Y+3	; 0x03
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	31 81       	ldd	r19, Z+1	; 0x01
     43a:	36 95       	lsr	r19
     43c:	27 95       	ror	r18
     43e:	36 95       	lsr	r19
     440:	27 95       	ror	r18
     442:	36 95       	lsr	r19
     444:	27 95       	ror	r18
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
     44a:	82 ef       	ldi	r24, 0xF2	; 242
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	2a 81       	ldd	r18, Y+2	; 0x02
     450:	3b 81       	ldd	r19, Y+3	; 0x03
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	22 95       	swap	r18
     45a:	22 0f       	add	r18, r18
     45c:	20 7e       	andi	r18, 0xE0	; 224
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
		CANIDT3 = 0;
     462:	81 ef       	ldi	r24, 0xF1	; 241
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	fc 01       	movw	r30, r24
     468:	10 82       	st	Z, r1
		CANIDT4 = 0;
     46a:	80 ef       	ldi	r24, 0xF0	; 240
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	10 82       	st	Z, r1
		CANIDM1 = 0; //0b11111111;
     472:	87 ef       	ldi	r24, 0xF7	; 247
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	fc 01       	movw	r30, r24
     478:	10 82       	st	Z, r1
		CANIDM2 = 0; //0b11100000;
     47a:	86 ef       	ldi	r24, 0xF6	; 246
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	fc 01       	movw	r30, r24
     480:	10 82       	st	Z, r1
		CANIDM3 = 0;
     482:	85 ef       	ldi	r24, 0xF5	; 245
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	10 82       	st	Z, r1
		CANIDM4 = 0;
     48a:	84 ef       	ldi	r24, 0xF4	; 244
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	10 82       	st	Z, r1
		CANSTMOB = 0;
     492:	8e ee       	ldi	r24, 0xEE	; 238
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
     49a:	8f ee       	ldi	r24, 0xEF	; 239
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	28 e4       	ldi	r18, 0x48	; 72
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
		CANSTMOB = 0;
     4a4:	8e ee       	ldi	r24, 0xEE	; 238
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	10 82       	st	Z, r1
	}
	
}
     4ac:	00 00       	nop
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <can_init_messages>:
struct CAN_MOB can_AMS2_mob;
	uint8_t AMS2_databytes[8];
struct CAN_MOB can_AMS3_mob;
	uint8_t AMS3_databytes[8];

void can_init_messages(){
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
	
	//can_SWC_mob.mob_id = 0x800;
	//can_SWC_mob.mob_idmask = 0xffff;
	//can_SWC_mob.mob_number = 0;
	
	can_Fusebox0_mob.mob_id = 0x600;
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	96 e0       	ldi	r25, 0x06	; 6
     4ca:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <can_Fusebox0_mob+0x1>
     4ce:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <can_Fusebox0_mob+0x3>
     4da:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 1;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <can_Fusebox0_mob+0x4>
	
	can_Fusebox0_mob.mob_id = 0x601;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	96 e0       	ldi	r25, 0x06	; 6
     4e8:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <can_Fusebox0_mob+0x1>
     4ec:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	9f ef       	ldi	r25, 0xFF	; 255
     4f4:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <can_Fusebox0_mob+0x3>
     4f8:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 2;
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <can_Fusebox0_mob+0x4>
	
	can_SHR0_mob.mob_id = 0x400;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <can_SHR0_mob+0x1>
     50a:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <can_SHR0_mob>
	can_SHR0_mob.mob_idmask = 0xffff;
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	9f ef       	ldi	r25, 0xFF	; 255
     512:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <can_SHR0_mob+0x3>
     516:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <can_SHR0_mob+0x2>
	can_SHR0_mob.mob_number = 3;
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <can_SHR0_mob+0x4>
	
	can_SHL0_mob.mob_id = 0x410;
     520:	80 e1       	ldi	r24, 0x10	; 16
     522:	94 e0       	ldi	r25, 0x04	; 4
     524:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <can_SHL0_mob+0x1>
     528:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <can_SHL0_mob>
	can_SHL0_mob.mob_idmask = 0xffff;
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	9f ef       	ldi	r25, 0xFF	; 255
     530:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <can_SHL0_mob+0x3>
     534:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <can_SHL0_mob+0x2>
	can_SHL0_mob.mob_number = 4;
     538:	84 e0       	ldi	r24, 0x04	; 4
     53a:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <can_SHL0_mob+0x4>
	
	can_SHB0_mob.mob_id = 0x420;
     53e:	80 e2       	ldi	r24, 0x20	; 32
     540:	94 e0       	ldi	r25, 0x04	; 4
     542:	90 93 fb 02 	sts	0x02FB, r25	; 0x8002fb <can_SHB0_mob+0x1>
     546:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <can_SHB0_mob>
	can_SHB0_mob.mob_idmask = 0xffff;
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	9f ef       	ldi	r25, 0xFF	; 255
     54e:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <can_SHB0_mob+0x3>
     552:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <can_SHB0_mob+0x2>
	can_SHB0_mob.mob_number = 5;
     556:	85 e0       	ldi	r24, 0x05	; 5
     558:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <can_SHB0_mob+0x4>
	
	can_Logger0_mob.mob_id = 0x799;
     55c:	89 e9       	ldi	r24, 0x99	; 153
     55e:	97 e0       	ldi	r25, 0x07	; 7
     560:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <can_Logger0_mob+0x1>
     564:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <can_Logger0_mob>
	can_Logger0_mob.mob_idmask = 0xffff;
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	9f ef       	ldi	r25, 0xFF	; 255
     56c:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <can_Logger0_mob+0x3>
     570:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <can_Logger0_mob+0x2>
	can_Logger0_mob.mob_number = 6;
     574:	86 e0       	ldi	r24, 0x06	; 6
     576:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <can_Logger0_mob+0x4>
	
	can_Logger1_mob.mob_id = 0x798;
     57a:	88 e9       	ldi	r24, 0x98	; 152
     57c:	97 e0       	ldi	r25, 0x07	; 7
     57e:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <can_Logger1_mob+0x1>
     582:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <can_Logger1_mob>
	can_Logger1_mob.mob_idmask = 0xffff;
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	9f ef       	ldi	r25, 0xFF	; 255
     58a:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <can_Logger1_mob+0x3>
     58e:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <can_Logger1_mob+0x2>
	can_Logger1_mob.mob_number = 7;
     592:	87 e0       	ldi	r24, 0x07	; 7
     594:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <can_Logger1_mob+0x4>
		
	can_Logger2_mob.mob_id = 0x797;
     598:	87 e9       	ldi	r24, 0x97	; 151
     59a:	97 e0       	ldi	r25, 0x07	; 7
     59c:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <can_Logger2_mob+0x1>
     5a0:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <can_Logger2_mob>
	can_Logger2_mob.mob_idmask = 0xffff;
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	9f ef       	ldi	r25, 0xFF	; 255
     5a8:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <can_Logger2_mob+0x3>
     5ac:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <can_Logger2_mob+0x2>
	can_Logger2_mob.mob_number = 10;
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <can_Logger2_mob+0x4>
	
	can_DIC0_mob.mob_id = 0x500;
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	95 e0       	ldi	r25, 0x05	; 5
     5ba:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <can_DIC0_mob+0x1>
     5be:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <can_DIC0_mob>
	can_DIC0_mob.mob_idmask = 0xffff;
     5c2:	8f ef       	ldi	r24, 0xFF	; 255
     5c4:	9f ef       	ldi	r25, 0xFF	; 255
     5c6:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <can_DIC0_mob+0x3>
     5ca:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <can_DIC0_mob+0x2>
	can_DIC0_mob.mob_number = 11;
     5ce:	8b e0       	ldi	r24, 0x0B	; 11
     5d0:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <can_DIC0_mob+0x4>
	
	can_AMS0_mob.mob_id = 0x200;
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <can_AMS0_mob+0x1>
     5dc:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <can_AMS0_mob>
	can_AMS0_mob.mob_idmask = 0xffff;
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	9f ef       	ldi	r25, 0xFF	; 255
     5e4:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <can_AMS0_mob+0x3>
     5e8:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <can_AMS0_mob+0x2>
	can_AMS0_mob.mob_number = 12;
     5ec:	8c e0       	ldi	r24, 0x0C	; 12
     5ee:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <can_AMS0_mob+0x4>
	
	can_AMS1_mob.mob_id = 0x201;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <can_AMS1_mob+0x1>
     5fa:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <can_AMS1_mob>
	can_AMS1_mob.mob_idmask = 0xffff;
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	9f ef       	ldi	r25, 0xFF	; 255
     602:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <can_AMS1_mob+0x3>
     606:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <can_AMS1_mob+0x2>
	can_AMS1_mob.mob_number = 13;
     60a:	8d e0       	ldi	r24, 0x0D	; 13
     60c:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <can_AMS1_mob+0x4>
	
	can_AMS2_mob.mob_id = 0x202;
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <can_AMS2_mob+0x1>
     618:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <can_AMS2_mob>
	can_AMS2_mob.mob_idmask = 0xffff;
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	9f ef       	ldi	r25, 0xFF	; 255
     620:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <can_AMS2_mob+0x3>
     624:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <can_AMS2_mob+0x2>
	can_AMS2_mob.mob_number = 14;
     628:	8e e0       	ldi	r24, 0x0E	; 14
     62a:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <can_AMS2_mob+0x4>
	
	can_AMS3_mob.mob_id = 0x203;
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <can_AMS3_mob+0x1>
     636:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <can_AMS3_mob>
	can_AMS3_mob.mob_idmask = 0xffff;
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	9f ef       	ldi	r25, 0xFF	; 255
     63e:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <can_AMS3_mob+0x3>
     642:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <can_AMS3_mob+0x2>
	can_AMS3_mob.mob_number = 15;	
     646:	8f e0       	ldi	r24, 0x0F	; 15
     648:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <can_AMS3_mob+0x4>
	
}	
     64c:	00 00       	nop
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <CAN_recieve>:

void CAN_recieve(){
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
	
	//can_rx(&can_SWC_mob, SWC_databytes);
	can_rx(&can_Fusebox0_mob, Fusebox0_databytes);
     65c:	6a ee       	ldi	r22, 0xEA	; 234
     65e:	72 e0       	ldi	r23, 0x02	; 2
     660:	85 e8       	ldi	r24, 0x85	; 133
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	fa dd       	rcall	.-1036   	; 0x25a <can_rx>
	can_rx(&can_Fusebox1_mob, Fusebox1_databytes);
     666:	62 ee       	ldi	r22, 0xE2	; 226
     668:	72 e0       	ldi	r23, 0x02	; 2
     66a:	83 ec       	ldi	r24, 0xC3	; 195
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	f5 dd       	rcall	.-1046   	; 0x25a <can_rx>
	can_rx(&can_SHR0_mob, SHR0_databytes);
     670:	69 ea       	ldi	r22, 0xA9	; 169
     672:	72 e0       	ldi	r23, 0x02	; 2
     674:	82 e9       	ldi	r24, 0x92	; 146
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	f0 dd       	rcall	.-1056   	; 0x25a <can_rx>
	can_rx(&can_SHL0_mob, SHL0_databytes);
     67a:	6b eb       	ldi	r22, 0xBB	; 187
     67c:	72 e0       	ldi	r23, 0x02	; 2
     67e:	84 ea       	ldi	r24, 0xA4	; 164
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	eb dd       	rcall	.-1066   	; 0x25a <can_rx>
	can_rx(&can_SHB0_mob, SHB0_databytes);
     684:	68 ec       	ldi	r22, 0xC8	; 200
     686:	72 e0       	ldi	r23, 0x02	; 2
     688:	8a ef       	ldi	r24, 0xFA	; 250
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	e6 dd       	rcall	.-1076   	; 0x25a <can_rx>
	can_rx(&can_Logger0_mob, Logger0_databytes);
     68e:	62 ef       	ldi	r22, 0xF2	; 242
     690:	72 e0       	ldi	r23, 0x02	; 2
     692:	80 ed       	ldi	r24, 0xD0	; 208
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	e1 dd       	rcall	.-1086   	; 0x25a <can_rx>
	can_rx(&can_Logger1_mob, Logger1_databytes);
     698:	68 e5       	ldi	r22, 0x58	; 88
     69a:	72 e0       	ldi	r23, 0x02	; 2
     69c:	81 eb       	ldi	r24, 0xB1	; 177
     69e:	92 e0       	ldi	r25, 0x02	; 2
     6a0:	dc dd       	rcall	.-1096   	; 0x25a <can_rx>
	can_rx(&can_Logger2_mob, Logger2_databytes);
     6a2:	65 e6       	ldi	r22, 0x65	; 101
     6a4:	72 e0       	ldi	r23, 0x02	; 2
     6a6:	80 e6       	ldi	r24, 0x60	; 96
     6a8:	92 e0       	ldi	r25, 0x02	; 2
     6aa:	d7 dd       	rcall	.-1106   	; 0x25a <can_rx>
	can_rx(&can_AMS0_mob, AMS0_databytes);
     6ac:	6c e9       	ldi	r22, 0x9C	; 156
     6ae:	72 e0       	ldi	r23, 0x02	; 2
     6b0:	89 e0       	ldi	r24, 0x09	; 9
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	d2 dd       	rcall	.-1116   	; 0x25a <can_rx>
	can_rx(&can_AMS1_mob, AMS1_databytes);
     6b6:	6d e7       	ldi	r22, 0x7D	; 125
     6b8:	72 e0       	ldi	r23, 0x02	; 2
     6ba:	85 ed       	ldi	r24, 0xD5	; 213
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	cd dd       	rcall	.-1126   	; 0x25a <can_rx>
	can_rx(&can_AMS2_mob, AMS2_databytes);
     6c0:	6a e8       	ldi	r22, 0x8A	; 138
     6c2:	72 e0       	ldi	r23, 0x02	; 2
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	c8 dd       	rcall	.-1136   	; 0x25a <can_rx>
	can_rx(&can_AMS3_mob, AMS3_databytes);
     6ca:	6a ed       	ldi	r22, 0xDA	; 218
     6cc:	72 e0       	ldi	r23, 0x02	; 2
     6ce:	87 e9       	ldi	r24, 0x97	; 151
     6d0:	92 e0       	ldi	r25, 0x02	; 2
     6d2:	c3 dd       	rcall	.-1146   	; 0x25a <can_rx>
     6d4:	65 e7       	ldi	r22, 0x75	; 117
	
	can_tx(&can_DIC0_mob, DIC0_databytes);
     6d6:	72 e0       	ldi	r23, 0x02	; 2
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	5d de       	rcall	.-838    	; 0x398 <can_tx>
     6de:	00 00       	nop
     6e0:	df 91       	pop	r29
	
}
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <CAN_put_data>:
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29

void CAN_put_data(){
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
		Logger2_databytes[7] = 96<<8;
		
		Logger0_databytes[0] = 42;
*/
		
	Rotary_Encoder_Right = 0;//SWC_databytes[0];
     6ee:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <__data_end>
	Rotary_Encoder_Left = 1;//SWC_databytes[1];
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <Rotary_Encoder_Left>
	dsp_mde = Rotary_Encoder_Right%4;
     6f8:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     6fc:	83 70       	andi	r24, 0x03	; 3
     6fe:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <dsp_mde>
	BrakeBias = 0;
     702:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <BrakeBias>

	APPS1 = (SHR0_databytes[1] << 8 | SHR0_databytes[0])/10;
     706:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <SHR0_databytes+0x1>
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	38 2f       	mov	r19, r24
     710:	22 27       	eor	r18, r18
     712:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <SHR0_databytes>
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	82 2b       	or	r24, r18
     71c:	93 2b       	or	r25, r19
     71e:	2a e0       	ldi	r18, 0x0A	; 10
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	b9 01       	movw	r22, r18
     724:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     728:	cb 01       	movw	r24, r22
     72a:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <APPS1>
	APPS2 = (SHR0_databytes[3] << 8 | SHR0_databytes[2])/10;
     72e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <SHR0_databytes+0x3>
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	38 2f       	mov	r19, r24
     738:	22 27       	eor	r18, r18
     73a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SHR0_databytes+0x2>
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	82 2b       	or	r24, r18
     744:	93 2b       	or	r25, r19
     746:	2a e0       	ldi	r18, 0x0A	; 10
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	b9 01       	movw	r22, r18
     74c:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     750:	cb 01       	movw	r24, r22
     752:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <APPS2>
	
	BPF = (SHL0_databytes[1] << 8 | SHL0_databytes[0])/10;
     756:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <SHL0_databytes+0x1>
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	38 2f       	mov	r19, r24
     760:	22 27       	eor	r18, r18
     762:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <SHL0_databytes>
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	82 2b       	or	r24, r18
     76c:	93 2b       	or	r25, r19
     76e:	2a e0       	ldi	r18, 0x0A	; 10
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	b9 01       	movw	r22, r18
     774:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     778:	cb 01       	movw	r24, r22
     77a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <BPF>
	BPR = (SHL0_databytes[3] << 8 | SHL0_databytes[2])/10;
     77e:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <SHL0_databytes+0x3>
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	38 2f       	mov	r19, r24
     788:	22 27       	eor	r18, r18
     78a:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <SHL0_databytes+0x2>
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	82 2b       	or	r24, r18
     794:	93 2b       	or	r25, r19
     796:	2a e0       	ldi	r18, 0x0A	; 10
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	b9 01       	movw	r22, r18
     79c:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     7a0:	cb 01       	movw	r24, r22
     7a2:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <BPR>
	CLT = (SHB0_databytes[1] << 8 | SHB0_databytes[0])/10;
     7a6:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <SHB0_databytes+0x1>
     7aa:	88 2f       	mov	r24, r24
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	38 2f       	mov	r19, r24
     7b0:	22 27       	eor	r18, r18
     7b2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <SHB0_databytes>
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	82 2b       	or	r24, r18
     7bc:	93 2b       	or	r25, r19
     7be:	2a e0       	ldi	r18, 0x0A	; 10
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	b9 01       	movw	r22, r18
     7c4:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     7c8:	cb 01       	movw	r24, r22
     7ca:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <CLT+0x1>
     7ce:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <CLT>

	LVSVoltage = (Fusebox0_databytes[1] << 8 | Fusebox0_databytes[0])/40;
     7d2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Fusebox0_databytes+0x1>
     7d6:	88 2f       	mov	r24, r24
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	38 2f       	mov	r19, r24
     7dc:	22 27       	eor	r18, r18
     7de:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <Fusebox0_databytes>
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	82 2b       	or	r24, r18
     7e8:	93 2b       	or	r25, r19
     7ea:	28 e2       	ldi	r18, 0x28	; 40
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	b9 01       	movw	r22, r18
     7f0:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     7f4:	cb 01       	movw	r24, r22
     7f6:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <LVSVoltage+0x1>
     7fa:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <LVSVoltage>
	SDCIFB = (Fusebox1_databytes[1] << 8 | Fusebox1_databytes[0]);
     7fe:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <Fusebox1_databytes+0x1>
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	98 2f       	mov	r25, r24
     808:	88 27       	eor	r24, r24
     80a:	98 2f       	mov	r25, r24
     80c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <Fusebox1_databytes>
     810:	89 2b       	or	r24, r25
     812:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <SDCIFB>
	FRO = (Fusebox1_databytes[3] << 8 | Fusebox1_databytes[2]);
     816:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Fusebox1_databytes+0x3>
     81a:	88 2f       	mov	r24, r24
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	38 2f       	mov	r19, r24
     820:	22 27       	eor	r18, r18
     822:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <Fusebox1_databytes+0x2>
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	82 2b       	or	r24, r18
     82c:	93 2b       	or	r25, r19
     82e:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <FRO+0x1>
     832:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <FRO>
	
	AMS_ERR = AMS0_databytes[0];
     836:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <AMS0_databytes>
     83a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <AMS_ERR>
	ERR_info = (AMS0_databytes[2] << 8 | AMS0_databytes[1]);
     83e:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <AMS0_databytes+0x2>
     842:	88 2f       	mov	r24, r24
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	38 2f       	mov	r19, r24
     848:	22 27       	eor	r18, r18
     84a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <AMS0_databytes+0x1>
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	82 2b       	or	r24, r18
     854:	93 2b       	or	r25, r19
     856:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <ERR_info+0x1>
     85a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <ERR_info>
	IMD_ERR = AMS0_databytes[4];
     85e:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <AMS0_databytes+0x4>
     862:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <IMD_ERR>
	TSVoltage = (AMS1_databytes[1] << 8 | AMS1_databytes[0])/6;
     866:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <AMS1_databytes+0x1>
     86a:	88 2f       	mov	r24, r24
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	38 2f       	mov	r19, r24
     870:	22 27       	eor	r18, r18
     872:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <AMS1_databytes>
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	82 2b       	or	r24, r18
     87c:	93 2b       	or	r25, r19
     87e:	26 e0       	ldi	r18, 0x06	; 6
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	b9 01       	movw	r22, r18
     884:	0e 94 c4 14 	call	0x2988	; 0x2988 <__divmodhi4>
     888:	cb 01       	movw	r24, r22
     88a:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <TSVoltage+0x1>
     88e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <TSVoltage>
	SOC = (AMS1_databytes[5] << 8 | AMS1_databytes[4]);
     892:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <AMS1_databytes+0x5>
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	38 2f       	mov	r19, r24
     89c:	22 27       	eor	r18, r18
     89e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <AMS1_databytes+0x4>
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	82 2b       	or	r24, r18
     8a8:	93 2b       	or	r25, r19
     8aa:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <SOC+0x1>
     8ae:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SOC>
	AccumulatorTemperature = (AMS2_databytes[7] << 8 | AMS2_databytes[6]);
     8b2:	80 91 91 02 	lds	r24, 0x0291	; 0x800291 <AMS2_databytes+0x7>
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	38 2f       	mov	r19, r24
     8bc:	22 27       	eor	r18, r18
     8be:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <AMS2_databytes+0x6>
     8c2:	88 2f       	mov	r24, r24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	82 2b       	or	r24, r18
     8c8:	93 2b       	or	r25, r19
     8ca:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <AccumulatorTemperature+0x1>
     8ce:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <AccumulatorTemperature>
	TS_RDY = AMS3_databytes[0];
     8d2:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <AMS3_databytes>
     8d6:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <TS_RDY>

	//For some weird reason the length of the variable that gets shifted seems to matter, atleast in this usecase, with for e.g BPF etc it works fine which may be becouse we are actually only transmitting an 8 bit value
	//what happens is we shift an 8bit uint by 8 to the left and want to save it in an 32bit uint, we put for e.g 135 in and should get 34560. instead we are getting 4294965720 which is definitly also not an 8bit value
	//i do not know what is happening here but shifting a variable beyond its own limit seems to do weird stuff. therefore this stupid hacky fix with putting the 8bit integers into 32bit integer and than whacking it together
	
	Laptime_1 = Logger0_databytes[1];
     8da:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <Logger0_databytes+0x1>
     8de:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Laptime_1>
	Laptime_2 = Logger0_databytes[2];
     8e2:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <Logger0_databytes+0x2>
     8e6:	88 2f       	mov	r24, r24
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <Laptime_2+0x1>
     8ee:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <Laptime_2>
	Laptime_3 = Logger0_databytes[3];
     8f2:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <Logger0_databytes+0x3>
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <Laptime_3>
     902:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <Laptime_3+0x1>
     906:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <Laptime_3+0x2>
     90a:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <Laptime_3+0x3>
	Laptime_4 = Logger0_databytes[4];
     90e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <Logger0_databytes+0x4>
     912:	88 2f       	mov	r24, r24
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Laptime_4>
     91e:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <Laptime_4+0x1>
     922:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <Laptime_4+0x2>
     926:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <Laptime_4+0x3>
	
	Laptime = Laptime_1 | Laptime_2 << 8 | Laptime_3 << 16 | Laptime_4 << 24;
     92a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Laptime_1>
     92e:	28 2f       	mov	r18, r24
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <Laptime_2>
     936:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <Laptime_2+0x1>
     93a:	98 2f       	mov	r25, r24
     93c:	88 27       	eor	r24, r24
     93e:	82 2b       	or	r24, r18
     940:	93 2b       	or	r25, r19
     942:	9c 01       	movw	r18, r24
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Laptime_3>
     94c:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <Laptime_3+0x1>
     950:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <Laptime_3+0x2>
     954:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <Laptime_3+0x3>
     958:	dc 01       	movw	r26, r24
     95a:	99 27       	eor	r25, r25
     95c:	88 27       	eor	r24, r24
     95e:	28 2b       	or	r18, r24
     960:	39 2b       	or	r19, r25
     962:	4a 2b       	or	r20, r26
     964:	5b 2b       	or	r21, r27
     966:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Laptime_4>
     96a:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Laptime_4+0x1>
     96e:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <Laptime_4+0x2>
     972:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <Laptime_4+0x3>
     976:	b8 2f       	mov	r27, r24
     978:	aa 27       	eor	r26, r26
     97a:	99 27       	eor	r25, r25
     97c:	88 27       	eor	r24, r24
     97e:	82 2b       	or	r24, r18
     980:	93 2b       	or	r25, r19
     982:	a4 2b       	or	r26, r20
     984:	b5 2b       	or	r27, r21
     986:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <Laptime>
     98a:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <Laptime+0x1>
     98e:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <Laptime+0x2>
     992:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <Laptime+0x3>
	
	Besttime_1 = Logger1_databytes[0];
     996:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Logger1_databytes>
     99a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <Besttime_1>
	Besttime_2 = Logger1_databytes[1];
     99e:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <Logger1_databytes+0x1>
     9a2:	88 2f       	mov	r24, r24
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Besttime_2+0x1>
     9aa:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Besttime_2>
	Besttime_3 = Logger1_databytes[2];
     9ae:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Logger1_databytes+0x2>
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Besttime_3>
     9be:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Besttime_3+0x1>
     9c2:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <Besttime_3+0x2>
     9c6:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <Besttime_3+0x3>
	Besttime_4 = Logger1_databytes[3];
     9ca:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Logger1_databytes+0x3>
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Besttime_4>
     9da:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <Besttime_4+0x1>
     9de:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <Besttime_4+0x2>
     9e2:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <Besttime_4+0x3>
	
	Besttime = Besttime_1 | Besttime_2 << 8 | Besttime_3 << 16 | Besttime_4 << 24;
     9e6:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <Besttime_1>
     9ea:	28 2f       	mov	r18, r24
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Besttime_2>
     9f2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Besttime_2+0x1>
     9f6:	98 2f       	mov	r25, r24
     9f8:	88 27       	eor	r24, r24
     9fa:	82 2b       	or	r24, r18
     9fc:	93 2b       	or	r25, r19
     9fe:	9c 01       	movw	r18, r24
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Besttime_3>
     a08:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Besttime_3+0x1>
     a0c:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <Besttime_3+0x2>
     a10:	b0 91 05 02 	lds	r27, 0x0205	; 0x800205 <Besttime_3+0x3>
     a14:	dc 01       	movw	r26, r24
     a16:	99 27       	eor	r25, r25
     a18:	88 27       	eor	r24, r24
     a1a:	28 2b       	or	r18, r24
     a1c:	39 2b       	or	r19, r25
     a1e:	4a 2b       	or	r20, r26
     a20:	5b 2b       	or	r21, r27
     a22:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Besttime_4>
     a26:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Besttime_4+0x1>
     a2a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <Besttime_4+0x2>
     a2e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <Besttime_4+0x3>
     a32:	b8 2f       	mov	r27, r24
     a34:	aa 27       	eor	r26, r26
     a36:	99 27       	eor	r25, r25
     a38:	88 27       	eor	r24, r24
     a3a:	82 2b       	or	r24, r18
     a3c:	93 2b       	or	r25, r19
     a3e:	a4 2b       	or	r26, r20
     a40:	b5 2b       	or	r27, r21
     a42:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Besttime>
     a46:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Besttime+0x1>
     a4a:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <Besttime+0x2>
     a4e:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <Besttime+0x3>
	
	Pred_time_1 = Logger1_databytes[4];
     a52:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <Logger1_databytes+0x4>
     a56:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Pred_time_1>
	Pred_time_2 = Logger1_databytes[5];
     a5a:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <Logger1_databytes+0x5>
     a5e:	88 2f       	mov	r24, r24
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <Pred_time_2+0x1>
     a66:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Pred_time_2>
	Pred_time_3 = Logger1_databytes[6];
     a6a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <Logger1_databytes+0x6>
     a6e:	88 2f       	mov	r24, r24
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Pred_time_3>
     a7a:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Pred_time_3+0x1>
     a7e:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <Pred_time_3+0x2>
     a82:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <Pred_time_3+0x3>
	Pred_time_4 = Logger1_databytes[7];
     a86:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <Logger1_databytes+0x7>
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Pred_time_4>
     a96:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Pred_time_4+0x1>
     a9a:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <Pred_time_4+0x2>
     a9e:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <Pred_time_4+0x3>
	
	Pred_time = Pred_time_1 | Pred_time_2 << 8 | Pred_time_3 << 16 | Pred_time_4 << 24;
     aa2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Pred_time_1>
     aa6:	28 2f       	mov	r18, r24
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Pred_time_2>
     aae:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <Pred_time_2+0x1>
     ab2:	98 2f       	mov	r25, r24
     ab4:	88 27       	eor	r24, r24
     ab6:	82 2b       	or	r24, r18
     ab8:	93 2b       	or	r25, r19
     aba:	9c 01       	movw	r18, r24
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Pred_time_3>
     ac4:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Pred_time_3+0x1>
     ac8:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <Pred_time_3+0x2>
     acc:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <Pred_time_3+0x3>
     ad0:	dc 01       	movw	r26, r24
     ad2:	99 27       	eor	r25, r25
     ad4:	88 27       	eor	r24, r24
     ad6:	28 2b       	or	r18, r24
     ad8:	39 2b       	or	r19, r25
     ada:	4a 2b       	or	r20, r26
     adc:	5b 2b       	or	r21, r27
     ade:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Pred_time_4>
     ae2:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Pred_time_4+0x1>
     ae6:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <Pred_time_4+0x2>
     aea:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <Pred_time_4+0x3>
     aee:	b8 2f       	mov	r27, r24
     af0:	aa 27       	eor	r26, r26
     af2:	99 27       	eor	r25, r25
     af4:	88 27       	eor	r24, r24
     af6:	82 2b       	or	r24, r18
     af8:	93 2b       	or	r25, r19
     afa:	a4 2b       	or	r26, r20
     afc:	b5 2b       	or	r27, r21
     afe:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Pred_time>
     b02:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Pred_time+0x1>
     b06:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <Pred_time+0x2>
     b0a:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <Pred_time+0x3>
	
	ODO = Logger0_databytes[6] << 8 | Logger0_databytes[5];
     b0e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <Logger0_databytes+0x6>
     b12:	88 2f       	mov	r24, r24
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	38 2f       	mov	r19, r24
     b18:	22 27       	eor	r18, r18
     b1a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <Logger0_databytes+0x5>
     b1e:	88 2f       	mov	r24, r24
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	82 2b       	or	r24, r18
     b24:	93 2b       	or	r25, r19
     b26:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <ODO+0x1>
     b2a:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <ODO>
	GPS_Speed = Logger2_databytes[7] << 8 | Logger2_databytes[6];
     b2e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <Logger2_databytes+0x7>
     b32:	88 2f       	mov	r24, r24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	38 2f       	mov	r19, r24
     b38:	22 27       	eor	r18, r18
     b3a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <Logger2_databytes+0x6>
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	82 2b       	or	r24, r18
     b44:	93 2b       	or	r25, r19
     b46:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <GPS_Speed+0x1>
     b4a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <GPS_Speed>
	LapNumber = Logger0_databytes[0];	
     b4e:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <Logger0_databytes>
     b52:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <LapNumber>
	
	//DIC0_databytes[0] = LC_Active;
	DIC0_databytes[2] = 1;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <DIC0_databytes+0x2>
}
     b5c:	00 00       	nop
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <toggle>:

void toggle(void)
{
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	DIC0_databytes[2] ^= (1 << 0);
     b6c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <DIC0_databytes+0x2>
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	89 27       	eor	r24, r25
     b74:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <DIC0_databytes+0x2>
     b78:	00 00       	nop
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <calc_BB>:
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <calc_BB+0xe>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	6a 83       	std	Y+2, r22	; 0x02
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	8a 30       	cpi	r24, 0x0A	; 10
     b9a:	08 f4       	brcc	.+2      	; 0xb9e <calc_BB+0x1e>
     b9c:	59 c0       	rjmp	.+178    	; 0xc50 <calc_BB+0xd0>
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	09 2e       	mov	r0, r25
     bb0:	00 0c       	add	r0, r0
     bb2:	aa 0b       	sbc	r26, r26
     bb4:	bb 0b       	sbc	r27, r27
     bb6:	bc 01       	movw	r22, r24
     bb8:	cd 01       	movw	r24, r26
     bba:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
     bbe:	dc 01       	movw	r26, r24
     bc0:	cb 01       	movw	r24, r22
     bc2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     bc6:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     bca:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     bce:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	09 2e       	mov	r0, r25
     bda:	00 0c       	add	r0, r0
     bdc:	aa 0b       	sbc	r26, r26
     bde:	bb 0b       	sbc	r27, r27
     be0:	bc 01       	movw	r22, r24
     be2:	cd 01       	movw	r24, r26
     be4:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
     be8:	7b 01       	movw	r14, r22
     bea:	8c 01       	movw	r16, r24
     bec:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     bf0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     bf4:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     bf8:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     bfc:	9c 01       	movw	r18, r24
     bfe:	ad 01       	movw	r20, r26
     c00:	c8 01       	movw	r24, r16
     c02:	b7 01       	movw	r22, r14
     c04:	0e 94 2b 13 	call	0x2656	; 0x2656 <__divsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c10:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c14:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c18:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c1c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c20:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c24:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c28:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	48 ec       	ldi	r20, 0xC8	; 200
     c32:	52 e4       	ldi	r21, 0x42	; 66
     c34:	bc 01       	movw	r22, r24
     c36:	cd 01       	movw	r24, r26
     c38:	0e 94 4d 14 	call	0x289a	; 0x289a <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c44:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c48:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c4c:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c50:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c54:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c58:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c5c:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 93 13 	call	0x2726	; 0x2726 <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	ff 90       	pop	r15
     c7a:	ef 90       	pop	r14
     c7c:	08 95       	ret

00000c7e <string_to_digit>:
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	27 97       	sbiw	r28, 0x07	; 7
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	8b 83       	std	Y+3, r24	; 0x03
     c94:	7d 83       	std	Y+5, r23	; 0x05
     c96:	6c 83       	std	Y+4, r22	; 0x04
     c98:	4e 83       	std	Y+6, r20	; 0x06
     c9a:	2f 83       	std	Y+7, r18	; 0x07
     c9c:	1a 82       	std	Y+2, r1	; 0x02
     c9e:	19 82       	std	Y+1, r1	; 0x01
     ca0:	2e c0       	rjmp	.+92     	; 0xcfe <string_to_digit+0x80>
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	68 2f       	mov	r22, r24
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	8f 81       	ldd	r24, Y+7	; 0x07
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	8e 81       	ldd	r24, Y+6	; 0x06
     cb0:	48 2f       	mov	r20, r24
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	84 0f       	add	r24, r20
     cba:	95 1f       	adc	r25, r21
     cbc:	ec 81       	ldd	r30, Y+4	; 0x04
     cbe:	fd 81       	ldd	r31, Y+5	; 0x05
     cc0:	49 81       	ldd	r20, Y+1	; 0x01
     cc2:	5a 81       	ldd	r21, Y+2	; 0x02
     cc4:	4e 0f       	add	r20, r30
     cc6:	5f 1f       	adc	r21, r31
     cc8:	da 01       	movw	r26, r20
     cca:	ec 91       	ld	r30, X
     ccc:	f4 e1       	ldi	r31, 0x14	; 20
     cce:	f2 9f       	mul	r31, r18
     cd0:	a0 01       	movw	r20, r0
     cd2:	f3 9f       	mul	r31, r19
     cd4:	50 0d       	add	r21, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	f0 e5       	ldi	r31, 0x50	; 80
     cda:	f6 9f       	mul	r31, r22
     cdc:	90 01       	movw	r18, r0
     cde:	f7 9f       	mul	r31, r23
     ce0:	30 0d       	add	r19, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	24 0f       	add	r18, r20
     ce6:	35 1f       	adc	r19, r21
     ce8:	82 0f       	add	r24, r18
     cea:	93 1f       	adc	r25, r19
     cec:	82 5f       	subi	r24, 0xF2	; 242
     cee:	9c 4f       	sbci	r25, 0xFC	; 252
     cf0:	dc 01       	movw	r26, r24
     cf2:	ec 93       	st	X, r30
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	9d 81       	ldd	r25, Y+5	; 0x05
     d02:	0e 94 08 15 	call	0x2a10	; 0x2a10 <strlen>
     d06:	9c 01       	movw	r18, r24
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	82 17       	cp	r24, r18
     d0e:	93 07       	cpc	r25, r19
     d10:	40 f2       	brcs	.-112    	; 0xca2 <string_to_digit+0x24>
     d12:	00 00       	nop
     d14:	27 96       	adiw	r28, 0x07	; 7
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <num_to_digit>:
     d26:	ef 92       	push	r14
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	62 97       	sbiw	r28, 0x12	; 18
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	8a 87       	std	Y+10, r24	; 0x0a
     d42:	7c 87       	std	Y+12, r23	; 0x0c
     d44:	6b 87       	std	Y+11, r22	; 0x0b
     d46:	4d 87       	std	Y+13, r20	; 0x0d
     d48:	2e 87       	std	Y+14, r18	; 0x0e
     d4a:	0f 87       	std	Y+15, r16	; 0x0f
     d4c:	e8 8a       	std	Y+16, r14	; 0x10
     d4e:	4d b7       	in	r20, 0x3d	; 61
     d50:	5e b7       	in	r21, 0x3e	; 62
     d52:	5a 8b       	std	Y+18, r21	; 0x12
     d54:	49 8b       	std	Y+17, r20	; 0x11
     d56:	8d b7       	in	r24, 0x3d	; 61
     d58:	9e b7       	in	r25, 0x3e	; 62
     d5a:	8c 01       	movw	r16, r24
     d5c:	2e 85       	ldd	r18, Y+14	; 0x0e
     d5e:	82 2f       	mov	r24, r18
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	9e 83       	std	Y+6, r25	; 0x06
     d66:	8d 83       	std	Y+5, r24	; 0x05
     d68:	82 2f       	mov	r24, r18
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	6d b7       	in	r22, 0x3d	; 61
     d6e:	7e b7       	in	r23, 0x3e	; 62
     d70:	68 1b       	sub	r22, r24
     d72:	79 0b       	sbc	r23, r25
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	7e bf       	out	0x3e, r23	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	6d bf       	out	0x3d, r22	; 61
     d7e:	8d b7       	in	r24, 0x3d	; 61
     d80:	9e b7       	in	r25, 0x3e	; 62
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	98 87       	std	Y+8, r25	; 0x08
     d86:	8f 83       	std	Y+7, r24	; 0x07
     d88:	19 82       	std	Y+1, r1	; 0x01
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8a 83       	std	Y+2, r24	; 0x02
     d8e:	40 c0       	rjmp	.+128    	; 0xe10 <num_to_digit+0xea>
     d90:	4b 85       	ldd	r20, Y+11	; 0x0b
     d92:	5c 85       	ldd	r21, Y+12	; 0x0c
     d94:	9a 01       	movw	r18, r20
     d96:	ad ec       	ldi	r26, 0xCD	; 205
     d98:	bc ec       	ldi	r27, 0xCC	; 204
     d9a:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
     d9e:	96 95       	lsr	r25
     da0:	87 95       	ror	r24
     da2:	96 95       	lsr	r25
     da4:	87 95       	ror	r24
     da6:	96 95       	lsr	r25
     da8:	87 95       	ror	r24
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	9c 01       	movw	r18, r24
     db0:	22 0f       	add	r18, r18
     db2:	33 1f       	adc	r19, r19
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	da 01       	movw	r26, r20
     dbe:	a8 1b       	sub	r26, r24
     dc0:	b9 0b       	sbc	r27, r25
     dc2:	cd 01       	movw	r24, r26
     dc4:	89 87       	std	Y+9, r24	; 0x09
     dc6:	8e 85       	ldd	r24, Y+14	; 0x0e
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	88 2f       	mov	r24, r24
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	f9 01       	movw	r30, r18
     dd4:	e8 1b       	sub	r30, r24
     dd6:	f9 0b       	sbc	r31, r25
     dd8:	cf 01       	movw	r24, r30
     dda:	29 85       	ldd	r18, Y+9	; 0x09
     ddc:	40 e3       	ldi	r20, 0x30	; 48
     dde:	42 0f       	add	r20, r18
     de0:	2f 81       	ldd	r18, Y+7	; 0x07
     de2:	38 85       	ldd	r19, Y+8	; 0x08
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	dc 01       	movw	r26, r24
     dea:	4c 93       	st	X, r20
     dec:	8b 85       	ldd	r24, Y+11	; 0x0b
     dee:	9c 85       	ldd	r25, Y+12	; 0x0c
     df0:	9c 01       	movw	r18, r24
     df2:	ad ec       	ldi	r26, 0xCD	; 205
     df4:	bc ec       	ldi	r27, 0xCC	; 204
     df6:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	96 95       	lsr	r25
     e00:	87 95       	ror	r24
     e02:	96 95       	lsr	r25
     e04:	87 95       	ror	r24
     e06:	9c 87       	std	Y+12, r25	; 0x0c
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	8e 85       	ldd	r24, Y+14	; 0x0e
     e14:	89 17       	cp	r24, r25
     e16:	08 f0       	brcs	.+2      	; 0xe1a <num_to_digit+0xf4>
     e18:	bb cf       	rjmp	.-138    	; 0xd90 <num_to_digit+0x6a>
     e1a:	1b 82       	std	Y+3, r1	; 0x03
     e1c:	1c 82       	std	Y+4, r1	; 0x04
     e1e:	c8 c0       	rjmp	.+400    	; 0xfb0 <num_to_digit+0x28a>
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	2f 81       	ldd	r18, Y+7	; 0x07
     e28:	38 85       	ldd	r19, Y+8	; 0x08
     e2a:	82 0f       	add	r24, r18
     e2c:	93 1f       	adc	r25, r19
     e2e:	fc 01       	movw	r30, r24
     e30:	80 81       	ld	r24, Z
     e32:	80 33       	cpi	r24, 0x30	; 48
     e34:	11 f0       	breq	.+4      	; 0xe3a <num_to_digit+0x114>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	61 e0       	ldi	r22, 0x01	; 1
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	88 23       	and	r24, r24
     e40:	09 f0       	breq	.+2      	; 0xe44 <num_to_digit+0x11e>
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	8c 81       	ldd	r24, Y+4	; 0x04
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e4c:	48 2f       	mov	r20, r24
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	8d 85       	ldd	r24, Y+13	; 0x0d
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	da 01       	movw	r26, r20
     e58:	a8 1b       	sub	r26, r24
     e5a:	b9 0b       	sbc	r27, r25
     e5c:	cd 01       	movw	r24, r26
     e5e:	02 97       	sbiw	r24, 0x02	; 2
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	28 17       	cp	r18, r24
     e64:	39 07       	cpc	r19, r25
     e66:	0c f0       	brlt	.+2      	; 0xe6a <num_to_digit+0x144>
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	86 2f       	mov	r24, r22
     e6c:	84 23       	and	r24, r20
     e6e:	88 23       	and	r24, r24
     e70:	51 f0       	breq	.+20     	; 0xe86 <num_to_digit+0x160>
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	2f 81       	ldd	r18, Y+7	; 0x07
     e7a:	38 85       	ldd	r19, Y+8	; 0x08
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	20 e1       	ldi	r18, 0x10	; 16
     e82:	fc 01       	movw	r30, r24
     e84:	20 83       	st	Z, r18
     e86:	8c 81       	ldd	r24, Y+4	; 0x04
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e8e:	48 2f       	mov	r20, r24
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	ba 01       	movw	r22, r20
     e9a:	68 1b       	sub	r22, r24
     e9c:	79 0b       	sbc	r23, r25
     e9e:	cb 01       	movw	r24, r22
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	64 f5       	brge	.+88     	; 0xefe <num_to_digit+0x1d8>
     ea6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ea8:	68 2f       	mov	r22, r24
     eaa:	70 e0       	ldi	r23, 0x00	; 0
     eac:	88 89       	ldd	r24, Y+16	; 0x10
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb4:	48 2f       	mov	r20, r24
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	84 0f       	add	r24, r20
     ec0:	95 1f       	adc	r25, r21
     ec2:	4c 81       	ldd	r20, Y+4	; 0x04
     ec4:	44 2f       	mov	r20, r20
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	af 81       	ldd	r26, Y+7	; 0x07
     eca:	b8 85       	ldd	r27, Y+8	; 0x08
     ecc:	4a 0f       	add	r20, r26
     ece:	5b 1f       	adc	r21, r27
     ed0:	fa 01       	movw	r30, r20
     ed2:	a0 81       	ld	r26, Z
     ed4:	b4 e1       	ldi	r27, 0x14	; 20
     ed6:	b2 9f       	mul	r27, r18
     ed8:	a0 01       	movw	r20, r0
     eda:	b3 9f       	mul	r27, r19
     edc:	50 0d       	add	r21, r0
     ede:	11 24       	eor	r1, r1
     ee0:	b0 e5       	ldi	r27, 0x50	; 80
     ee2:	b6 9f       	mul	r27, r22
     ee4:	90 01       	movw	r18, r0
     ee6:	b7 9f       	mul	r27, r23
     ee8:	30 0d       	add	r19, r0
     eea:	11 24       	eor	r1, r1
     eec:	24 0f       	add	r18, r20
     eee:	35 1f       	adc	r19, r21
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	82 5f       	subi	r24, 0xF2	; 242
     ef6:	9c 4f       	sbci	r25, 0xFC	; 252
     ef8:	fc 01       	movw	r30, r24
     efa:	a0 83       	st	Z, r26
     efc:	56 c0       	rjmp	.+172    	; 0xfaa <num_to_digit+0x284>
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	88 23       	and	r24, r24
     f02:	29 f5       	brne	.+74     	; 0xf4e <num_to_digit+0x228>
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	68 2f       	mov	r22, r24
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	88 89       	ldd	r24, Y+16	; 0x10
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8f 85       	ldd	r24, Y+15	; 0x0f
     f12:	48 2f       	mov	r20, r24
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	84 0f       	add	r24, r20
     f1e:	95 1f       	adc	r25, r21
     f20:	a4 e1       	ldi	r26, 0x14	; 20
     f22:	a2 9f       	mul	r26, r18
     f24:	a0 01       	movw	r20, r0
     f26:	a3 9f       	mul	r26, r19
     f28:	50 0d       	add	r21, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	a0 e5       	ldi	r26, 0x50	; 80
     f2e:	a6 9f       	mul	r26, r22
     f30:	90 01       	movw	r18, r0
     f32:	a7 9f       	mul	r26, r23
     f34:	30 0d       	add	r19, r0
     f36:	11 24       	eor	r1, r1
     f38:	24 0f       	add	r18, r20
     f3a:	35 1f       	adc	r19, r21
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	82 5f       	subi	r24, 0xF2	; 242
     f42:	9c 4f       	sbci	r25, 0xFC	; 252
     f44:	2e e2       	ldi	r18, 0x2E	; 46
     f46:	dc 01       	movw	r26, r24
     f48:	2c 93       	st	X, r18
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     f50:	68 2f       	mov	r22, r24
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	88 89       	ldd	r24, Y+16	; 0x10
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5c:	88 2f       	mov	r24, r24
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	ac 01       	movw	r20, r24
     f62:	4f 5f       	subi	r20, 0xFF	; 255
     f64:	5f 4f       	sbci	r21, 0xFF	; 255
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	84 0f       	add	r24, r20
     f6e:	95 1f       	adc	r25, r21
     f70:	4c 81       	ldd	r20, Y+4	; 0x04
     f72:	44 2f       	mov	r20, r20
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	af 81       	ldd	r26, Y+7	; 0x07
     f78:	b8 85       	ldd	r27, Y+8	; 0x08
     f7a:	4a 0f       	add	r20, r26
     f7c:	5b 1f       	adc	r21, r27
     f7e:	fa 01       	movw	r30, r20
     f80:	a0 81       	ld	r26, Z
     f82:	b4 e1       	ldi	r27, 0x14	; 20
     f84:	b2 9f       	mul	r27, r18
     f86:	a0 01       	movw	r20, r0
     f88:	b3 9f       	mul	r27, r19
     f8a:	50 0d       	add	r21, r0
     f8c:	11 24       	eor	r1, r1
     f8e:	b0 e5       	ldi	r27, 0x50	; 80
     f90:	b6 9f       	mul	r27, r22
     f92:	90 01       	movw	r18, r0
     f94:	b7 9f       	mul	r27, r23
     f96:	30 0d       	add	r19, r0
     f98:	11 24       	eor	r1, r1
     f9a:	24 0f       	add	r18, r20
     f9c:	35 1f       	adc	r19, r21
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	82 5f       	subi	r24, 0xF2	; 242
     fa4:	9c 4f       	sbci	r25, 0xFC	; 252
     fa6:	fc 01       	movw	r30, r24
     fa8:	a0 83       	st	Z, r26
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	8c 83       	std	Y+4, r24	; 0x04
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fb4:	98 17       	cp	r25, r24
     fb6:	08 f4       	brcc	.+2      	; 0xfba <num_to_digit+0x294>
     fb8:	33 cf       	rjmp	.-410    	; 0xe20 <num_to_digit+0xfa>
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	1e bf       	out	0x3e, r17	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0d bf       	out	0x3d, r16	; 61
     fc4:	00 00       	nop
     fc6:	49 89       	ldd	r20, Y+17	; 0x11
     fc8:	5a 89       	ldd	r21, Y+18	; 0x12
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	5e bf       	out	0x3e, r21	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	4d bf       	out	0x3d, r20	; 61
     fd4:	62 96       	adiw	r28, 0x12	; 18
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ef 90       	pop	r14
     fea:	08 95       	ret

00000fec <time_to_digit>:
     fec:	0f 93       	push	r16
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	63 97       	sbiw	r28, 0x13	; 19
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	8d 87       	std	Y+13, r24	; 0x0d
    1004:	4e 87       	std	Y+14, r20	; 0x0e
    1006:	5f 87       	std	Y+15, r21	; 0x0f
    1008:	68 8b       	std	Y+16, r22	; 0x10
    100a:	79 8b       	std	Y+17, r23	; 0x11
    100c:	2a 8b       	std	Y+18, r18	; 0x12
    100e:	0b 8b       	std	Y+19, r16	; 0x13
    1010:	8e 85       	ldd	r24, Y+14	; 0x0e
    1012:	9f 85       	ldd	r25, Y+15	; 0x0f
    1014:	a8 89       	ldd	r26, Y+16	; 0x10
    1016:	b9 89       	ldd	r27, Y+17	; 0x11
    1018:	28 ee       	ldi	r18, 0xE8	; 232
    101a:	33 e0       	ldi	r19, 0x03	; 3
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	8e 85       	ldd	r24, Y+14	; 0x0e
    1032:	9f 85       	ldd	r25, Y+15	; 0x0f
    1034:	a8 89       	ldd	r26, Y+16	; 0x10
    1036:	b9 89       	ldd	r27, Y+17	; 0x11
    1038:	28 ee       	ldi	r18, 0xE8	; 232
    103a:	33 e0       	ldi	r19, 0x03	; 3
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	bc 01       	movw	r22, r24
    1042:	cd 01       	movw	r24, r26
    1044:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    1048:	da 01       	movw	r26, r20
    104a:	c9 01       	movw	r24, r18
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	9c 01       	movw	r18, r24
    1056:	a9 e8       	ldi	r26, 0x89	; 137
    1058:	b8 e8       	ldi	r27, 0x88	; 136
    105a:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    105e:	96 95       	lsr	r25
    1060:	87 95       	ror	r24
    1062:	92 95       	swap	r25
    1064:	82 95       	swap	r24
    1066:	8f 70       	andi	r24, 0x0F	; 15
    1068:	89 27       	eor	r24, r25
    106a:	9f 70       	andi	r25, 0x0F	; 15
    106c:	89 27       	eor	r24, r25
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	8e 85       	ldd	r24, Y+14	; 0x0e
    1074:	9f 85       	ldd	r25, Y+15	; 0x0f
    1076:	a8 89       	ldd	r26, Y+16	; 0x10
    1078:	b9 89       	ldd	r27, Y+17	; 0x11
    107a:	28 ee       	ldi	r18, 0xE8	; 232
    107c:	33 e0       	ldi	r19, 0x03	; 3
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 d7 14 	call	0x29ae	; 0x29ae <__udivmodsi4>
    108a:	da 01       	movw	r26, r20
    108c:	c9 01       	movw	r24, r18
    108e:	9e 83       	std	Y+6, r25	; 0x06
    1090:	8d 83       	std	Y+5, r24	; 0x05
    1092:	4d 81       	ldd	r20, Y+5	; 0x05
    1094:	5e 81       	ldd	r21, Y+6	; 0x06
    1096:	9a 01       	movw	r18, r20
    1098:	a9 e8       	ldi	r26, 0x89	; 137
    109a:	b8 e8       	ldi	r27, 0x88	; 136
    109c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    10a0:	9c 01       	movw	r18, r24
    10a2:	36 95       	lsr	r19
    10a4:	27 95       	ror	r18
    10a6:	32 95       	swap	r19
    10a8:	22 95       	swap	r18
    10aa:	2f 70       	andi	r18, 0x0F	; 15
    10ac:	23 27       	eor	r18, r19
    10ae:	3f 70       	andi	r19, 0x0F	; 15
    10b0:	23 27       	eor	r18, r19
    10b2:	6c e3       	ldi	r22, 0x3C	; 60
    10b4:	62 9f       	mul	r22, r18
    10b6:	c0 01       	movw	r24, r0
    10b8:	63 9f       	mul	r22, r19
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	9a 01       	movw	r18, r20
    10c0:	28 1b       	sub	r18, r24
    10c2:	39 0b       	sbc	r19, r25
    10c4:	c9 01       	movw	r24, r18
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	1f 82       	std	Y+7, r1	; 0x07
    10cc:	58 c0       	rjmp	.+176    	; 0x117e <__stack+0x7f>
    10ce:	49 81       	ldd	r20, Y+1	; 0x01
    10d0:	5a 81       	ldd	r21, Y+2	; 0x02
    10d2:	9a 01       	movw	r18, r20
    10d4:	ad ec       	ldi	r26, 0xCD	; 205
    10d6:	bc ec       	ldi	r27, 0xCC	; 204
    10d8:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    10dc:	96 95       	lsr	r25
    10de:	87 95       	ror	r24
    10e0:	96 95       	lsr	r25
    10e2:	87 95       	ror	r24
    10e4:	96 95       	lsr	r25
    10e6:	87 95       	ror	r24
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	9c 01       	movw	r18, r24
    10ee:	22 0f       	add	r18, r18
    10f0:	33 1f       	adc	r19, r19
    10f2:	22 0f       	add	r18, r18
    10f4:	33 1f       	adc	r19, r19
    10f6:	82 0f       	add	r24, r18
    10f8:	93 1f       	adc	r25, r19
    10fa:	fa 01       	movw	r30, r20
    10fc:	e8 1b       	sub	r30, r24
    10fe:	f9 0b       	sbc	r31, r25
    1100:	cf 01       	movw	r24, r30
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	8b 85       	ldd	r24, Y+11	; 0x0b
    1106:	80 5d       	subi	r24, 0xD0	; 208
    1108:	8b 87       	std	Y+11, r24	; 0x0b
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	9c 01       	movw	r18, r24
    1110:	ad ec       	ldi	r26, 0xCD	; 205
    1112:	bc ec       	ldi	r27, 0xCC	; 204
    1114:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	96 95       	lsr	r25
    111e:	87 95       	ror	r24
    1120:	96 95       	lsr	r25
    1122:	87 95       	ror	r24
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	8d 85       	ldd	r24, Y+13	; 0x0d
    112a:	68 2f       	mov	r22, r24
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	8b 89       	ldd	r24, Y+19	; 0x13
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8a 89       	ldd	r24, Y+18	; 0x12
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	ac 01       	movw	r20, r24
    113c:	49 5f       	subi	r20, 0xF9	; 249
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	8f 81       	ldd	r24, Y+7	; 0x07
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	fa 01       	movw	r30, r20
    1148:	e8 1b       	sub	r30, r24
    114a:	f9 0b       	sbc	r31, r25
    114c:	cf 01       	movw	r24, r30
    114e:	e4 e1       	ldi	r30, 0x14	; 20
    1150:	e2 9f       	mul	r30, r18
    1152:	a0 01       	movw	r20, r0
    1154:	e3 9f       	mul	r30, r19
    1156:	50 0d       	add	r21, r0
    1158:	11 24       	eor	r1, r1
    115a:	e0 e5       	ldi	r30, 0x50	; 80
    115c:	e6 9f       	mul	r30, r22
    115e:	90 01       	movw	r18, r0
    1160:	e7 9f       	mul	r30, r23
    1162:	30 0d       	add	r19, r0
    1164:	11 24       	eor	r1, r1
    1166:	24 0f       	add	r18, r20
    1168:	35 1f       	adc	r19, r21
    116a:	82 0f       	add	r24, r18
    116c:	93 1f       	adc	r25, r19
    116e:	82 5f       	subi	r24, 0xF2	; 242
    1170:	9c 4f       	sbci	r25, 0xFC	; 252
    1172:	2b 85       	ldd	r18, Y+11	; 0x0b
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	8f 5f       	subi	r24, 0xFF	; 255
    117c:	8f 83       	std	Y+7, r24	; 0x07
    117e:	8f 81       	ldd	r24, Y+7	; 0x07
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	08 f4       	brcc	.+2      	; 0x1186 <__stack+0x87>
    1184:	a4 cf       	rjmp	.-184    	; 0x10ce <time_to_digit+0xe2>
    1186:	18 86       	std	Y+8, r1	; 0x08
    1188:	58 c0       	rjmp	.+176    	; 0x123a <__stack+0x13b>
    118a:	4d 81       	ldd	r20, Y+5	; 0x05
    118c:	5e 81       	ldd	r21, Y+6	; 0x06
    118e:	9a 01       	movw	r18, r20
    1190:	ad ec       	ldi	r26, 0xCD	; 205
    1192:	bc ec       	ldi	r27, 0xCC	; 204
    1194:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	96 95       	lsr	r25
    119e:	87 95       	ror	r24
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	9c 01       	movw	r18, r24
    11aa:	22 0f       	add	r18, r18
    11ac:	33 1f       	adc	r19, r19
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	82 0f       	add	r24, r18
    11b4:	93 1f       	adc	r25, r19
    11b6:	9a 01       	movw	r18, r20
    11b8:	28 1b       	sub	r18, r24
    11ba:	39 0b       	sbc	r19, r25
    11bc:	c9 01       	movw	r24, r18
    11be:	8c 87       	std	Y+12, r24	; 0x0c
    11c0:	8c 85       	ldd	r24, Y+12	; 0x0c
    11c2:	80 5d       	subi	r24, 0xD0	; 208
    11c4:	8c 87       	std	Y+12, r24	; 0x0c
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	9c 01       	movw	r18, r24
    11cc:	ad ec       	ldi	r26, 0xCD	; 205
    11ce:	bc ec       	ldi	r27, 0xCC	; 204
    11d0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	96 95       	lsr	r25
    11de:	87 95       	ror	r24
    11e0:	9e 83       	std	Y+6, r25	; 0x06
    11e2:	8d 83       	std	Y+5, r24	; 0x05
    11e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    11e6:	68 2f       	mov	r22, r24
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	8b 89       	ldd	r24, Y+19	; 0x13
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	8a 89       	ldd	r24, Y+18	; 0x12
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	ac 01       	movw	r20, r24
    11f8:	4d 5f       	subi	r20, 0xFD	; 253
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
    11fc:	88 85       	ldd	r24, Y+8	; 0x08
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	fa 01       	movw	r30, r20
    1204:	e8 1b       	sub	r30, r24
    1206:	f9 0b       	sbc	r31, r25
    1208:	cf 01       	movw	r24, r30
    120a:	e4 e1       	ldi	r30, 0x14	; 20
    120c:	e2 9f       	mul	r30, r18
    120e:	a0 01       	movw	r20, r0
    1210:	e3 9f       	mul	r30, r19
    1212:	50 0d       	add	r21, r0
    1214:	11 24       	eor	r1, r1
    1216:	e0 e5       	ldi	r30, 0x50	; 80
    1218:	e6 9f       	mul	r30, r22
    121a:	90 01       	movw	r18, r0
    121c:	e7 9f       	mul	r30, r23
    121e:	30 0d       	add	r19, r0
    1220:	11 24       	eor	r1, r1
    1222:	24 0f       	add	r18, r20
    1224:	35 1f       	adc	r19, r21
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	82 5f       	subi	r24, 0xF2	; 242
    122c:	9c 4f       	sbci	r25, 0xFC	; 252
    122e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
    1234:	88 85       	ldd	r24, Y+8	; 0x08
    1236:	8f 5f       	subi	r24, 0xFF	; 255
    1238:	88 87       	std	Y+8, r24	; 0x08
    123a:	88 85       	ldd	r24, Y+8	; 0x08
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	08 f4       	brcc	.+2      	; 0x1242 <__stack+0x143>
    1240:	a4 cf       	rjmp	.-184    	; 0x118a <__stack+0x8b>
    1242:	19 86       	std	Y+9, r1	; 0x09
    1244:	66 c0       	rjmp	.+204    	; 0x1312 <__stack+0x213>
    1246:	4b 81       	ldd	r20, Y+3	; 0x03
    1248:	5c 81       	ldd	r21, Y+4	; 0x04
    124a:	9a 01       	movw	r18, r20
    124c:	ad ec       	ldi	r26, 0xCD	; 205
    124e:	bc ec       	ldi	r27, 0xCC	; 204
    1250:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	96 95       	lsr	r25
    125a:	87 95       	ror	r24
    125c:	96 95       	lsr	r25
    125e:	87 95       	ror	r24
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	9c 01       	movw	r18, r24
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	22 0f       	add	r18, r18
    126c:	33 1f       	adc	r19, r19
    126e:	82 0f       	add	r24, r18
    1270:	93 1f       	adc	r25, r19
    1272:	9a 01       	movw	r18, r20
    1274:	28 1b       	sub	r18, r24
    1276:	39 0b       	sbc	r19, r25
    1278:	c9 01       	movw	r24, r18
    127a:	8a 87       	std	Y+10, r24	; 0x0a
    127c:	8a 85       	ldd	r24, Y+10	; 0x0a
    127e:	80 5d       	subi	r24, 0xD0	; 208
    1280:	8a 87       	std	Y+10, r24	; 0x0a
    1282:	31 e0       	ldi	r19, 0x01	; 1
    1284:	8a 85       	ldd	r24, Y+10	; 0x0a
    1286:	80 33       	cpi	r24, 0x30	; 48
    1288:	09 f0       	breq	.+2      	; 0x128c <__stack+0x18d>
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	21 e0       	ldi	r18, 0x01	; 1
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	9c 81       	ldd	r25, Y+4	; 0x04
    1292:	0a 97       	sbiw	r24, 0x0a	; 10
    1294:	08 f0       	brcs	.+2      	; 0x1298 <__stack+0x199>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	83 2f       	mov	r24, r19
    129a:	82 23       	and	r24, r18
    129c:	88 23       	and	r24, r24
    129e:	11 f0       	breq	.+4      	; 0x12a4 <__stack+0x1a5>
    12a0:	80 e1       	ldi	r24, 0x10	; 16
    12a2:	8a 87       	std	Y+10, r24	; 0x0a
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	9c 01       	movw	r18, r24
    12aa:	ad ec       	ldi	r26, 0xCD	; 205
    12ac:	bc ec       	ldi	r27, 0xCC	; 204
    12ae:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <__umulhisi3>
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	96 95       	lsr	r25
    12b8:	87 95       	ror	r24
    12ba:	96 95       	lsr	r25
    12bc:	87 95       	ror	r24
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
    12c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c4:	68 2f       	mov	r22, r24
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8a 89       	ldd	r24, Y+18	; 0x12
    12d0:	48 2f       	mov	r20, r24
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	89 85       	ldd	r24, Y+9	; 0x09
    12d6:	88 2f       	mov	r24, r24
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	fa 01       	movw	r30, r20
    12dc:	e8 1b       	sub	r30, r24
    12de:	f9 0b       	sbc	r31, r25
    12e0:	cf 01       	movw	r24, r30
    12e2:	e4 e1       	ldi	r30, 0x14	; 20
    12e4:	e2 9f       	mul	r30, r18
    12e6:	a0 01       	movw	r20, r0
    12e8:	e3 9f       	mul	r30, r19
    12ea:	50 0d       	add	r21, r0
    12ec:	11 24       	eor	r1, r1
    12ee:	e0 e5       	ldi	r30, 0x50	; 80
    12f0:	e6 9f       	mul	r30, r22
    12f2:	90 01       	movw	r18, r0
    12f4:	e7 9f       	mul	r30, r23
    12f6:	30 0d       	add	r19, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	24 0f       	add	r18, r20
    12fc:	35 1f       	adc	r19, r21
    12fe:	82 0f       	add	r24, r18
    1300:	93 1f       	adc	r25, r19
    1302:	82 5f       	subi	r24, 0xF2	; 242
    1304:	9c 4f       	sbci	r25, 0xFC	; 252
    1306:	2a 85       	ldd	r18, Y+10	; 0x0a
    1308:	fc 01       	movw	r30, r24
    130a:	20 83       	st	Z, r18
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	8f 5f       	subi	r24, 0xFF	; 255
    1310:	89 87       	std	Y+9, r24	; 0x09
    1312:	89 85       	ldd	r24, Y+9	; 0x09
    1314:	82 30       	cpi	r24, 0x02	; 2
    1316:	08 f4       	brcc	.+2      	; 0x131a <__stack+0x21b>
    1318:	96 cf       	rjmp	.-212    	; 0x1246 <__stack+0x147>
    131a:	00 00       	nop
    131c:	63 96       	adiw	r28, 0x13	; 19
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	0f 91       	pop	r16
    132e:	08 95       	ret

00001330 <dsp_clear>:
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	00 d0       	rcall	.+0      	; 0x1336 <dsp_clear+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <dsp_clear+0x8>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	1a 82       	std	Y+2, r1	; 0x02
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	56 c0       	rjmp	.+172    	; 0x13ee <dsp_clear+0xbe>
    1342:	1c 82       	std	Y+4, r1	; 0x04
    1344:	1b 82       	std	Y+3, r1	; 0x03
    1346:	49 c0       	rjmp	.+146    	; 0x13da <dsp_clear+0xaa>
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	44 e1       	ldi	r20, 0x14	; 20
    134e:	48 9f       	mul	r20, r24
    1350:	90 01       	movw	r18, r0
    1352:	49 9f       	mul	r20, r25
    1354:	30 0d       	add	r19, r0
    1356:	11 24       	eor	r1, r1
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	82 0f       	add	r24, r18
    135e:	93 1f       	adc	r25, r19
    1360:	82 5f       	subi	r24, 0xF2	; 242
    1362:	9c 4f       	sbci	r25, 0xFC	; 252
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	fc 01       	movw	r30, r24
    1368:	20 83       	st	Z, r18
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	44 e1       	ldi	r20, 0x14	; 20
    1370:	48 9f       	mul	r20, r24
    1372:	90 01       	movw	r18, r0
    1374:	49 9f       	mul	r20, r25
    1376:	30 0d       	add	r19, r0
    1378:	11 24       	eor	r1, r1
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	82 5a       	subi	r24, 0xA2	; 162
    1384:	9c 4f       	sbci	r25, 0xFC	; 252
    1386:	20 e1       	ldi	r18, 0x10	; 16
    1388:	fc 01       	movw	r30, r24
    138a:	20 83       	st	Z, r18
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	44 e1       	ldi	r20, 0x14	; 20
    1392:	48 9f       	mul	r20, r24
    1394:	90 01       	movw	r18, r0
    1396:	49 9f       	mul	r20, r25
    1398:	30 0d       	add	r19, r0
    139a:	11 24       	eor	r1, r1
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	82 55       	subi	r24, 0x52	; 82
    13a6:	9c 4f       	sbci	r25, 0xFC	; 252
    13a8:	20 e1       	ldi	r18, 0x10	; 16
    13aa:	fc 01       	movw	r30, r24
    13ac:	20 83       	st	Z, r18
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	44 e1       	ldi	r20, 0x14	; 20
    13b4:	48 9f       	mul	r20, r24
    13b6:	90 01       	movw	r18, r0
    13b8:	49 9f       	mul	r20, r25
    13ba:	30 0d       	add	r19, r0
    13bc:	11 24       	eor	r1, r1
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	82 0f       	add	r24, r18
    13c4:	93 1f       	adc	r25, r19
    13c6:	82 50       	subi	r24, 0x02	; 2
    13c8:	9c 4f       	sbci	r25, 0xFC	; 252
    13ca:	20 e1       	ldi	r18, 0x10	; 16
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	44 97       	sbiw	r24, 0x14	; 20
    13e0:	0c f4       	brge	.+2      	; 0x13e4 <dsp_clear+0xb4>
    13e2:	b2 cf       	rjmp	.-156    	; 0x1348 <dsp_clear+0x18>
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	04 97       	sbiw	r24, 0x04	; 4
    13f4:	0c f4       	brge	.+2      	; 0x13f8 <dsp_clear+0xc8>
    13f6:	a5 cf       	rjmp	.-182    	; 0x1342 <dsp_clear+0x12>
    13f8:	00 00       	nop
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <dsp_arrayinit_static>:
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	84 e5       	ldi	r24, 0x54	; 84
    1412:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <dsp_data>
    1416:	83 e5       	ldi	r24, 0x53	; 83
    1418:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <dsp_data+0x1>
    141c:	86 e5       	ldi	r24, 0x56	; 86
    141e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <dsp_data+0x2>
    1422:	83 e5       	ldi	r24, 0x53	; 83
    1424:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <dsp_data+0xa>
    1428:	80 e5       	ldi	r24, 0x50	; 80
    142a:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <dsp_data+0xb>
    142e:	84 e4       	ldi	r24, 0x44	; 68
    1430:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <dsp_data+0xc>
    1434:	83 e4       	ldi	r24, 0x43	; 67
    1436:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <dsp_data+0x14>
    143a:	8f e4       	ldi	r24, 0x4F	; 79
    143c:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <dsp_data+0x15>
    1440:	8f e4       	ldi	r24, 0x4F	; 79
    1442:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <dsp_data+0x16>
    1446:	8c e4       	ldi	r24, 0x4C	; 76
    1448:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <dsp_data+0x17>
    144c:	81 e4       	ldi	r24, 0x41	; 65
    144e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <dsp_data+0x1e>
    1452:	83 e4       	ldi	r24, 0x43	; 67
    1454:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <dsp_data+0x1f>
    1458:	84 e5       	ldi	r24, 0x54	; 84
    145a:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <dsp_data+0x20>
    145e:	82 e4       	ldi	r24, 0x42	; 66
    1460:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <dsp_data+0x28>
    1464:	82 e4       	ldi	r24, 0x42	; 66
    1466:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <dsp_data+0x29>
    146a:	83 e5       	ldi	r24, 0x53	; 83
    146c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <dsp_data+0x32>
    1470:	8f e4       	ldi	r24, 0x4F	; 79
    1472:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <dsp_data+0x33>
    1476:	83 e4       	ldi	r24, 0x43	; 67
    1478:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <dsp_data+0x34>
    147c:	8c e4       	ldi	r24, 0x4C	; 76
    147e:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <dsp_data+0x46>
    1482:	86 e5       	ldi	r24, 0x56	; 86
    1484:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <dsp_data+0x47>
    1488:	83 e5       	ldi	r24, 0x53	; 83
    148a:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <dsp_data+0x48>
    148e:	86 e5       	ldi	r24, 0x56	; 86
    1490:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <dsp_data+0x8>
    1494:	8b e4       	ldi	r24, 0x4B	; 75
    1496:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <dsp_data+0x11>
    149a:	8d e4       	ldi	r24, 0x4D	; 77
    149c:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <dsp_data+0x12>
    14a0:	88 e4       	ldi	r24, 0x48	; 72
    14a2:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <dsp_data+0x13>
    14a6:	83 e4       	ldi	r24, 0x43	; 67
    14a8:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <dsp_data+0x1c>
    14ac:	83 e4       	ldi	r24, 0x43	; 67
    14ae:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <dsp_data+0x25>
    14b2:	8d e2       	ldi	r24, 0x2D	; 45
    14b4:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <dsp_data+0x30>
    14b8:	85 e2       	ldi	r24, 0x25	; 37
    14ba:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <dsp_data+0x39>
    14be:	86 e5       	ldi	r24, 0x56	; 86
    14c0:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <dsp_data+0x4d>
    14c4:	84 e5       	ldi	r24, 0x54	; 84
    14c6:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <dsp_data+0x50>
    14ca:	80 e5       	ldi	r24, 0x50	; 80
    14cc:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <dsp_data+0x51>
    14d0:	83 e5       	ldi	r24, 0x53	; 83
    14d2:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <dsp_data+0x52>
    14d6:	81 e3       	ldi	r24, 0x31	; 49
    14d8:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <dsp_data+0x53>
    14dc:	82 e3       	ldi	r24, 0x32	; 50
    14de:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <dsp_data+0x5a>
    14e2:	81 e4       	ldi	r24, 0x41	; 65
    14e4:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <dsp_data+0x64>
    14e8:	80 e5       	ldi	r24, 0x50	; 80
    14ea:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <dsp_data+0x65>
    14ee:	83 e5       	ldi	r24, 0x53	; 83
    14f0:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <dsp_data+0x66>
    14f4:	81 e3       	ldi	r24, 0x31	; 49
    14f6:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <dsp_data+0x67>
    14fa:	82 e3       	ldi	r24, 0x32	; 50
    14fc:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <dsp_data+0x6e>
    1500:	84 e5       	ldi	r24, 0x54	; 84
    1502:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <dsp_data+0x78>
    1506:	80 e5       	ldi	r24, 0x50	; 80
    1508:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <dsp_data+0x79>
    150c:	83 e5       	ldi	r24, 0x53	; 83
    150e:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <dsp_data+0x7a>
    1512:	85 e4       	ldi	r24, 0x45	; 69
    1514:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <dsp_data+0x7b>
    1518:	82 e4       	ldi	r24, 0x42	; 66
    151a:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <dsp_data+0x8c>
    151e:	80 e5       	ldi	r24, 0x50	; 80
    1520:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <dsp_data+0x8d>
    1524:	86 e4       	ldi	r24, 0x46	; 70
    1526:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <dsp_data+0x8e>
    152a:	82 e5       	ldi	r24, 0x52	; 82
    152c:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <dsp_data+0x94>
    1530:	85 e2       	ldi	r24, 0x25	; 37
    1532:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <dsp_data+0x58>
    1536:	85 e2       	ldi	r24, 0x25	; 37
    1538:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <dsp_data+0x6c>
    153c:	85 e2       	ldi	r24, 0x25	; 37
    153e:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <dsp_data+0x80>
    1542:	85 e2       	ldi	r24, 0x25	; 37
    1544:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <dsp_data+0x5f>
    1548:	85 e2       	ldi	r24, 0x25	; 37
    154a:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <dsp_data+0x73>
    154e:	82 e4       	ldi	r24, 0x42	; 66
    1550:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <dsp_data+0x92>
    1554:	82 e4       	ldi	r24, 0x42	; 66
    1556:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <dsp_data+0x98>
    155a:	84 e5       	ldi	r24, 0x54	; 84
    155c:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <dsp_data+0xa0>
    1560:	83 e4       	ldi	r24, 0x43	; 67
    1562:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <dsp_data+0xa1>
    1566:	82 e4       	ldi	r24, 0x42	; 66
    1568:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <dsp_data+0xb4>
    156c:	85 e4       	ldi	r24, 0x45	; 69
    156e:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <dsp_data+0xb5>
    1572:	83 e5       	ldi	r24, 0x53	; 83
    1574:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <dsp_data+0xb6>
    1578:	80 e5       	ldi	r24, 0x50	; 80
    157a:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <dsp_data+0xc8>
    157e:	82 e5       	ldi	r24, 0x52	; 82
    1580:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <dsp_data+0xc9>
    1584:	85 e4       	ldi	r24, 0x45	; 69
    1586:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <dsp_data+0xca>
    158a:	8c e4       	ldi	r24, 0x4C	; 76
    158c:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <dsp_data+0xdc>
    1590:	8e e4       	ldi	r24, 0x4E	; 78
    1592:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <dsp_data+0xdd>
    1596:	83 e5       	ldi	r24, 0x53	; 83
    1598:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dsp_data+0xa5>
    159c:	80 e5       	ldi	r24, 0x50	; 80
    159e:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <dsp_data+0xa6>
    15a2:	85 e4       	ldi	r24, 0x45	; 69
    15a4:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <dsp_data+0xa7>
    15a8:	84 e4       	ldi	r24, 0x44	; 68
    15aa:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <dsp_data+0xa8>
    15ae:	8b e4       	ldi	r24, 0x4B	; 75
    15b0:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <dsp_data+0xad>
    15b4:	8d e4       	ldi	r24, 0x4D	; 77
    15b6:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <dsp_data+0xae>
    15ba:	88 e4       	ldi	r24, 0x48	; 72
    15bc:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dsp_data+0xaf>
    15c0:	8f e4       	ldi	r24, 0x4F	; 79
    15c2:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <dsp_data+0xe2>
    15c6:	84 e4       	ldi	r24, 0x44	; 68
    15c8:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <dsp_data+0xe3>
    15cc:	8f e4       	ldi	r24, 0x4F	; 79
    15ce:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <dsp_data+0xe4>
    15d2:	8b e4       	ldi	r24, 0x4B	; 75
    15d4:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <dsp_data+0xe9>
    15d8:	8d e4       	ldi	r24, 0x4D	; 77
    15da:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <dsp_data+0xea>
    15de:	8a e3       	ldi	r24, 0x3A	; 58
    15e0:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <dsp_data+0xb9>
    15e4:	8a e3       	ldi	r24, 0x3A	; 58
    15e6:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <dsp_data+0xbc>
    15ea:	8a e3       	ldi	r24, 0x3A	; 58
    15ec:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <dsp_data+0xcd>
    15f0:	8a e3       	ldi	r24, 0x3A	; 58
    15f2:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <dsp_data+0xd0>
    15f6:	00 00       	nop
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <invert_binary_number>:
	clear_top_right_bar();
	uint16_t Top_Right_Bar_Divider = (max_value_r - min_value_r) / (LED_COUNT_TOP_RIGHT - 1);
	int8_t amount_r = (current_value_r - min_value_r + Top_Right_Bar_Divider) / Top_Right_Bar_Divider;
	if (amount_r > 0) {led_right_top_bar_select(amount_r);}
	else {led_right_top_bar_select(0);}
}
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	00 d0       	rcall	.+0      	; 0x1604 <invert_binary_number+0x6>
    1604:	1f 92       	push	r1
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	8b 83       	std	Y+3, r24	; 0x03
    160c:	19 82       	std	Y+1, r1	; 0x01
    160e:	1a 82       	std	Y+2, r1	; 0x02
    1610:	22 c0       	rjmp	.+68     	; 0x1656 <invert_binary_number+0x58>
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	2a 81       	ldd	r18, Y+2	; 0x02
    161a:	22 2f       	mov	r18, r18
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <invert_binary_number+0x26>
    1620:	95 95       	asr	r25
    1622:	87 95       	ror	r24
    1624:	2a 95       	dec	r18
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <invert_binary_number+0x22>
    1628:	81 70       	andi	r24, 0x01	; 1
    162a:	99 27       	eor	r25, r25
    162c:	2a 81       	ldd	r18, Y+2	; 0x02
    162e:	22 2f       	mov	r18, r18
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	47 e0       	ldi	r20, 0x07	; 7
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	ba 01       	movw	r22, r20
    1638:	62 1b       	sub	r22, r18
    163a:	73 0b       	sbc	r23, r19
    163c:	9b 01       	movw	r18, r22
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <invert_binary_number+0x46>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	2a 95       	dec	r18
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <invert_binary_number+0x42>
    1648:	98 2f       	mov	r25, r24
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	89 2b       	or	r24, r25
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	8a 81       	ldd	r24, Y+2	; 0x02
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	8a 83       	std	Y+2, r24	; 0x02
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	d8 f2       	brcs	.-74     	; 0x1612 <invert_binary_number+0x14>
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	08 95       	ret

0000166a <clear_top_left_bar>:
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	82 e2       	ldi	r24, 0x22	; 34
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	22 e2       	ldi	r18, 0x22	; 34
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	f9 01       	movw	r30, r18
    167c:	20 81       	ld	r18, Z
    167e:	2f 70       	andi	r18, 0x0F	; 15
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
    1684:	84 e3       	ldi	r24, 0x34	; 52
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	24 e3       	ldi	r18, 0x34	; 52
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	f9 01       	movw	r30, r18
    168e:	20 81       	ld	r18, Z
    1690:	2b 7f       	andi	r18, 0xFB	; 251
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
    1696:	00 00       	nop
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	08 95       	ret

0000169e <clear_top_right_bar>:
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	88 e2       	ldi	r24, 0x28	; 40
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	fc 01       	movw	r30, r24
    16ac:	10 82       	st	Z, r1
    16ae:	84 e3       	ldi	r24, 0x34	; 52
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	24 e3       	ldi	r18, 0x34	; 52
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	f9 01       	movw	r30, r18
    16b8:	20 81       	ld	r18, Z
    16ba:	2c 7f       	andi	r18, 0xFC	; 252
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
    16c0:	00 00       	nop
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <led_left_top_bar_select>:

//This Function turns on the desired amount of LEDs of the left Top Bar
void led_left_top_bar_select(uint8_t select_l)
{
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	1f 92       	push	r1
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= ~(0xFF << select_l) << PA4;
    16d4:	82 e2       	ldi	r24, 0x22	; 34
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	22 e2       	ldi	r18, 0x22	; 34
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	f9 01       	movw	r30, r18
    16de:	20 81       	ld	r18, Z
    16e0:	62 2f       	mov	r22, r18
    16e2:	29 81       	ldd	r18, Y+1	; 0x01
    16e4:	42 2f       	mov	r20, r18
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	2f ef       	ldi	r18, 0xFF	; 255
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <led_left_top_bar_select+0x2a>
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	4a 95       	dec	r20
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <led_left_top_bar_select+0x26>
    16f6:	20 95       	com	r18
    16f8:	30 95       	com	r19
    16fa:	22 95       	swap	r18
    16fc:	32 95       	swap	r19
    16fe:	30 7f       	andi	r19, 0xF0	; 240
    1700:	32 27       	eor	r19, r18
    1702:	20 7f       	andi	r18, 0xF0	; 240
    1704:	32 27       	eor	r19, r18
    1706:	26 2b       	or	r18, r22
    1708:	fc 01       	movw	r30, r24
    170a:	20 83       	st	Z, r18
	PORTG |= (1<<PG2) & ((0x80) >> select_l);
    170c:	84 e3       	ldi	r24, 0x34	; 52
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	24 e3       	ldi	r18, 0x34	; 52
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	f9 01       	movw	r30, r18
    1716:	20 81       	ld	r18, Z
    1718:	62 2f       	mov	r22, r18
    171a:	29 81       	ldd	r18, Y+1	; 0x01
    171c:	42 2f       	mov	r20, r18
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	20 e8       	ldi	r18, 0x80	; 128
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <led_left_top_bar_select+0x62>
    1726:	35 95       	asr	r19
    1728:	27 95       	ror	r18
    172a:	4a 95       	dec	r20
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <led_left_top_bar_select+0x5e>
    172e:	24 70       	andi	r18, 0x04	; 4
    1730:	26 2b       	or	r18, r22
    1732:	fc 01       	movw	r30, r24
    1734:	20 83       	st	Z, r18
}
    1736:	00 00       	nop
    1738:	0f 90       	pop	r0
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <led_right_top_bar_select>:

//This Function turns on the desired amount of LEDs of the right Top Bar
void led_right_top_bar_select(uint8_t select_r)
{
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	1f 92       	push	r1
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	89 83       	std	Y+1, r24	; 0x01
	PORTC |= ~(0xFF >> select_r);
    174c:	88 e2       	ldi	r24, 0x28	; 40
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	28 e2       	ldi	r18, 0x28	; 40
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	62 2f       	mov	r22, r18
    175a:	29 81       	ldd	r18, Y+1	; 0x01
    175c:	42 2f       	mov	r20, r18
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	2f ef       	ldi	r18, 0xFF	; 255
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <led_right_top_bar_select+0x2a>
    1766:	35 95       	asr	r19
    1768:	27 95       	ror	r18
    176a:	4a 95       	dec	r20
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <led_right_top_bar_select+0x26>
    176e:	20 95       	com	r18
    1770:	26 2b       	or	r18, r22
    1772:	fc 01       	movw	r30, r24
    1774:	20 83       	st	Z, r18
	PORTG |= (~(0xFF << (select_r/9)) << (select_r/9)) + (select_r/10);
    1776:	84 e3       	ldi	r24, 0x34	; 52
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	24 e3       	ldi	r18, 0x34	; 52
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	f9 01       	movw	r30, r18
    1780:	20 81       	ld	r18, Z
    1782:	62 2f       	mov	r22, r18
    1784:	39 81       	ldd	r19, Y+1	; 0x01
    1786:	29 e3       	ldi	r18, 0x39	; 57
    1788:	32 9f       	mul	r19, r18
    178a:	21 2d       	mov	r18, r1
    178c:	11 24       	eor	r1, r1
    178e:	26 95       	lsr	r18
    1790:	42 2f       	mov	r20, r18
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	2f ef       	ldi	r18, 0xFF	; 255
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	02 c0       	rjmp	.+4      	; 0x179e <led_right_top_bar_select+0x5e>
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	4a 95       	dec	r20
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <led_right_top_bar_select+0x5a>
    17a2:	20 95       	com	r18
    17a4:	30 95       	com	r19
    17a6:	59 81       	ldd	r21, Y+1	; 0x01
    17a8:	49 e3       	ldi	r20, 0x39	; 57
    17aa:	54 9f       	mul	r21, r20
    17ac:	41 2d       	mov	r20, r1
    17ae:	11 24       	eor	r1, r1
    17b0:	46 95       	lsr	r20
    17b2:	44 2f       	mov	r20, r20
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <led_right_top_bar_select+0x7c>
    17b8:	22 0f       	add	r18, r18
    17ba:	33 1f       	adc	r19, r19
    17bc:	4a 95       	dec	r20
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <led_right_top_bar_select+0x78>
    17c0:	42 2f       	mov	r20, r18
    17c2:	39 81       	ldd	r19, Y+1	; 0x01
    17c4:	2d ec       	ldi	r18, 0xCD	; 205
    17c6:	32 9f       	mul	r19, r18
    17c8:	21 2d       	mov	r18, r1
    17ca:	11 24       	eor	r1, r1
    17cc:	26 95       	lsr	r18
    17ce:	26 95       	lsr	r18
    17d0:	26 95       	lsr	r18
    17d2:	24 0f       	add	r18, r20
    17d4:	26 2b       	or	r18, r22
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18
}
    17da:	00 00       	nop
    17dc:	0f 90       	pop	r0
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <dsp_writedata>:


//This Function writes data into the Display
void dsp_writedata(uint8_t data,uint8_t rs)
{
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <dsp_writedata+0xa>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <dsp_writedata+0xc>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	8b 83       	std	Y+3, r24	; 0x03
    17f6:	6c 83       	std	Y+4, r22	; 0x04
	//PORTE as Output
	
	PORTE = invert_binary_number(data);
    17f8:	0e e2       	ldi	r16, 0x2E	; 46
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	ff de       	rcall	.-514    	; 0x15fe <invert_binary_number>
    1800:	f8 01       	movw	r30, r16
    1802:	80 83       	st	Z, r24
	
	//SETS THE RS PIN
	if (rs==1) {PORTB |= (1<<PB6);}
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	51 f4       	brne	.+20     	; 0x181e <dsp_writedata+0x3a>
    180a:	85 e2       	ldi	r24, 0x25	; 37
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	25 e2       	ldi	r18, 0x25	; 37
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	f9 01       	movw	r30, r18
    1814:	20 81       	ld	r18, Z
    1816:	20 64       	ori	r18, 0x40	; 64
    1818:	fc 01       	movw	r30, r24
    181a:	20 83       	st	Z, r18
    181c:	09 c0       	rjmp	.+18     	; 0x1830 <dsp_writedata+0x4c>
	else {PORTB &= ~(1<<PB6);}
    181e:	85 e2       	ldi	r24, 0x25	; 37
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	25 e2       	ldi	r18, 0x25	; 37
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	f9 01       	movw	r30, r18
    1828:	20 81       	ld	r18, Z
    182a:	2f 7b       	andi	r18, 0xBF	; 191
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18

	//Sets enable high
	PORTB |= (1<<PB4);
    1830:	85 e2       	ldi	r24, 0x25	; 37
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	25 e2       	ldi	r18, 0x25	; 37
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	f9 01       	movw	r30, r18
    183a:	20 81       	ld	r18, Z
    183c:	20 61       	ori	r18, 0x10	; 16
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
	//Sets enable low
	for(int wait = 0; wait<100; wait++){}
    1842:	1a 82       	std	Y+2, r1	; 0x02
    1844:	19 82       	std	Y+1, r1	; 0x01
    1846:	05 c0       	rjmp	.+10     	; 0x1852 <dsp_writedata+0x6e>
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	01 96       	adiw	r24, 0x01	; 1
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	84 36       	cpi	r24, 0x64	; 100
    1858:	91 05       	cpc	r25, r1
    185a:	b4 f3       	brlt	.-20     	; 0x1848 <dsp_writedata+0x64>
	PORTB &= ~(1<<PB4);
    185c:	85 e2       	ldi	r24, 0x25	; 37
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	25 e2       	ldi	r18, 0x25	; 37
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	f9 01       	movw	r30, r18
    1866:	20 81       	ld	r18, Z
    1868:	2f 7e       	andi	r18, 0xEF	; 239
    186a:	fc 01       	movw	r30, r24
    186c:	20 83       	st	Z, r18
	//This is done so that the display will read the data pins and process them
}
    186e:	00 00       	nop
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	08 95       	ret

00001882 <dsp_customchar>:
//Function to set customchars
//charpos = position in cgram
//line 1-8 lines of the char

void dsp_customchar(uint8_t charpos, uint8_t line1, uint8_t line2, uint8_t line3, uint8_t line4, uint8_t line5, uint8_t line6, uint8_t line7, uint8_t line8)
{	
    1882:	8f 92       	push	r8
    1884:	af 92       	push	r10
    1886:	cf 92       	push	r12
    1888:	ef 92       	push	r14
    188a:	0f 93       	push	r16
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	29 97       	sbiw	r28, 0x09	; 9
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
    18a4:	4b 83       	std	Y+3, r20	; 0x03
    18a6:	2c 83       	std	Y+4, r18	; 0x04
    18a8:	0d 83       	std	Y+5, r16	; 0x05
    18aa:	ee 82       	std	Y+6, r14	; 0x06
    18ac:	cf 82       	std	Y+7, r12	; 0x07
    18ae:	a8 86       	std	Y+8, r10	; 0x08
    18b0:	89 86       	std	Y+9, r8	; 0x09
	//where to write in cgram
	dsp_writedata(0x40+8*charpos,0);
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	88 2f       	mov	r24, r24
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	08 96       	adiw	r24, 0x08	; 8
    18ba:	88 0f       	add	r24, r24
    18bc:	88 0f       	add	r24, r24
    18be:	88 0f       	add	r24, r24
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	90 df       	rcall	.-224    	; 0x17e4 <dsp_writedata>

	//write each line
	dsp_writedata(line1,1);
    18c4:	61 e0       	ldi	r22, 0x01	; 1
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	8d df       	rcall	.-230    	; 0x17e4 <dsp_writedata>
	dsp_writedata(line2,1);
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	8a df       	rcall	.-236    	; 0x17e4 <dsp_writedata>
	dsp_writedata(line3,1);
    18d0:	61 e0       	ldi	r22, 0x01	; 1
    18d2:	8c 81       	ldd	r24, Y+4	; 0x04
    18d4:	87 df       	rcall	.-242    	; 0x17e4 <dsp_writedata>
	dsp_writedata(line4,1);
    18d6:	61 e0       	ldi	r22, 0x01	; 1
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	84 df       	rcall	.-248    	; 0x17e4 <dsp_writedata>
	dsp_writedata(line5,1);
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	8e 81       	ldd	r24, Y+6	; 0x06
    18e0:	81 df       	rcall	.-254    	; 0x17e4 <dsp_writedata>
	dsp_writedata(line6,1);
    18e2:	61 e0       	ldi	r22, 0x01	; 1
    18e4:	8f 81       	ldd	r24, Y+7	; 0x07
    18e6:	7e df       	rcall	.-260    	; 0x17e4 <dsp_writedata>
	dsp_writedata(line7,1);
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	88 85       	ldd	r24, Y+8	; 0x08
    18ec:	7b df       	rcall	.-266    	; 0x17e4 <dsp_writedata>
	dsp_writedata(line8,1);
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	89 85       	ldd	r24, Y+9	; 0x09
    18f2:	78 df       	rcall	.-272    	; 0x17e4 <dsp_writedata>
    18f4:	60 e0       	ldi	r22, 0x00	; 0

	//dsiplay return home
	dsp_writedata(0x02,0);
    18f6:	82 e0       	ldi	r24, 0x02	; 2
    18f8:	75 df       	rcall	.-278    	; 0x17e4 <dsp_writedata>
    18fa:	00 00       	nop
    18fc:	29 96       	adiw	r28, 0x09	; 9
}
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	0f 91       	pop	r16
    190e:	ef 90       	pop	r14
    1910:	cf 90       	pop	r12
    1912:	af 90       	pop	r10
    1914:	8f 90       	pop	r8
    1916:	08 95       	ret

00001918 <dsp_write>:
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29


void dsp_write(uint8_t dsp_mode)
{	
    191c:	1f 92       	push	r1
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	89 83       	std	Y+1, r24	; 0x01
	if (counter<20)
    1924:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    1928:	84 31       	cpi	r24, 0x14	; 20
    192a:	28 f5       	brcc	.+74     	; 0x1976 <dsp_write+0x5e>
	dsp_writedata(dsp_data[dsp_mode][dsp_linecounter][counter++],1);
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	68 2f       	mov	r22, r24
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    193e:	91 e0       	ldi	r25, 0x01	; 1
    1940:	98 0f       	add	r25, r24
    1942:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <counter>
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	e4 e1       	ldi	r30, 0x14	; 20
    194c:	e2 9f       	mul	r30, r18
    194e:	a0 01       	movw	r20, r0
    1950:	e3 9f       	mul	r30, r19
    1952:	50 0d       	add	r21, r0
    1954:	11 24       	eor	r1, r1
    1956:	e0 e5       	ldi	r30, 0x50	; 80
    1958:	e6 9f       	mul	r30, r22
    195a:	90 01       	movw	r18, r0
    195c:	e7 9f       	mul	r30, r23
    195e:	30 0d       	add	r19, r0
    1960:	11 24       	eor	r1, r1
    1962:	24 0f       	add	r18, r20
    1964:	35 1f       	adc	r19, r21
    1966:	82 0f       	add	r24, r18
    1968:	93 1f       	adc	r25, r19
    196a:	82 5f       	subi	r24, 0xF2	; 242
    196c:	9c 4f       	sbci	r25, 0xFC	; 252
    196e:	fc 01       	movw	r30, r24
    1970:	80 81       	ld	r24, Z
    1972:	61 e0       	ldi	r22, 0x01	; 1
    1974:	37 df       	rcall	.-402    	; 0x17e4 <dsp_writedata>
	if (counter == 20)
    1976:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    197a:	84 31       	cpi	r24, 0x14	; 20
    197c:	89 f4       	brne	.+34     	; 0x19a0 <dsp_write+0x88>
	{
		//go into next line
		dsp_writedata(dsp_line[dsp_linecounter],0);
    197e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	89 5f       	subi	r24, 0xF9	; 249
    1988:	9e 4f       	sbci	r25, 0xFE	; 254
    198a:	fc 01       	movw	r30, r24
    198c:	80 81       	ld	r24, Z
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	29 df       	rcall	.-430    	; 0x17e4 <dsp_writedata>
		counter=0;
    1992:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <counter>
		dsp_linecounter+=1;
    1996:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    199a:	8f 5f       	subi	r24, 0xFF	; 255
    199c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <dsp_linecounter>
	}
	if (dsp_linecounter == 4)
    19a0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19a4:	84 30       	cpi	r24, 0x04	; 4
    19a6:	11 f4       	brne	.+4      	; 0x19ac <dsp_write+0x94>
	{
		dsp_linecounter = 0;
    19a8:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <dsp_linecounter>
	}
}
    19ac:	00 00       	nop
    19ae:	0f 90       	pop	r0
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <dsp_definechars>:


void dsp_definechars()
{
    19b6:	8f 92       	push	r8
    19b8:	af 92       	push	r10
    19ba:	cf 92       	push	r12
    19bc:	ef 92       	push	r14
    19be:	0f 93       	push	r16
    19c0:	cf 93       	push	r28
    19c2:	df 93       	push	r29
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
	//definition of needed custom chars
	dsp_customchar(0,0,0,0,0,0,0x1F,0x1F,0x1F);
    19c8:	0f 2e       	mov	r0, r31
    19ca:	ff e1       	ldi	r31, 0x1F	; 31
    19cc:	8f 2e       	mov	r8, r31
    19ce:	f0 2d       	mov	r31, r0
    19d0:	0f 2e       	mov	r0, r31
    19d2:	ff e1       	ldi	r31, 0x1F	; 31
    19d4:	af 2e       	mov	r10, r31
    19d6:	f0 2d       	mov	r31, r0
    19d8:	0f 2e       	mov	r0, r31
    19da:	ff e1       	ldi	r31, 0x1F	; 31
    19dc:	cf 2e       	mov	r12, r31
    19de:	f0 2d       	mov	r31, r0
    19e0:	e1 2c       	mov	r14, r1
    19e2:	00 e0       	ldi	r16, 0x00	; 0
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	4a df       	rcall	.-364    	; 0x1882 <dsp_customchar>
	dsp_customchar(1,0x1F,0x1F,0,0,0,0,0,0);
    19ee:	81 2c       	mov	r8, r1
    19f0:	a1 2c       	mov	r10, r1
    19f2:	c1 2c       	mov	r12, r1
    19f4:	e1 2c       	mov	r14, r1
    19f6:	00 e0       	ldi	r16, 0x00	; 0
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	4f e1       	ldi	r20, 0x1F	; 31
    19fc:	6f e1       	ldi	r22, 0x1F	; 31
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	40 df       	rcall	.-384    	; 0x1882 <dsp_customchar>
	dsp_customchar(2,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF);
    1a02:	0f 2e       	mov	r0, r31
    1a04:	ff ee       	ldi	r31, 0xEF	; 239
    1a06:	8f 2e       	mov	r8, r31
    1a08:	f0 2d       	mov	r31, r0
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	ff ee       	ldi	r31, 0xEF	; 239
    1a0e:	af 2e       	mov	r10, r31
    1a10:	f0 2d       	mov	r31, r0
    1a12:	0f 2e       	mov	r0, r31
    1a14:	ff ee       	ldi	r31, 0xEF	; 239
    1a16:	cf 2e       	mov	r12, r31
    1a18:	f0 2d       	mov	r31, r0
    1a1a:	0f 2e       	mov	r0, r31
    1a1c:	ff ee       	ldi	r31, 0xEF	; 239
    1a1e:	ef 2e       	mov	r14, r31
    1a20:	f0 2d       	mov	r31, r0
    1a22:	0f ee       	ldi	r16, 0xEF	; 239
    1a24:	2f ee       	ldi	r18, 0xEF	; 239
    1a26:	4f ee       	ldi	r20, 0xEF	; 239
    1a28:	6f ee       	ldi	r22, 0xEF	; 239
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	2a df       	rcall	.-428    	; 0x1882 <dsp_customchar>
	dsp_customchar(3,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E);
    1a2e:	0f 2e       	mov	r0, r31
    1a30:	fe e1       	ldi	r31, 0x1E	; 30
    1a32:	8f 2e       	mov	r8, r31
    1a34:	f0 2d       	mov	r31, r0
    1a36:	0f 2e       	mov	r0, r31
    1a38:	fe e1       	ldi	r31, 0x1E	; 30
    1a3a:	af 2e       	mov	r10, r31
    1a3c:	f0 2d       	mov	r31, r0
    1a3e:	0f 2e       	mov	r0, r31
    1a40:	fe e1       	ldi	r31, 0x1E	; 30
    1a42:	cf 2e       	mov	r12, r31
    1a44:	f0 2d       	mov	r31, r0
    1a46:	0f 2e       	mov	r0, r31
    1a48:	fe e1       	ldi	r31, 0x1E	; 30
    1a4a:	ef 2e       	mov	r14, r31
    1a4c:	f0 2d       	mov	r31, r0
    1a4e:	0e e1       	ldi	r16, 0x1E	; 30
    1a50:	2e e1       	ldi	r18, 0x1E	; 30
    1a52:	4e e1       	ldi	r20, 0x1E	; 30
    1a54:	6e e1       	ldi	r22, 0x1E	; 30
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	14 df       	rcall	.-472    	; 0x1882 <dsp_customchar>
	dsp_customchar(4,0xFF,0xFF,0xFF,0xFF,0,0,0,0);
    1a5a:	81 2c       	mov	r8, r1
    1a5c:	a1 2c       	mov	r10, r1
    1a5e:	c1 2c       	mov	r12, r1
    1a60:	e1 2c       	mov	r14, r1
    1a62:	0f ef       	ldi	r16, 0xFF	; 255
    1a64:	2f ef       	ldi	r18, 0xFF	; 255
    1a66:	4f ef       	ldi	r20, 0xFF	; 255
    1a68:	6f ef       	ldi	r22, 0xFF	; 255
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	0a df       	rcall	.-492    	; 0x1882 <dsp_customchar>
	dsp_customchar(5,0xFF,0xFF,0xFF,0xFF,0xEF,0xEF,0xEF,0xEF);
    1a6e:	0f 2e       	mov	r0, r31
    1a70:	ff ee       	ldi	r31, 0xEF	; 239
    1a72:	8f 2e       	mov	r8, r31
    1a74:	f0 2d       	mov	r31, r0
    1a76:	0f 2e       	mov	r0, r31
    1a78:	ff ee       	ldi	r31, 0xEF	; 239
    1a7a:	af 2e       	mov	r10, r31
    1a7c:	f0 2d       	mov	r31, r0
    1a7e:	0f 2e       	mov	r0, r31
    1a80:	ff ee       	ldi	r31, 0xEF	; 239
    1a82:	cf 2e       	mov	r12, r31
    1a84:	f0 2d       	mov	r31, r0
    1a86:	0f 2e       	mov	r0, r31
    1a88:	ff ee       	ldi	r31, 0xEF	; 239
    1a8a:	ef 2e       	mov	r14, r31
    1a8c:	f0 2d       	mov	r31, r0
    1a8e:	0f ef       	ldi	r16, 0xFF	; 255
    1a90:	2f ef       	ldi	r18, 0xFF	; 255
    1a92:	4f ef       	ldi	r20, 0xFF	; 255
    1a94:	6f ef       	ldi	r22, 0xFF	; 255
    1a96:	85 e0       	ldi	r24, 0x05	; 5
    1a98:	f4 de       	rcall	.-536    	; 0x1882 <dsp_customchar>
	dsp_customchar(6,0x08,0x15,0x0A,0x04,0x0A,0x15,0x02,0x00);
    1a9a:	81 2c       	mov	r8, r1
    1a9c:	68 94       	set
    1a9e:	aa 24       	eor	r10, r10
    1aa0:	a1 f8       	bld	r10, 1
    1aa2:	0f 2e       	mov	r0, r31
    1aa4:	f5 e1       	ldi	r31, 0x15	; 21
    1aa6:	cf 2e       	mov	r12, r31
    1aa8:	f0 2d       	mov	r31, r0
    1aaa:	0f 2e       	mov	r0, r31
    1aac:	fa e0       	ldi	r31, 0x0A	; 10
    1aae:	ef 2e       	mov	r14, r31
    1ab0:	f0 2d       	mov	r31, r0
    1ab2:	04 e0       	ldi	r16, 0x04	; 4
    1ab4:	2a e0       	ldi	r18, 0x0A	; 10
    1ab6:	45 e1       	ldi	r20, 0x15	; 21
    1ab8:	68 e0       	ldi	r22, 0x08	; 8
    1aba:	86 e0       	ldi	r24, 0x06	; 6
    1abc:	e2 de       	rcall	.-572    	; 0x1882 <dsp_customchar>
};
    1abe:	00 00       	nop
    1ac0:	df 91       	pop	r29
    1ac2:	cf 91       	pop	r28
    1ac4:	0f 91       	pop	r16
    1ac6:	ef 90       	pop	r14
    1ac8:	cf 90       	pop	r12
    1aca:	af 90       	pop	r10
    1acc:	8f 90       	pop	r8
    1ace:	08 95       	ret

00001ad0 <dsp_init>:

//runs through the init commands

void dsp_init()
{
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <dsp_init+0x6>
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1ada:	1a 82       	std	Y+2, r1	; 0x02
    1adc:	19 82       	std	Y+1, r1	; 0x01
    1ade:	0d c0       	rjmp	.+26     	; 0x1afa <dsp_init+0x2a>
	{
		dsp_writedata(dsp_command[i],0);
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	80 50       	subi	r24, 0x00	; 0
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	fc 01       	movw	r30, r24
    1aea:	80 81       	ld	r24, Z
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	7a de       	rcall	.-780    	; 0x17e4 <dsp_writedata>
//runs through the init commands

void dsp_init()
{
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	07 97       	sbiw	r24, 0x07	; 7
    1b00:	7c f3       	brlt	.-34     	; 0x1ae0 <dsp_init+0x10>
	{
		dsp_writedata(dsp_command[i],0);
	}
}
    1b02:	00 00       	nop
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	08 95       	ret

00001b0e <selftest>:
// 			}
// 		}
// 	}
// }

void selftest(){
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
	
	if (systime_selftest+selftest_time*2 >= sys_time)
    1b16:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1b1a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1b1e:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1b22:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1b26:	88 54       	subi	r24, 0x48	; 72
    1b28:	94 4f       	sbci	r25, 0xF4	; 244
    1b2a:	af 4f       	sbci	r26, 0xFF	; 255
    1b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2e:	9c 01       	movw	r18, r24
    1b30:	ad 01       	movw	r20, r26
    1b32:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1b36:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1b3a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1b3e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1b42:	28 17       	cp	r18, r24
    1b44:	39 07       	cpc	r19, r25
    1b46:	4a 07       	cpc	r20, r26
    1b48:	5b 07       	cpc	r21, r27
    1b4a:	d8 f0       	brcs	.+54     	; 0x1b82 <selftest+0x74>
	{
		string_to_digit(0,"      DIC V0.1      ",0,0);
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	6c e0       	ldi	r22, 0x0C	; 12
    1b52:	71 e0       	ldi	r23, 0x01	; 1
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	93 d8       	rcall	.-3802   	; 0xc7e <string_to_digit>
		string_to_digit(0,"  Software written  ",0,1);
    1b58:	21 e0       	ldi	r18, 0x01	; 1
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	61 e2       	ldi	r22, 0x21	; 33
    1b5e:	71 e0       	ldi	r23, 0x01	; 1
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	8d d8       	rcall	.-3814   	; 0xc7e <string_to_digit>
		string_to_digit(0,"         by         ",0,2);
    1b64:	22 e0       	ldi	r18, 0x02	; 2
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	66 e3       	ldi	r22, 0x36	; 54
    1b6a:	71 e0       	ldi	r23, 0x01	; 1
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	87 d8       	rcall	.-3826   	; 0xc7e <string_to_digit>
		string_to_digit(0,"Baltic Racing Alumni",0,3);
    1b70:	23 e0       	ldi	r18, 0x03	; 3
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	6b e4       	ldi	r22, 0x4B	; 75
    1b76:	71 e0       	ldi	r23, 0x01	; 1
    1b78:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);	
    1b7a:	81 d8       	rcall	.-3838   	; 0xc7e <string_to_digit>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	cc de       	rcall	.-616    	; 0x1918 <dsp_write>
    1b80:	35 c0       	rjmp	.+106    	; 0x1bec <selftest+0xde>
	}
	else if (systime_selftest+selftest_time*4 >= sys_time)
    1b82:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1b86:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1b8a:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1b8e:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1b92:	80 59       	subi	r24, 0x90	; 144
    1b94:	98 4e       	sbci	r25, 0xE8	; 232
    1b96:	af 4f       	sbci	r26, 0xFF	; 255
    1b98:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9a:	9c 01       	movw	r18, r24
    1b9c:	ad 01       	movw	r20, r26
    1b9e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1ba2:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1ba6:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1baa:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1bae:	28 17       	cp	r18, r24
    1bb0:	39 07       	cpc	r19, r25
    1bb2:	4a 07       	cpc	r20, r26
    1bb4:	5b 07       	cpc	r21, r27
    1bb6:	d0 f0       	brcs	.+52     	; 0x1bec <selftest+0xde>
	{
		string_to_digit(0,"   And fixed by     ",0,0);
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	60 e6       	ldi	r22, 0x60	; 96
    1bbe:	71 e0       	ldi	r23, 0x01	; 1
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	5d d8       	rcall	.-3910   	; 0xc7e <string_to_digit>
		string_to_digit(0,"      Deine Mudda   ",0,1);
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	65 e7       	ldi	r22, 0x75	; 117
    1bca:	71 e0       	ldi	r23, 0x01	; 1
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	57 d8       	rcall	.-3922   	; 0xc7e <string_to_digit>
		string_to_digit(0,"--------------------",0,2);
    1bd0:	22 e0       	ldi	r18, 0x02	; 2
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	6a e8       	ldi	r22, 0x8A	; 138
    1bd6:	71 e0       	ldi	r23, 0x01	; 1
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	51 d8       	rcall	.-3934   	; 0xc7e <string_to_digit>
		string_to_digit(0,"  #MOSFET-Barbecue  ",0,3);
    1bdc:	23 e0       	ldi	r18, 0x03	; 3
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	6f e9       	ldi	r22, 0x9F	; 159
    1be2:	71 e0       	ldi	r23, 0x01	; 1
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	4b d8       	rcall	.-3946   	; 0xc7e <string_to_digit>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);
    1bea:	96 de       	rcall	.-724    	; 0x1918 <dsp_write>
    1bec:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	}
		
	if (systime_selftest + LEDS_on * (selftest_time/LED_Count+1)*4 < sys_time )
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	24 e9       	ldi	r18, 0x94	; 148
    1bf6:	31 e0       	ldi	r19, 0x01	; 1
    1bf8:	42 9f       	mul	r20, r18
    1bfa:	c0 01       	movw	r24, r0
    1bfc:	43 9f       	mul	r20, r19
    1bfe:	90 0d       	add	r25, r0
    1c00:	52 9f       	mul	r21, r18
    1c02:	90 0d       	add	r25, r0
    1c04:	11 24       	eor	r1, r1
    1c06:	9c 01       	movw	r18, r24
    1c08:	99 0f       	add	r25, r25
    1c0a:	44 0b       	sbc	r20, r20
    1c0c:	55 0b       	sbc	r21, r21
    1c0e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1c12:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1c16:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1c1a:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1c1e:	82 0f       	add	r24, r18
    1c20:	93 1f       	adc	r25, r19
    1c22:	a4 1f       	adc	r26, r20
    1c24:	b5 1f       	adc	r27, r21
    1c26:	9c 01       	movw	r18, r24
    1c28:	ad 01       	movw	r20, r26
    1c2a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1c2e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1c32:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1c36:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1c3a:	28 17       	cp	r18, r24
    1c3c:	39 07       	cpc	r19, r25
    1c3e:	4a 07       	cpc	r20, r26
    1c40:	5b 07       	cpc	r21, r27
    1c42:	98 f4       	brcc	.+38     	; 0x1c6a <selftest+0x15c>
    1c44:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	{
		if (LEDS_on <= LED_COUNT_TOP_LEFT)
    1c48:	86 30       	cpi	r24, 0x06	; 6
    1c4a:	20 f4       	brcc	.+8      	; 0x1c54 <selftest+0x146>
		{
			led_left_top_bar_select(LEDS_on);
    1c4c:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1c50:	3b dd       	rcall	.-1418   	; 0x16c8 <led_left_top_bar_select>
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <selftest+0x152>
    1c54:	85 e0       	ldi	r24, 0x05	; 5
		}
		else
		{
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    1c56:	38 dd       	rcall	.-1424   	; 0x16c8 <led_left_top_bar_select>
    1c58:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
			led_right_top_bar_select(LEDS_on-LED_COUNT_TOP_LEFT);
    1c5c:	85 50       	subi	r24, 0x05	; 5
    1c5e:	70 dd       	rcall	.-1312   	; 0x1740 <led_right_top_bar_select>
    1c60:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
		}
		LEDS_on++;
    1c66:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <LEDS_on>
    1c6a:	00 00       	nop
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
 	}
    1c70:	08 95       	ret

00001c72 <error_handling>:
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	1f 92       	push	r1
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	19 82       	std	Y+1, r1	; 0x01
    1c7e:	23 e0       	ldi	r18, 0x03	; 3
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	64 eb       	ldi	r22, 0xB4	; 180
    1c88:	71 e0       	ldi	r23, 0x01	; 1
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <string_to_digit>
    1c92:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1c96:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1c9a:	83 37       	cpi	r24, 0x73	; 115
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	78 f0       	brcs	.+30     	; 0x1cbe <error_handling+0x4c>
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	23 e0       	ldi	r18, 0x03	; 3
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	ac 01       	movw	r20, r24
    1cac:	6f eb       	ldi	r22, 0xBF	; 191
    1cae:	71 e0       	ldi	r23, 0x01	; 1
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <string_to_digit>
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	8c 5f       	subi	r24, 0xFC	; 252
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1cc2:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1cc6:	31 e0       	ldi	r19, 0x01	; 1
    1cc8:	cc 97       	sbiw	r24, 0x3c	; 60
    1cca:	08 f4       	brcc	.+2      	; 0x1cce <error_handling+0x5c>
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	04 96       	adiw	r24, 0x04	; 4
    1cd6:	21 e0       	ldi	r18, 0x01	; 1
    1cd8:	0b 97       	sbiw	r24, 0x0b	; 11
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <error_handling+0x6c>
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	83 2f       	mov	r24, r19
    1ce0:	82 23       	and	r24, r18
    1ce2:	88 23       	and	r24, r24
    1ce4:	79 f0       	breq	.+30     	; 0x1d04 <error_handling+0x92>
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	23 e0       	ldi	r18, 0x03	; 3
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	6f eb       	ldi	r22, 0xBF	; 191
    1cf4:	71 e0       	ldi	r23, 0x01	; 1
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 3f 06 	call	0xc7e	; 0xc7e <string_to_digit>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	8c 5f       	subi	r24, 0xFC	; 252
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	88 23       	and	r24, r24
    1d08:	51 f4       	brne	.+20     	; 0x1d1e <error_handling+0xac>
    1d0a:	23 e0       	ldi	r18, 0x03	; 3
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	64 ec       	ldi	r22, 0xC4	; 196
    1d14:	71 e0       	ldi	r23, 0x01	; 1
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <string_to_digit>
    1d1e:	00 00       	nop
    1d20:	0f 90       	pop	r0
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	08 95       	ret

00001d28 <main>:
void LED_Blink_CTRL();


// MAIN FUNCTION
int main(void)
{
    1d28:	ef 92       	push	r14
    1d2a:	ff 92       	push	r15
    1d2c:	0f 93       	push	r16
    1d2e:	1f 93       	push	r17
    1d30:	cf 93       	push	r28
    1d32:	df 93       	push	r29
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
	//Init and config part
	
	port_config();
    1d38:	cb d3       	rcall	.+1942   	; 0x24d0 <port_config>
	sys_timer_config();
    1d3a:	40 d4       	rcall	.+2176   	; 0x25bc <sys_timer_config>
    1d3c:	0e 94 5f 02 	call	0x4be	; 0x4be <can_init_messages>
	can_init_messages();
	dsp_init();
    1d40:	c7 de       	rcall	.-626    	; 0x1ad0 <dsp_init>
    1d42:	39 de       	rcall	.-910    	; 0x19b6 <dsp_definechars>
	dsp_definechars();
    1d44:	0e 94 a7 00 	call	0x14e	; 0x14e <can_cfg>
	can_cfg();
    1d48:	f3 da       	rcall	.-2586   	; 0x1330 <dsp_clear>
	
	dsp_clear();
    1d4a:	78 94       	sei
    1d4c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
	sei();
	systime_selftest = sys_time;
    1d50:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1d54:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1d58:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1d5c:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <systime_selftest+0x1>
    1d60:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <systime_selftest>
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <main+0x40>
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1d66:	d3 de       	rcall	.-602    	; 0x1b0e <selftest>
	{
		selftest();
    1d68:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
	
	dsp_clear();
	sei();
	systime_selftest = sys_time;
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1d6c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1d70:	80 59       	subi	r24, 0x90	; 144
    1d72:	98 4e       	sbci	r25, 0xE8	; 232
    1d74:	9c 01       	movw	r18, r24
    1d76:	99 0f       	add	r25, r25
    1d78:	44 0b       	sbc	r20, r20
    1d7a:	55 0b       	sbc	r21, r21
    1d7c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1d80:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1d84:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1d88:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1d8c:	28 17       	cp	r18, r24
    1d8e:	39 07       	cpc	r19, r25
    1d90:	4a 07       	cpc	r20, r26
    1d92:	5b 07       	cpc	r21, r27
    1d94:	40 f7       	brcc	.-48     	; 0x1d66 <main+0x3e>
	{
		selftest();
	}
	LED_Blink(10,3000);
    1d96:	68 eb       	ldi	r22, 0xB8	; 184
    1d98:	7b e0       	ldi	r23, 0x0B	; 11
    1d9a:	8a e0       	ldi	r24, 0x0A	; 10
    1d9c:	54 d2       	rcall	.+1192   	; 0x2246 <LED_Blink>
    1d9e:	c8 da       	rcall	.-2672   	; 0x1330 <dsp_clear>
	
	dsp_clear();
    1da0:	33 db       	rcall	.-2458   	; 0x1408 <dsp_arrayinit_static>
    1da2:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
	
	dsp_arrayinit_static();
    1da6:	81 32       	cpi	r24, 0x21	; 33

	
	//Loop
	while(1){

		if(update_data>=33){ //refresh rate for display about 30Hz
    1da8:	08 f4       	brcc	.+2      	; 0x1dac <main+0x84>
    1daa:	d8 c1       	rjmp	.+944    	; 0x215c <main+0x434>
    1dac:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <update_data>
    1db0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			update_data = 0;
    1db4:	88 23       	and	r24, r24
			
			if (dsp_mde == 0){ //DiSPlay Mode 0 = Home
    1db6:	09 f0       	breq	.+2      	; 0x1dba <main+0x92>
    1db8:	3f c1       	rjmp	.+638    	; 0x2038 <main+0x310>
    1dba:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <TSVoltage>
    1dbe:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <TSVoltage+0x1>
				num_to_digit(0,TSVoltage,0,3,5,0);
    1dc2:	e1 2c       	mov	r14, r1
    1dc4:	05 e0       	ldi	r16, 0x05	; 5
    1dc6:	23 e0       	ldi	r18, 0x03	; 3
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	bc 01       	movw	r22, r24
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    1dd2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    1dd6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(0,GPS_Speed,0,3,14,0);
    1dda:	e1 2c       	mov	r14, r1
    1ddc:	0e e0       	ldi	r16, 0x0E	; 14
    1dde:	23 e0       	ldi	r18, 0x03	; 3
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	bc 01       	movw	r22, r24
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    1dea:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1dee:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
				num_to_digit(0,CLT,0,2,6,1);//writes the number 121 for clt TEST ONLY!!!
    1df2:	ee 24       	eor	r14, r14
    1df4:	e3 94       	inc	r14
    1df6:	06 e0       	ldi	r16, 0x06	; 6
    1df8:	22 e0       	ldi	r18, 0x02	; 2
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    1e04:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <AccumulatorTemperature>
    1e08:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <AccumulatorTemperature+0x1>
				num_to_digit(0,AccumulatorTemperature,0,2,15,1);
    1e0c:	ee 24       	eor	r14, r14
    1e0e:	e3 94       	inc	r14
    1e10:	0f e0       	ldi	r16, 0x0F	; 15
    1e12:	22 e0       	ldi	r18, 0x02	; 2
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	bc 01       	movw	r22, r24
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    1e1e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <SOC>
    1e22:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <SOC+0x1>
				num_to_digit(0,SOC,0,3,14,2);
    1e26:	68 94       	set
    1e28:	ee 24       	eor	r14, r14
    1e2a:	e1 f8       	bld	r14, 1
    1e2c:	0e e0       	ldi	r16, 0x0E	; 14
    1e2e:	23 e0       	ldi	r18, 0x03	; 3
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	bc 01       	movw	r22, r24
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    1e3a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <LVSVoltage>
    1e3e:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <LVSVoltage+0x1>
				num_to_digit(0,LVSVoltage,0,2,15,3);
    1e42:	0f 2e       	mov	r0, r31
    1e44:	f3 e0       	ldi	r31, 0x03	; 3
    1e46:	ef 2e       	mov	r14, r31
    1e48:	f0 2d       	mov	r31, r0
    1e4a:	0f e0       	ldi	r16, 0x0F	; 15
    1e4c:	22 e0       	ldi	r18, 0x02	; 2
    1e4e:	40 e0       	ldi	r20, 0x00	; 0
    1e50:	bc 01       	movw	r22, r24
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    1e58:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <Rotary_Encoder_Left>
    1e5c:	88 23       	and	r24, r24

//-------------------------- Sitching between brake bias or LC Active------------------------------
					if (Rotary_Encoder_Left == 0){
    1e5e:	71 f4       	brne	.+28     	; 0x1e7c <main+0x154>
    1e60:	22 e0       	ldi	r18, 0x02	; 2
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	67 ec       	ldi	r22, 0xC7	; 199
						string_to_digit(0,"LC ACTIVE",0,2);
    1e66:	71 e0       	ldi	r23, 0x01	; 1
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <string_to_digit>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
						LC_change = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <LC_Active>
						LC_Active =TRUE;
    1e7a:	2b c0       	rjmp	.+86     	; 0x1ed2 <main+0x1aa>
    1e7c:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <LC_Active>
    1e80:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
					}
					else{
						LC_Active = FALSE;
    1e84:	88 23       	and	r24, r24
						//on first iteration clear the window
						if ( LC_change > 0){
    1e86:	91 f0       	breq	.+36     	; 0x1eac <main+0x184>
    1e88:	80 e1       	ldi	r24, 0x10	; 16
    1e8a:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <dsp_data+0x2a>
							dsp_data[0][2][2] = 0x10;
    1e8e:	80 e1       	ldi	r24, 0x10	; 16
    1e90:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <dsp_data+0x2b>
							dsp_data[0][2][3] = 0x10;
    1e94:	80 e1       	ldi	r24, 0x10	; 16
    1e96:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <dsp_data+0x2c>
							dsp_data[0][2][4] = 0x10;
    1e9a:	80 e1       	ldi	r24, 0x10	; 16
    1e9c:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <dsp_data+0x2d>
							dsp_data[0][2][5] = 0x10;
    1ea0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
							LC_change--;
    1ea4:	81 50       	subi	r24, 0x01	; 1
    1ea6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
    1eaa:	ae da       	rcall	.-2724   	; 0x1408 <dsp_arrayinit_static>
    1eac:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <BPR>
							dsp_arrayinit_static();
    1eb0:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
						}
						num_to_digit(0,calc_BB(BPF,BPR),0,2,6,2);//writes the number 55 for BB  TEST ONLY!!!
    1eb4:	69 2f       	mov	r22, r25
    1eb6:	0e 94 c0 05 	call	0xb80	; 0xb80 <calc_BB>
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	68 94       	set
    1ec0:	ee 24       	eor	r14, r14
    1ec2:	e1 f8       	bld	r14, 1
    1ec4:	06 e0       	ldi	r16, 0x06	; 6
    1ec6:	22 e0       	ldi	r18, 0x02	; 2
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	bc 01       	movw	r22, r24
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    1ed2:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <Laptime>
    1ed6:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <Laptime+0x1>
					}
//--------------------------------Switching between error indicator and diff time ---------------------------------------
				difftime = Laptime-Besttime;//calculate the differenz from your best time from your last
    1eda:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <Laptime+0x2>
    1ede:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <Laptime+0x3>
    1ee2:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    1ee6:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
    1eea:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    1eee:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    1ef2:	79 01       	movw	r14, r18
    1ef4:	8a 01       	movw	r16, r20
    1ef6:	e8 1a       	sub	r14, r24
    1ef8:	f9 0a       	sbc	r15, r25
    1efa:	0a 0b       	sbc	r16, r26
    1efc:	1b 0b       	sbc	r17, r27
    1efe:	d8 01       	movw	r26, r16
    1f00:	c7 01       	movw	r24, r14
    1f02:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <difftime>
    1f06:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <difftime+0x1>
    1f0a:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <difftime+0x2>
    1f0e:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <difftime+0x3>
    1f12:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <difftime_old>
    1f16:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <difftime_old+0x1>
				
				if (difftime_old != difftime){//If your diff time has been updated (new Lap) we want to show your diff on the homescreen
    1f1a:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <difftime_old+0x2>
    1f1e:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <difftime_old+0x3>
    1f22:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1f26:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
    1f2a:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1f2e:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1f32:	28 17       	cp	r18, r24
    1f34:	39 07       	cpc	r19, r25
    1f36:	4a 07       	cpc	r20, r26
    1f38:	5b 07       	cpc	r21, r27
    1f3a:	a1 f1       	breq	.+104    	; 0x1fa4 <main+0x27c>
    1f3c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1f40:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
					systime_time_indicator = sys_time;
    1f44:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1f48:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1f4c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1f50:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1f54:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1f58:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1f5c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <systime_time_indicator>
    1f60:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <systime_time_indicator+0x1>
					systime_time_indicator += time_indicator_intervall;
    1f64:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1f68:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1f6c:	88 57       	subi	r24, 0x78	; 120
    1f6e:	9c 4e       	sbci	r25, 0xEC	; 236
    1f70:	af 4f       	sbci	r26, 0xFF	; 255
    1f72:	bf 4f       	sbci	r27, 0xFF	; 255
    1f74:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1f78:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1f7c:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1f80:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1f84:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1f88:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					difftime_old = difftime;
    1f8c:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1f90:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1f94:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <difftime_old>
    1f98:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <difftime_old+0x1>
    1f9c:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <difftime_old+0x2>
    1fa0:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <difftime_old+0x3>
    1fa4:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <systime_time_indicator>
    1fa8:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <systime_time_indicator+0x1>
				}
				if (systime_time_indicator > sys_time){
    1fac:	40 91 41 02 	lds	r20, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1fb0:	50 91 42 02 	lds	r21, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1fb4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1fb8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1fbc:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1fc0:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1fc4:	82 17       	cp	r24, r18
    1fc6:	93 07       	cpc	r25, r19
    1fc8:	a4 07       	cpc	r26, r20
    1fca:	b5 07       	cpc	r27, r21
    1fcc:	68 f5       	brcc	.+90     	; 0x2028 <main+0x300>
    1fce:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1fd2:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					time_to_digit(0,abs(difftime),1,3);
    1fd6:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1fda:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1fde:	99 23       	and	r25, r25
    1fe0:	1c f4       	brge	.+6      	; 0x1fe8 <main+0x2c0>
    1fe2:	91 95       	neg	r25
    1fe4:	81 95       	neg	r24
    1fe6:	91 09       	sbc	r25, r1
    1fe8:	09 2e       	mov	r0, r25
    1fea:	00 0c       	add	r0, r0
    1fec:	aa 0b       	sbc	r26, r26
    1fee:	bb 0b       	sbc	r27, r27
    1ff0:	03 e0       	ldi	r16, 0x03	; 3
    1ff2:	21 e0       	ldi	r18, 0x01	; 1
    1ff4:	ac 01       	movw	r20, r24
    1ff6:	bd 01       	movw	r22, r26
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	0e 94 f6 07 	call	0xfec	; 0xfec <time_to_digit>
    1ffe:	8a e3       	ldi	r24, 0x3A	; 58
    2000:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <dsp_data+0x41>
					dsp_data[0][3][5] = ':';
    2004:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    2008:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					if (difftime >= 0){
    200c:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    2010:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    2014:	bb 23       	and	r27, r27
    2016:	24 f0       	brlt	.+8      	; 0x2020 <main+0x2f8>
    2018:	8b e2       	ldi	r24, 0x2B	; 43
    201a:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
						dsp_data[0][3][0] = '+';
    201e:	0c c0       	rjmp	.+24     	; 0x2038 <main+0x310>
    2020:	8d e2       	ldi	r24, 0x2D	; 45
    2022:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
					}
					else{
					dsp_data[0][3][0] = '-';
    2026:	08 c0       	rjmp	.+16     	; 0x2038 <main+0x310>
    2028:	24 de       	rcall	.-952    	; 0x1c72 <error_handling>
    202a:	23 e0       	ldi	r18, 0x03	; 3
					}
				}
				else{//If the diff time has not been updated within the the last intervall we want to show the error stuff
					error_handling();
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	68 e2       	ldi	r22, 0x28	; 40
					string_to_digit(0,error_indicator,0,3);					
    2030:	72 e0       	ldi	r23, 0x02	; 2
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	0e 94 3f 06 	call	0xc7e	; 0xc7e <string_to_digit>
    2038:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    203c:	81 30       	cpi	r24, 0x01	; 1
			}
			
			
			
			
			if (dsp_mde == 1){ //debug screen
    203e:	c1 f5       	brne	.+112    	; 0x20b0 <main+0x388>
    2040:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <APPS1>
    2044:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS1,0,3,5,1);
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	ee 24       	eor	r14, r14
    204a:	e3 94       	inc	r14
    204c:	05 e0       	ldi	r16, 0x05	; 5
    204e:	23 e0       	ldi	r18, 0x03	; 3
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	bc 01       	movw	r22, r24
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    205a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <APPS2>
    205e:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS2,0,3,12,1);
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	ee 24       	eor	r14, r14
    2064:	e3 94       	inc	r14
    2066:	0c e0       	ldi	r16, 0x0C	; 12
    2068:	23 e0       	ldi	r18, 0x03	; 3
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	bc 01       	movw	r22, r24
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    2074:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
    2078:	88 2f       	mov	r24, r24

				num_to_digit(1,BPF,0,2,4,3);
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0f 2e       	mov	r0, r31
    207e:	f3 e0       	ldi	r31, 0x03	; 3
    2080:	ef 2e       	mov	r14, r31
    2082:	f0 2d       	mov	r31, r0
    2084:	04 e0       	ldi	r16, 0x04	; 4
    2086:	22 e0       	ldi	r18, 0x02	; 2
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	bc 01       	movw	r22, r24
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    2092:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <BPR>
    2096:	88 2f       	mov	r24, r24
				num_to_digit(1,BPR,0,2,10,3);				
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0f 2e       	mov	r0, r31
    209c:	f3 e0       	ldi	r31, 0x03	; 3
    209e:	ef 2e       	mov	r14, r31
    20a0:	f0 2d       	mov	r31, r0
    20a2:	0a e0       	ldi	r16, 0x0A	; 10
    20a4:	22 e0       	ldi	r18, 0x02	; 2
    20a6:	40 e0       	ldi	r20, 0x00	; 0
    20a8:	bc 01       	movw	r22, r24
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    20b0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    20b4:	82 30       	cpi	r24, 0x02	; 2
			
			
			
			
			
			if (dsp_mde == 2){ //Times screen
    20b6:	09 f0       	breq	.+2      	; 0x20ba <main+0x392>
    20b8:	51 c0       	rjmp	.+162    	; 0x215c <main+0x434>
    20ba:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    20be:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
				time_to_digit(2,Besttime,4,1); //BEST/LAP Convertes a time in ms to minutes:seconds:milliseconds
    20c2:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    20c6:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    20ca:	01 e0       	ldi	r16, 0x01	; 1
    20cc:	24 e0       	ldi	r18, 0x04	; 4
    20ce:	ac 01       	movw	r20, r24
    20d0:	bd 01       	movw	r22, r26
    20d2:	82 e0       	ldi	r24, 0x02	; 2
    20d4:	0e 94 f6 07 	call	0xfec	; 0xfec <time_to_digit>
    20d8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Pred_time>
    20dc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Pred_time+0x1>
				time_to_digit(2,Pred_time,4,2); //Predicted
    20e0:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <Pred_time+0x2>
    20e4:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <Pred_time+0x3>
    20e8:	02 e0       	ldi	r16, 0x02	; 2
    20ea:	24 e0       	ldi	r18, 0x04	; 4
    20ec:	ac 01       	movw	r20, r24
    20ee:	bd 01       	movw	r22, r26
    20f0:	82 e0       	ldi	r24, 0x02	; 2
    20f2:	0e 94 f6 07 	call	0xfec	; 0xfec <time_to_digit>
    20f6:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <ODO>
    20fa:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <ODO+0x1>
				num_to_digit(2,ODO,0,3,10,3); //ODO
    20fe:	0f 2e       	mov	r0, r31
    2100:	f3 e0       	ldi	r31, 0x03	; 3
    2102:	ef 2e       	mov	r14, r31
    2104:	f0 2d       	mov	r31, r0
    2106:	0a e0       	ldi	r16, 0x0A	; 10
    2108:	23 e0       	ldi	r18, 0x03	; 3
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	bc 01       	movw	r22, r24
    210e:	82 e0       	ldi	r24, 0x02	; 2
    2110:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    2114:	e1 2c       	mov	r14, r1
    2116:	03 e0       	ldi	r16, 0x03	; 3
    2118:	21 e0       	ldi	r18, 0x01	; 1
				num_to_digit(2,9,0,1,3,0);//TC setting needs to be implemented!!!
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	69 e0       	ldi	r22, 0x09	; 9
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    2126:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <LapNumber>
    212a:	88 2f       	mov	r24, r24
				num_to_digit(2,LapNumber,0,2,3,3);//Lap number
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0f 2e       	mov	r0, r31
    2130:	f3 e0       	ldi	r31, 0x03	; 3
    2132:	ef 2e       	mov	r14, r31
    2134:	f0 2d       	mov	r31, r0
    2136:	03 e0       	ldi	r16, 0x03	; 3
    2138:	22 e0       	ldi	r18, 0x02	; 2
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	bc 01       	movw	r22, r24
    213e:	82 e0       	ldi	r24, 0x02	; 2
    2140:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    2144:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    2148:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(2,GPS_Speed,0,3,10,0);//Speed
    214c:	e1 2c       	mov	r14, r1
    214e:	0a e0       	ldi	r16, 0x0A	; 10
    2150:	23 e0       	ldi	r18, 0x03	; 3
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	bc 01       	movw	r22, r24
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	0e 94 93 06 	call	0xd26	; 0xd26 <num_to_digit>
    215c:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <draw_data>
				
			}
		}
		if(draw_data){ //1000Hz/1ms loop
    2160:	88 23       	and	r24, r24
    2162:	31 f0       	breq	.+12     	; 0x2170 <main+0x448>
    2164:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			dsp_write(dsp_mde);
    2168:	d7 db       	rcall	.-2130   	; 0x1918 <dsp_write>
    216a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <draw_data>
			draw_data = 0;
    216e:	98 d0       	rcall	.+304    	; 0x22a0 <LED_Blink_CTRL>
    2170:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
			LED_Blink_CTRL();		
    2174:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}	
		if((sys_time - time_100) >= 10){//100Hz/10ms loop
    2178:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    217c:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    2180:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <time_100>
    2184:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <time_100+0x1>
    2188:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <time_100+0x2>
    218c:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <time_100+0x3>
    2190:	79 01       	movw	r14, r18
    2192:	8a 01       	movw	r16, r20
    2194:	e8 1a       	sub	r14, r24
    2196:	f9 0a       	sbc	r15, r25
    2198:	0a 0b       	sbc	r16, r26
    219a:	1b 0b       	sbc	r17, r27
    219c:	d8 01       	movw	r26, r16
    219e:	c7 01       	movw	r24, r14
    21a0:	0a 97       	sbiw	r24, 0x0a	; 10
    21a2:	a1 05       	cpc	r26, r1
    21a4:	b1 05       	cpc	r27, r1
    21a6:	a0 f0       	brcs	.+40     	; 0x21d0 <main+0x4a8>
    21a8:	0e 94 2a 03 	call	0x654	; 0x654 <CAN_recieve>
    21ac:	0e 94 73 03 	call	0x6e6	; 0x6e6 <CAN_put_data>
			CAN_recieve();
    21b0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
			CAN_put_data();			
    21b4:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_100 = sys_time;		
    21b8:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    21bc:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    21c0:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <time_100>
    21c4:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <time_100+0x1>
    21c8:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <time_100+0x2>
    21cc:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <time_100+0x3>
    21d0:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
    21d4:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}
		if((sys_time - time_10) >= 100){//10Hz/100ms loop
    21d8:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    21dc:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    21e0:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <time_10>
    21e4:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <time_10+0x1>
    21e8:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <time_10+0x2>
    21ec:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <time_10+0x3>
    21f0:	79 01       	movw	r14, r18
    21f2:	8a 01       	movw	r16, r20
    21f4:	e8 1a       	sub	r14, r24
    21f6:	f9 0a       	sbc	r15, r25
    21f8:	0a 0b       	sbc	r16, r26
    21fa:	1b 0b       	sbc	r17, r27
    21fc:	d8 01       	movw	r26, r16
    21fe:	c7 01       	movw	r24, r14
    2200:	84 36       	cpi	r24, 0x64	; 100
    2202:	91 05       	cpc	r25, r1
    2204:	a1 05       	cpc	r26, r1
    2206:	b1 05       	cpc	r27, r1
    2208:	08 f4       	brcc	.+2      	; 0x220c <main+0x4e4>
    220a:	cb cd       	rjmp	.-1130   	; 0x1da2 <main+0x7a>
    220c:	84 e3       	ldi	r24, 0x34	; 52
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	24 e3       	ldi	r18, 0x34	; 52
			PORTG ^= (1<<PG3);
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	f9 01       	movw	r30, r18
    2216:	30 81       	ld	r19, Z
    2218:	28 e0       	ldi	r18, 0x08	; 8
    221a:	23 27       	eor	r18, r19
    221c:	fc 01       	movw	r30, r24
    221e:	20 83       	st	Z, r18
    2220:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    2224:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_10 = sys_time;
    2228:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    222c:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2230:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <time_10>
    2234:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <time_10+0x1>
    2238:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <time_10+0x2>
    223c:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <time_10+0x3>
    2240:	0e 94 b2 05 	call	0xb64	; 0xb64 <toggle>
    2244:	ae cd       	rjmp	.-1188   	; 0x1da2 <main+0x7a>

00002246 <LED_Blink>:
			toggle();
    2246:	cf 93       	push	r28
    2248:	df 93       	push	r29
		}
	}	
    224a:	00 d0       	rcall	.+0      	; 0x224c <LED_Blink+0x6>
}

void LED_Blink(uint8_t Anzahl_Blinks, uint16_t Zeit_fuer_Blinken){
    224c:	1f 92       	push	r1
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	7b 83       	std	Y+3, r23	; 0x03
    2256:	6a 83       	std	Y+2, r22	; 0x02
	Anzahl_Blinks_Glob = Anzahl_Blinks;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <Anzahl_Blinks_Glob>
	Zeit_fuer_Blinken_Glob = Zeit_fuer_Blinken;
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    2266:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <Zeit_fuer_Blinken_Glob>
	sys_time_blink = sys_time;
    226a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    226e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    2272:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2276:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    227a:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <sys_time_blink>
    227e:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <sys_time_blink+0x1>
    2282:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <sys_time_blink+0x2>
    2286:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <sys_time_blink+0x3>
	LED_Blink_Flag = 0;
    228a:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    228e:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	}
    2292:	00 00       	nop
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	08 95       	ret

000022a0 <LED_Blink_CTRL>:

void LED_Blink_CTRL(){
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
	
	if (LED_Blink_Flag < Anzahl_Blinks_Glob)
    22ac:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <LED_Blink_Flag>
    22b0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    22b4:	98 17       	cp	r25, r24
    22b6:	08 f0       	brcs	.+2      	; 0x22ba <LED_Blink_CTRL+0x1a>
    22b8:	a2 c0       	rjmp	.+324    	; 0x23fe <LED_Blink_CTRL+0x15e>
	{
		if (((sys_time_blink + (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)/2) + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 0))
    22ba:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    22be:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    22c2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	ac 01       	movw	r20, r24
    22d0:	c9 01       	movw	r24, r18
    22d2:	ba 01       	movw	r22, r20
    22d4:	45 d3       	rcall	.+1674   	; 0x2960 <__udivmodhi4>
    22d6:	cb 01       	movw	r24, r22
    22d8:	96 95       	lsr	r25
    22da:	87 95       	ror	r24
    22dc:	9c 01       	movw	r18, r24
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    22e6:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    22ea:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    22ee:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    22f2:	89 01       	movw	r16, r18
    22f4:	9a 01       	movw	r18, r20
    22f6:	08 0f       	add	r16, r24
    22f8:	19 1f       	adc	r17, r25
    22fa:	2a 1f       	adc	r18, r26
    22fc:	3b 1f       	adc	r19, r27
    22fe:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2302:	e8 2f       	mov	r30, r24
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    230a:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    230e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	bc 01       	movw	r22, r24
    231c:	ca 01       	movw	r24, r20
    231e:	20 d3       	rcall	.+1600   	; 0x2960 <__udivmodhi4>
    2320:	cb 01       	movw	r24, r22
    2322:	ac 01       	movw	r20, r24
    2324:	e4 9f       	mul	r30, r20
    2326:	c0 01       	movw	r24, r0
    2328:	e5 9f       	mul	r30, r21
    232a:	90 0d       	add	r25, r0
    232c:	f4 9f       	mul	r31, r20
    232e:	90 0d       	add	r25, r0
    2330:	11 24       	eor	r1, r1
    2332:	cc 01       	movw	r24, r24
    2334:	a0 e0       	ldi	r26, 0x00	; 0
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	a9 01       	movw	r20, r18
    233a:	98 01       	movw	r18, r16
    233c:	28 0f       	add	r18, r24
    233e:	39 1f       	adc	r19, r25
    2340:	4a 1f       	adc	r20, r26
    2342:	5b 1f       	adc	r21, r27
    2344:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    2348:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    234c:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2350:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2354:	82 17       	cp	r24, r18
    2356:	93 07       	cpc	r25, r19
    2358:	a4 07       	cpc	r26, r20
    235a:	b5 07       	cpc	r27, r21
    235c:	88 f0       	brcs	.+34     	; 0x2380 <LED_Blink_CTRL+0xe0>
    235e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
    2362:	88 23       	and	r24, r24
    2364:	69 f4       	brne	.+26     	; 0x2380 <LED_Blink_CTRL+0xe0>
		{
			LED_Blink_on = 1;
    2366:	81 e0       	ldi	r24, 0x01	; 1
    2368:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <LED_Blink_on>
			
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    236c:	85 e0       	ldi	r24, 0x05	; 5
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
    236e:	ac d9       	rcall	.-3240   	; 0x16c8 <led_left_top_bar_select>
    2370:	8a e0       	ldi	r24, 0x0A	; 10
    2372:	e6 d9       	rcall	.-3124   	; 0x1740 <led_right_top_bar_select>
			
			LED_Blink_Flag++;
    2374:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2378:	8f 5f       	subi	r24, 0xFF	; 255
    237a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <LED_Blink_Flag>
	Anzahl_Blinks_Glob = 0;
	LED_Blink_on = 0;
	clear_top_left_bar();
	clear_top_right_bar();
	}
    237e:	47 c0       	rjmp	.+142    	; 0x240e <LED_Blink_CTRL+0x16e>
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
			
			LED_Blink_Flag++;
			
		}
		else if (((sys_time_blink  + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 1))
    2380:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    238c:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    2390:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    2394:	88 2f       	mov	r24, r24
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	bc 01       	movw	r22, r24
    239e:	ca 01       	movw	r24, r20
    23a0:	df d2       	rcall	.+1470   	; 0x2960 <__udivmodhi4>
    23a2:	cb 01       	movw	r24, r22
    23a4:	ac 01       	movw	r20, r24
    23a6:	24 9f       	mul	r18, r20
    23a8:	c0 01       	movw	r24, r0
    23aa:	25 9f       	mul	r18, r21
    23ac:	90 0d       	add	r25, r0
    23ae:	34 9f       	mul	r19, r20
    23b0:	90 0d       	add	r25, r0
    23b2:	11 24       	eor	r1, r1
    23b4:	9c 01       	movw	r18, r24
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    23be:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    23c2:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    23c6:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    23ca:	28 0f       	add	r18, r24
    23cc:	39 1f       	adc	r19, r25
    23ce:	4a 1f       	adc	r20, r26
    23d0:	5b 1f       	adc	r21, r27
    23d2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    23d6:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    23da:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    23de:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    23e2:	82 17       	cp	r24, r18
    23e4:	93 07       	cpc	r25, r19
    23e6:	a4 07       	cpc	r26, r20
    23e8:	b5 07       	cpc	r27, r21
    23ea:	88 f0       	brcs	.+34     	; 0x240e <LED_Blink_CTRL+0x16e>
    23ec:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
		{
			LED_Blink_on = 0;
    23f0:	81 30       	cpi	r24, 0x01	; 1
    23f2:	69 f4       	brne	.+26     	; 0x240e <LED_Blink_CTRL+0x16e>
			clear_top_left_bar();
    23f4:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
			clear_top_right_bar();
    23f8:	38 d9       	rcall	.-3472   	; 0x166a <clear_top_left_bar>
    23fa:	51 d9       	rcall	.-3422   	; 0x169e <clear_top_right_bar>
		}
	}else{
	LED_Blink_Flag = 0;
    23fc:	08 c0       	rjmp	.+16     	; 0x240e <LED_Blink_CTRL+0x16e>
	Anzahl_Blinks_Glob = 0;
    23fe:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    2402:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <Anzahl_Blinks_Glob>
	clear_top_left_bar();
    2406:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	clear_top_right_bar();
    240a:	2f d9       	rcall	.-3490   	; 0x166a <clear_top_left_bar>
    240c:	48 d9       	rcall	.-3440   	; 0x169e <clear_top_right_bar>
	}
    240e:	00 00       	nop
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	08 95       	ret

0000241a <__vector_20>:
    241a:	1f 92       	push	r1
    241c:	0f 92       	push	r0
    241e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2422:	0f 92       	push	r0
    2424:	11 24       	eor	r1, r1
    2426:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    242a:	0f 92       	push	r0
    242c:	2f 93       	push	r18
    242e:	3f 93       	push	r19
    2430:	8f 93       	push	r24
    2432:	9f 93       	push	r25
    2434:	ef 93       	push	r30
    2436:	ff 93       	push	r31
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <spi_state>
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	91 05       	cpc	r25, r1
    244c:	81 f0       	breq	.+32     	; 0x246e <__vector_20+0x54>
    244e:	83 30       	cpi	r24, 0x03	; 3
    2450:	91 05       	cpc	r25, r1
    2452:	b9 f0       	breq	.+46     	; 0x2482 <__vector_20+0x68>
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	09 f0       	breq	.+2      	; 0x245a <__vector_20+0x40>
    2458:	29 c0       	rjmp	.+82     	; 0x24ac <__vector_20+0x92>
    245a:	8e e4       	ldi	r24, 0x4E	; 78
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <current_msg+0x2>
    2462:	fc 01       	movw	r30, r24
    2464:	20 83       	st	Z, r18
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    246c:	1f c0       	rjmp	.+62     	; 0x24ac <__vector_20+0x92>
    246e:	8e e4       	ldi	r24, 0x4E	; 78
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <current_msg+0x3>
    2476:	fc 01       	movw	r30, r24
    2478:	20 83       	st	Z, r18
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    2480:	15 c0       	rjmp	.+42     	; 0x24ac <__vector_20+0x92>
    2482:	85 e2       	ldi	r24, 0x25	; 37
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	25 e2       	ldi	r18, 0x25	; 37
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	f9 01       	movw	r30, r18
    248c:	20 81       	ld	r18, Z
    248e:	20 68       	ori	r18, 0x80	; 128
    2490:	fc 01       	movw	r30, r24
    2492:	20 83       	st	Z, r18
    2494:	82 e2       	ldi	r24, 0x22	; 34
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	22 e2       	ldi	r18, 0x22	; 34
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	f9 01       	movw	r30, r18
    249e:	20 81       	ld	r18, Z
    24a0:	28 60       	ori	r18, 0x08	; 8
    24a2:	fc 01       	movw	r30, r24
    24a4:	20 83       	st	Z, r18
    24a6:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <spi_state>
    24aa:	00 00       	nop
    24ac:	00 00       	nop
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	ff 91       	pop	r31
    24b4:	ef 91       	pop	r30
    24b6:	9f 91       	pop	r25
    24b8:	8f 91       	pop	r24
    24ba:	3f 91       	pop	r19
    24bc:	2f 91       	pop	r18
    24be:	0f 90       	pop	r0
    24c0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    24c4:	0f 90       	pop	r0
    24c6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    24ca:	0f 90       	pop	r0
    24cc:	1f 90       	pop	r1
    24ce:	18 95       	reti

000024d0 <port_config>:
extern volatile unsigned long sys_time;
uint8_t update_data = 0;
uint8_t draw_data = 0;

void port_config(void)
{
    24d0:	cf 93       	push	r28
    24d2:	df 93       	push	r29
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	//PA2 --> IMD_LED
	//PA3 --> Chip_Select_RGB_Left
	//(PA4 - PA7) --> Top Bar
	DDRA |= (1<<PA2) | (1<<PA3) | (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
    24d8:	81 e2       	ldi	r24, 0x21	; 33
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	21 e2       	ldi	r18, 0x21	; 33
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	f9 01       	movw	r30, r18
    24e2:	20 81       	ld	r18, Z
    24e4:	2c 6f       	ori	r18, 0xFC	; 252
    24e6:	fc 01       	movw	r30, r24
    24e8:	20 83       	st	Z, r18
	
	//Button Inputs
	DDRA &= ~(1<<PA0) & ~(1<<PA1);
    24ea:	81 e2       	ldi	r24, 0x21	; 33
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	21 e2       	ldi	r18, 0x21	; 33
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	f9 01       	movw	r30, r18
    24f4:	20 81       	ld	r18, Z
    24f6:	2c 7f       	andi	r18, 0xFC	; 252
    24f8:	fc 01       	movw	r30, r24
    24fa:	20 83       	st	Z, r18
	//PB2 --> MOSI
	//PB4 --> Display_Enable
	//PB5 --> Display_R/W
	//PB6 --> Display_RS
	//PB7 --> Chip_Select_RGB_Right
	DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
    24fc:	84 e2       	ldi	r24, 0x24	; 36
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	24 e2       	ldi	r18, 0x24	; 36
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	f9 01       	movw	r30, r18
    2506:	20 81       	ld	r18, Z
    2508:	26 6f       	ori	r18, 0xF6	; 246
    250a:	fc 01       	movw	r30, r24
    250c:	20 83       	st	Z, r18
	
	//PB3 --> MISO
	DDRB &= ~(1<<PB3);
    250e:	84 e2       	ldi	r24, 0x24	; 36
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	24 e2       	ldi	r18, 0x24	; 36
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	f9 01       	movw	r30, r18
    2518:	20 81       	ld	r18, Z
    251a:	27 7f       	andi	r18, 0xF7	; 247
    251c:	fc 01       	movw	r30, r24
    251e:	20 83       	st	Z, r18
	
	//Top Bar
	DDRC = 0xFF;
    2520:	87 e2       	ldi	r24, 0x27	; 39
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	2f ef       	ldi	r18, 0xFF	; 255
    2526:	fc 01       	movw	r30, r24
    2528:	20 83       	st	Z, r18
	
	//Bottom Bar
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3) | (1<<PD4) | (1<<PD7);
    252a:	8a e2       	ldi	r24, 0x2A	; 42
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	2a e2       	ldi	r18, 0x2A	; 42
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	f9 01       	movw	r30, r18
    2534:	20 81       	ld	r18, Z
    2536:	2f 69       	ori	r18, 0x9F	; 159
    2538:	fc 01       	movw	r30, r24
    253a:	20 83       	st	Z, r18
	
	//Display-Bus Bar
	DDRE = 0xFF;
    253c:	8d e2       	ldi	r24, 0x2D	; 45
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	2f ef       	ldi	r18, 0xFF	; 255
    2542:	fc 01       	movw	r30, r24
    2544:	20 83       	st	Z, r18
	
	//SDCI Inputs:
	//PF1 --> SDB_DB
	//PF2 --> Inertia
	//PF3 --> BOTS
	DDRF &= ~(1<<PF1) & ~(1<<PF2) & ~(1<<PF3);
    2546:	80 e3       	ldi	r24, 0x30	; 48
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	20 e3       	ldi	r18, 0x30	; 48
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	f9 01       	movw	r30, r18
    2550:	20 81       	ld	r18, Z
    2552:	21 7f       	andi	r18, 0xF1	; 241
    2554:	fc 01       	movw	r30, r24
    2556:	20 83       	st	Z, r18
	
	//(PG0 - PG2) --> Top Bar
	//PG3 --> Heart
	//PG4 --> Fault
	DDRG |= (1<<PG0) | (1<<PG1) | (1<<PG2) | (1<<PG3) | (1<<PG4);
    2558:	83 e3       	ldi	r24, 0x33	; 51
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	23 e3       	ldi	r18, 0x33	; 51
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	f9 01       	movw	r30, r18
    2562:	20 81       	ld	r18, Z
    2564:	2f 61       	ori	r18, 0x1F	; 31
    2566:	fc 01       	movw	r30, r24
    2568:	20 83       	st	Z, r18
	
	//Resetting all PORTS
	PORTA = 0;
    256a:	82 e2       	ldi	r24, 0x22	; 34
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	fc 01       	movw	r30, r24
    2570:	10 82       	st	Z, r1
	//Resetting Display-Control-Ports
	PORTB = 0;
    2572:	85 e2       	ldi	r24, 0x25	; 37
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	fc 01       	movw	r30, r24
    2578:	10 82       	st	Z, r1
	PORTC = 0;
    257a:	88 e2       	ldi	r24, 0x28	; 40
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	fc 01       	movw	r30, r24
    2580:	10 82       	st	Z, r1
	PORTD = 0;
    2582:	8b e2       	ldi	r24, 0x2B	; 43
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	fc 01       	movw	r30, r24
    2588:	10 82       	st	Z, r1
	//Resetting Display-Bus Bar
	PORTE = 0;
    258a:	8e e2       	ldi	r24, 0x2E	; 46
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	fc 01       	movw	r30, r24
    2590:	10 82       	st	Z, r1
	PORTF = 0;
    2592:	81 e3       	ldi	r24, 0x31	; 49
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	fc 01       	movw	r30, r24
    2598:	10 82       	st	Z, r1
	PORTG = 0;
    259a:	84 e3       	ldi	r24, 0x34	; 52
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	fc 01       	movw	r30, r24
    25a0:	10 82       	st	Z, r1
	
	//Selecting Pull-Up Resistors for Button - Inputs
	PORTA |= (1<<PA0) | (1<<PA1);
    25a2:	82 e2       	ldi	r24, 0x22	; 34
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	22 e2       	ldi	r18, 0x22	; 34
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	f9 01       	movw	r30, r18
    25ac:	20 81       	ld	r18, Z
    25ae:	23 60       	ori	r18, 0x03	; 3
    25b0:	fc 01       	movw	r30, r24
    25b2:	20 83       	st	Z, r18
}
    25b4:	00 00       	nop
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <sys_timer_config>:

void sys_timer_config(void)
{
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
	//8 bit Timer 0 configuration
	//Mode --> CTC, Divider --> /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
    25c4:	84 e4       	ldi	r24, 0x44	; 68
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	2b e0       	ldi	r18, 0x0B	; 11
    25ca:	fc 01       	movw	r30, r24
    25cc:	20 83       	st	Z, r18
	//compare interrupt enable
	TIMSK0 = 0 | (1<<OCIE0A);
    25ce:	8e e6       	ldi	r24, 0x6E	; 110
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	22 e0       	ldi	r18, 0x02	; 2
    25d4:	fc 01       	movw	r30, r24
    25d6:	20 83       	st	Z, r18
	//compare value for 1ms;
	OCR0A = 250-1;
    25d8:	87 e4       	ldi	r24, 0x47	; 71
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	29 ef       	ldi	r18, 0xF9	; 249
    25de:	fc 01       	movw	r30, r24
    25e0:	20 83       	st	Z, r18
}
    25e2:	00 00       	nop
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <__vector_16>:

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    25f2:	0f 92       	push	r0
    25f4:	11 24       	eor	r1, r1
    25f6:	8f 93       	push	r24
    25f8:	9f 93       	push	r25
    25fa:	af 93       	push	r26
    25fc:	bf 93       	push	r27
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	draw_data = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <draw_data>
	update_data++;
    260c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <update_data>
	sys_time++;
    2616:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    261a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    261e:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2622:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	a1 1d       	adc	r26, r1
    262a:	b1 1d       	adc	r27, r1
    262c:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <sys_time>
    2630:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <sys_time+0x1>
    2634:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <sys_time+0x2>
    2638:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <sys_time+0x3>
	
}
    263c:	00 00       	nop
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	bf 91       	pop	r27
    2644:	af 91       	pop	r26
    2646:	9f 91       	pop	r25
    2648:	8f 91       	pop	r24
    264a:	0f 90       	pop	r0
    264c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2650:	0f 90       	pop	r0
    2652:	1f 90       	pop	r1
    2654:	18 95       	reti

00002656 <__divsf3>:
    2656:	0c d0       	rcall	.+24     	; 0x2670 <__divsf3x>
    2658:	e6 c0       	rjmp	.+460    	; 0x2826 <__fp_round>
    265a:	de d0       	rcall	.+444    	; 0x2818 <__fp_pscB>
    265c:	40 f0       	brcs	.+16     	; 0x266e <__divsf3+0x18>
    265e:	d5 d0       	rcall	.+426    	; 0x280a <__fp_pscA>
    2660:	30 f0       	brcs	.+12     	; 0x266e <__divsf3+0x18>
    2662:	21 f4       	brne	.+8      	; 0x266c <__divsf3+0x16>
    2664:	5f 3f       	cpi	r21, 0xFF	; 255
    2666:	19 f0       	breq	.+6      	; 0x266e <__divsf3+0x18>
    2668:	c7 c0       	rjmp	.+398    	; 0x27f8 <__fp_inf>
    266a:	51 11       	cpse	r21, r1
    266c:	10 c1       	rjmp	.+544    	; 0x288e <__fp_szero>
    266e:	ca c0       	rjmp	.+404    	; 0x2804 <__fp_nan>

00002670 <__divsf3x>:
    2670:	eb d0       	rcall	.+470    	; 0x2848 <__fp_split3>
    2672:	98 f3       	brcs	.-26     	; 0x265a <__divsf3+0x4>

00002674 <__divsf3_pse>:
    2674:	99 23       	and	r25, r25
    2676:	c9 f3       	breq	.-14     	; 0x266a <__divsf3+0x14>
    2678:	55 23       	and	r21, r21
    267a:	b1 f3       	breq	.-20     	; 0x2668 <__divsf3+0x12>
    267c:	95 1b       	sub	r25, r21
    267e:	55 0b       	sbc	r21, r21
    2680:	bb 27       	eor	r27, r27
    2682:	aa 27       	eor	r26, r26
    2684:	62 17       	cp	r22, r18
    2686:	73 07       	cpc	r23, r19
    2688:	84 07       	cpc	r24, r20
    268a:	38 f0       	brcs	.+14     	; 0x269a <__divsf3_pse+0x26>
    268c:	9f 5f       	subi	r25, 0xFF	; 255
    268e:	5f 4f       	sbci	r21, 0xFF	; 255
    2690:	22 0f       	add	r18, r18
    2692:	33 1f       	adc	r19, r19
    2694:	44 1f       	adc	r20, r20
    2696:	aa 1f       	adc	r26, r26
    2698:	a9 f3       	breq	.-22     	; 0x2684 <__divsf3_pse+0x10>
    269a:	33 d0       	rcall	.+102    	; 0x2702 <__divsf3_pse+0x8e>
    269c:	0e 2e       	mov	r0, r30
    269e:	3a f0       	brmi	.+14     	; 0x26ae <__divsf3_pse+0x3a>
    26a0:	e0 e8       	ldi	r30, 0x80	; 128
    26a2:	30 d0       	rcall	.+96     	; 0x2704 <__divsf3_pse+0x90>
    26a4:	91 50       	subi	r25, 0x01	; 1
    26a6:	50 40       	sbci	r21, 0x00	; 0
    26a8:	e6 95       	lsr	r30
    26aa:	00 1c       	adc	r0, r0
    26ac:	ca f7       	brpl	.-14     	; 0x26a0 <__divsf3_pse+0x2c>
    26ae:	29 d0       	rcall	.+82     	; 0x2702 <__divsf3_pse+0x8e>
    26b0:	fe 2f       	mov	r31, r30
    26b2:	27 d0       	rcall	.+78     	; 0x2702 <__divsf3_pse+0x8e>
    26b4:	66 0f       	add	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	88 1f       	adc	r24, r24
    26ba:	bb 1f       	adc	r27, r27
    26bc:	26 17       	cp	r18, r22
    26be:	37 07       	cpc	r19, r23
    26c0:	48 07       	cpc	r20, r24
    26c2:	ab 07       	cpc	r26, r27
    26c4:	b0 e8       	ldi	r27, 0x80	; 128
    26c6:	09 f0       	breq	.+2      	; 0x26ca <__divsf3_pse+0x56>
    26c8:	bb 0b       	sbc	r27, r27
    26ca:	80 2d       	mov	r24, r0
    26cc:	bf 01       	movw	r22, r30
    26ce:	ff 27       	eor	r31, r31
    26d0:	93 58       	subi	r25, 0x83	; 131
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255
    26d4:	2a f0       	brmi	.+10     	; 0x26e0 <__divsf3_pse+0x6c>
    26d6:	9e 3f       	cpi	r25, 0xFE	; 254
    26d8:	51 05       	cpc	r21, r1
    26da:	68 f0       	brcs	.+26     	; 0x26f6 <__divsf3_pse+0x82>
    26dc:	8d c0       	rjmp	.+282    	; 0x27f8 <__fp_inf>
    26de:	d7 c0       	rjmp	.+430    	; 0x288e <__fp_szero>
    26e0:	5f 3f       	cpi	r21, 0xFF	; 255
    26e2:	ec f3       	brlt	.-6      	; 0x26de <__divsf3_pse+0x6a>
    26e4:	98 3e       	cpi	r25, 0xE8	; 232
    26e6:	dc f3       	brlt	.-10     	; 0x26de <__divsf3_pse+0x6a>
    26e8:	86 95       	lsr	r24
    26ea:	77 95       	ror	r23
    26ec:	67 95       	ror	r22
    26ee:	b7 95       	ror	r27
    26f0:	f7 95       	ror	r31
    26f2:	9f 5f       	subi	r25, 0xFF	; 255
    26f4:	c9 f7       	brne	.-14     	; 0x26e8 <__divsf3_pse+0x74>
    26f6:	88 0f       	add	r24, r24
    26f8:	91 1d       	adc	r25, r1
    26fa:	96 95       	lsr	r25
    26fc:	87 95       	ror	r24
    26fe:	97 f9       	bld	r25, 7
    2700:	08 95       	ret
    2702:	e1 e0       	ldi	r30, 0x01	; 1
    2704:	66 0f       	add	r22, r22
    2706:	77 1f       	adc	r23, r23
    2708:	88 1f       	adc	r24, r24
    270a:	bb 1f       	adc	r27, r27
    270c:	62 17       	cp	r22, r18
    270e:	73 07       	cpc	r23, r19
    2710:	84 07       	cpc	r24, r20
    2712:	ba 07       	cpc	r27, r26
    2714:	20 f0       	brcs	.+8      	; 0x271e <__divsf3_pse+0xaa>
    2716:	62 1b       	sub	r22, r18
    2718:	73 0b       	sbc	r23, r19
    271a:	84 0b       	sbc	r24, r20
    271c:	ba 0b       	sbc	r27, r26
    271e:	ee 1f       	adc	r30, r30
    2720:	88 f7       	brcc	.-30     	; 0x2704 <__divsf3_pse+0x90>
    2722:	e0 95       	com	r30
    2724:	08 95       	ret

00002726 <__fixunssfsi>:
    2726:	98 d0       	rcall	.+304    	; 0x2858 <__fp_splitA>
    2728:	88 f0       	brcs	.+34     	; 0x274c <__fixunssfsi+0x26>
    272a:	9f 57       	subi	r25, 0x7F	; 127
    272c:	90 f0       	brcs	.+36     	; 0x2752 <__fixunssfsi+0x2c>
    272e:	b9 2f       	mov	r27, r25
    2730:	99 27       	eor	r25, r25
    2732:	b7 51       	subi	r27, 0x17	; 23
    2734:	a0 f0       	brcs	.+40     	; 0x275e <__fixunssfsi+0x38>
    2736:	d1 f0       	breq	.+52     	; 0x276c <__fixunssfsi+0x46>
    2738:	66 0f       	add	r22, r22
    273a:	77 1f       	adc	r23, r23
    273c:	88 1f       	adc	r24, r24
    273e:	99 1f       	adc	r25, r25
    2740:	1a f0       	brmi	.+6      	; 0x2748 <__fixunssfsi+0x22>
    2742:	ba 95       	dec	r27
    2744:	c9 f7       	brne	.-14     	; 0x2738 <__fixunssfsi+0x12>
    2746:	12 c0       	rjmp	.+36     	; 0x276c <__fixunssfsi+0x46>
    2748:	b1 30       	cpi	r27, 0x01	; 1
    274a:	81 f0       	breq	.+32     	; 0x276c <__fixunssfsi+0x46>
    274c:	9f d0       	rcall	.+318    	; 0x288c <__fp_zero>
    274e:	b1 e0       	ldi	r27, 0x01	; 1
    2750:	08 95       	ret
    2752:	9c c0       	rjmp	.+312    	; 0x288c <__fp_zero>
    2754:	67 2f       	mov	r22, r23
    2756:	78 2f       	mov	r23, r24
    2758:	88 27       	eor	r24, r24
    275a:	b8 5f       	subi	r27, 0xF8	; 248
    275c:	39 f0       	breq	.+14     	; 0x276c <__fixunssfsi+0x46>
    275e:	b9 3f       	cpi	r27, 0xF9	; 249
    2760:	cc f3       	brlt	.-14     	; 0x2754 <__fixunssfsi+0x2e>
    2762:	86 95       	lsr	r24
    2764:	77 95       	ror	r23
    2766:	67 95       	ror	r22
    2768:	b3 95       	inc	r27
    276a:	d9 f7       	brne	.-10     	; 0x2762 <__fixunssfsi+0x3c>
    276c:	3e f4       	brtc	.+14     	; 0x277c <__fixunssfsi+0x56>
    276e:	90 95       	com	r25
    2770:	80 95       	com	r24
    2772:	70 95       	com	r23
    2774:	61 95       	neg	r22
    2776:	7f 4f       	sbci	r23, 0xFF	; 255
    2778:	8f 4f       	sbci	r24, 0xFF	; 255
    277a:	9f 4f       	sbci	r25, 0xFF	; 255
    277c:	08 95       	ret

0000277e <__floatunsisf>:
    277e:	e8 94       	clt
    2780:	09 c0       	rjmp	.+18     	; 0x2794 <__floatsisf+0x12>

00002782 <__floatsisf>:
    2782:	97 fb       	bst	r25, 7
    2784:	3e f4       	brtc	.+14     	; 0x2794 <__floatsisf+0x12>
    2786:	90 95       	com	r25
    2788:	80 95       	com	r24
    278a:	70 95       	com	r23
    278c:	61 95       	neg	r22
    278e:	7f 4f       	sbci	r23, 0xFF	; 255
    2790:	8f 4f       	sbci	r24, 0xFF	; 255
    2792:	9f 4f       	sbci	r25, 0xFF	; 255
    2794:	99 23       	and	r25, r25
    2796:	a9 f0       	breq	.+42     	; 0x27c2 <__floatsisf+0x40>
    2798:	f9 2f       	mov	r31, r25
    279a:	96 e9       	ldi	r25, 0x96	; 150
    279c:	bb 27       	eor	r27, r27
    279e:	93 95       	inc	r25
    27a0:	f6 95       	lsr	r31
    27a2:	87 95       	ror	r24
    27a4:	77 95       	ror	r23
    27a6:	67 95       	ror	r22
    27a8:	b7 95       	ror	r27
    27aa:	f1 11       	cpse	r31, r1
    27ac:	f8 cf       	rjmp	.-16     	; 0x279e <__floatsisf+0x1c>
    27ae:	fa f4       	brpl	.+62     	; 0x27ee <__floatsisf+0x6c>
    27b0:	bb 0f       	add	r27, r27
    27b2:	11 f4       	brne	.+4      	; 0x27b8 <__floatsisf+0x36>
    27b4:	60 ff       	sbrs	r22, 0
    27b6:	1b c0       	rjmp	.+54     	; 0x27ee <__floatsisf+0x6c>
    27b8:	6f 5f       	subi	r22, 0xFF	; 255
    27ba:	7f 4f       	sbci	r23, 0xFF	; 255
    27bc:	8f 4f       	sbci	r24, 0xFF	; 255
    27be:	9f 4f       	sbci	r25, 0xFF	; 255
    27c0:	16 c0       	rjmp	.+44     	; 0x27ee <__floatsisf+0x6c>
    27c2:	88 23       	and	r24, r24
    27c4:	11 f0       	breq	.+4      	; 0x27ca <__floatsisf+0x48>
    27c6:	96 e9       	ldi	r25, 0x96	; 150
    27c8:	11 c0       	rjmp	.+34     	; 0x27ec <__floatsisf+0x6a>
    27ca:	77 23       	and	r23, r23
    27cc:	21 f0       	breq	.+8      	; 0x27d6 <__floatsisf+0x54>
    27ce:	9e e8       	ldi	r25, 0x8E	; 142
    27d0:	87 2f       	mov	r24, r23
    27d2:	76 2f       	mov	r23, r22
    27d4:	05 c0       	rjmp	.+10     	; 0x27e0 <__floatsisf+0x5e>
    27d6:	66 23       	and	r22, r22
    27d8:	71 f0       	breq	.+28     	; 0x27f6 <__floatsisf+0x74>
    27da:	96 e8       	ldi	r25, 0x86	; 134
    27dc:	86 2f       	mov	r24, r22
    27de:	70 e0       	ldi	r23, 0x00	; 0
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	2a f0       	brmi	.+10     	; 0x27ee <__floatsisf+0x6c>
    27e4:	9a 95       	dec	r25
    27e6:	66 0f       	add	r22, r22
    27e8:	77 1f       	adc	r23, r23
    27ea:	88 1f       	adc	r24, r24
    27ec:	da f7       	brpl	.-10     	; 0x27e4 <__floatsisf+0x62>
    27ee:	88 0f       	add	r24, r24
    27f0:	96 95       	lsr	r25
    27f2:	87 95       	ror	r24
    27f4:	97 f9       	bld	r25, 7
    27f6:	08 95       	ret

000027f8 <__fp_inf>:
    27f8:	97 f9       	bld	r25, 7
    27fa:	9f 67       	ori	r25, 0x7F	; 127
    27fc:	80 e8       	ldi	r24, 0x80	; 128
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	08 95       	ret

00002804 <__fp_nan>:
    2804:	9f ef       	ldi	r25, 0xFF	; 255
    2806:	80 ec       	ldi	r24, 0xC0	; 192
    2808:	08 95       	ret

0000280a <__fp_pscA>:
    280a:	00 24       	eor	r0, r0
    280c:	0a 94       	dec	r0
    280e:	16 16       	cp	r1, r22
    2810:	17 06       	cpc	r1, r23
    2812:	18 06       	cpc	r1, r24
    2814:	09 06       	cpc	r0, r25
    2816:	08 95       	ret

00002818 <__fp_pscB>:
    2818:	00 24       	eor	r0, r0
    281a:	0a 94       	dec	r0
    281c:	12 16       	cp	r1, r18
    281e:	13 06       	cpc	r1, r19
    2820:	14 06       	cpc	r1, r20
    2822:	05 06       	cpc	r0, r21
    2824:	08 95       	ret

00002826 <__fp_round>:
    2826:	09 2e       	mov	r0, r25
    2828:	03 94       	inc	r0
    282a:	00 0c       	add	r0, r0
    282c:	11 f4       	brne	.+4      	; 0x2832 <__fp_round+0xc>
    282e:	88 23       	and	r24, r24
    2830:	52 f0       	brmi	.+20     	; 0x2846 <__fp_round+0x20>
    2832:	bb 0f       	add	r27, r27
    2834:	40 f4       	brcc	.+16     	; 0x2846 <__fp_round+0x20>
    2836:	bf 2b       	or	r27, r31
    2838:	11 f4       	brne	.+4      	; 0x283e <__fp_round+0x18>
    283a:	60 ff       	sbrs	r22, 0
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__fp_round+0x20>
    283e:	6f 5f       	subi	r22, 0xFF	; 255
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	8f 4f       	sbci	r24, 0xFF	; 255
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	08 95       	ret

00002848 <__fp_split3>:
    2848:	57 fd       	sbrc	r21, 7
    284a:	90 58       	subi	r25, 0x80	; 128
    284c:	44 0f       	add	r20, r20
    284e:	55 1f       	adc	r21, r21
    2850:	59 f0       	breq	.+22     	; 0x2868 <__fp_splitA+0x10>
    2852:	5f 3f       	cpi	r21, 0xFF	; 255
    2854:	71 f0       	breq	.+28     	; 0x2872 <__fp_splitA+0x1a>
    2856:	47 95       	ror	r20

00002858 <__fp_splitA>:
    2858:	88 0f       	add	r24, r24
    285a:	97 fb       	bst	r25, 7
    285c:	99 1f       	adc	r25, r25
    285e:	61 f0       	breq	.+24     	; 0x2878 <__fp_splitA+0x20>
    2860:	9f 3f       	cpi	r25, 0xFF	; 255
    2862:	79 f0       	breq	.+30     	; 0x2882 <__fp_splitA+0x2a>
    2864:	87 95       	ror	r24
    2866:	08 95       	ret
    2868:	12 16       	cp	r1, r18
    286a:	13 06       	cpc	r1, r19
    286c:	14 06       	cpc	r1, r20
    286e:	55 1f       	adc	r21, r21
    2870:	f2 cf       	rjmp	.-28     	; 0x2856 <__fp_split3+0xe>
    2872:	46 95       	lsr	r20
    2874:	f1 df       	rcall	.-30     	; 0x2858 <__fp_splitA>
    2876:	08 c0       	rjmp	.+16     	; 0x2888 <__fp_splitA+0x30>
    2878:	16 16       	cp	r1, r22
    287a:	17 06       	cpc	r1, r23
    287c:	18 06       	cpc	r1, r24
    287e:	99 1f       	adc	r25, r25
    2880:	f1 cf       	rjmp	.-30     	; 0x2864 <__fp_splitA+0xc>
    2882:	86 95       	lsr	r24
    2884:	71 05       	cpc	r23, r1
    2886:	61 05       	cpc	r22, r1
    2888:	08 94       	sec
    288a:	08 95       	ret

0000288c <__fp_zero>:
    288c:	e8 94       	clt

0000288e <__fp_szero>:
    288e:	bb 27       	eor	r27, r27
    2890:	66 27       	eor	r22, r22
    2892:	77 27       	eor	r23, r23
    2894:	cb 01       	movw	r24, r22
    2896:	97 f9       	bld	r25, 7
    2898:	08 95       	ret

0000289a <__mulsf3>:
    289a:	0b d0       	rcall	.+22     	; 0x28b2 <__mulsf3x>
    289c:	c4 cf       	rjmp	.-120    	; 0x2826 <__fp_round>
    289e:	b5 df       	rcall	.-150    	; 0x280a <__fp_pscA>
    28a0:	28 f0       	brcs	.+10     	; 0x28ac <__mulsf3+0x12>
    28a2:	ba df       	rcall	.-140    	; 0x2818 <__fp_pscB>
    28a4:	18 f0       	brcs	.+6      	; 0x28ac <__mulsf3+0x12>
    28a6:	95 23       	and	r25, r21
    28a8:	09 f0       	breq	.+2      	; 0x28ac <__mulsf3+0x12>
    28aa:	a6 cf       	rjmp	.-180    	; 0x27f8 <__fp_inf>
    28ac:	ab cf       	rjmp	.-170    	; 0x2804 <__fp_nan>
    28ae:	11 24       	eor	r1, r1
    28b0:	ee cf       	rjmp	.-36     	; 0x288e <__fp_szero>

000028b2 <__mulsf3x>:
    28b2:	ca df       	rcall	.-108    	; 0x2848 <__fp_split3>
    28b4:	a0 f3       	brcs	.-24     	; 0x289e <__mulsf3+0x4>

000028b6 <__mulsf3_pse>:
    28b6:	95 9f       	mul	r25, r21
    28b8:	d1 f3       	breq	.-12     	; 0x28ae <__mulsf3+0x14>
    28ba:	95 0f       	add	r25, r21
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	55 1f       	adc	r21, r21
    28c0:	62 9f       	mul	r22, r18
    28c2:	f0 01       	movw	r30, r0
    28c4:	72 9f       	mul	r23, r18
    28c6:	bb 27       	eor	r27, r27
    28c8:	f0 0d       	add	r31, r0
    28ca:	b1 1d       	adc	r27, r1
    28cc:	63 9f       	mul	r22, r19
    28ce:	aa 27       	eor	r26, r26
    28d0:	f0 0d       	add	r31, r0
    28d2:	b1 1d       	adc	r27, r1
    28d4:	aa 1f       	adc	r26, r26
    28d6:	64 9f       	mul	r22, r20
    28d8:	66 27       	eor	r22, r22
    28da:	b0 0d       	add	r27, r0
    28dc:	a1 1d       	adc	r26, r1
    28de:	66 1f       	adc	r22, r22
    28e0:	82 9f       	mul	r24, r18
    28e2:	22 27       	eor	r18, r18
    28e4:	b0 0d       	add	r27, r0
    28e6:	a1 1d       	adc	r26, r1
    28e8:	62 1f       	adc	r22, r18
    28ea:	73 9f       	mul	r23, r19
    28ec:	b0 0d       	add	r27, r0
    28ee:	a1 1d       	adc	r26, r1
    28f0:	62 1f       	adc	r22, r18
    28f2:	83 9f       	mul	r24, r19
    28f4:	a0 0d       	add	r26, r0
    28f6:	61 1d       	adc	r22, r1
    28f8:	22 1f       	adc	r18, r18
    28fa:	74 9f       	mul	r23, r20
    28fc:	33 27       	eor	r19, r19
    28fe:	a0 0d       	add	r26, r0
    2900:	61 1d       	adc	r22, r1
    2902:	23 1f       	adc	r18, r19
    2904:	84 9f       	mul	r24, r20
    2906:	60 0d       	add	r22, r0
    2908:	21 1d       	adc	r18, r1
    290a:	82 2f       	mov	r24, r18
    290c:	76 2f       	mov	r23, r22
    290e:	6a 2f       	mov	r22, r26
    2910:	11 24       	eor	r1, r1
    2912:	9f 57       	subi	r25, 0x7F	; 127
    2914:	50 40       	sbci	r21, 0x00	; 0
    2916:	8a f0       	brmi	.+34     	; 0x293a <__mulsf3_pse+0x84>
    2918:	e1 f0       	breq	.+56     	; 0x2952 <__mulsf3_pse+0x9c>
    291a:	88 23       	and	r24, r24
    291c:	4a f0       	brmi	.+18     	; 0x2930 <__mulsf3_pse+0x7a>
    291e:	ee 0f       	add	r30, r30
    2920:	ff 1f       	adc	r31, r31
    2922:	bb 1f       	adc	r27, r27
    2924:	66 1f       	adc	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	88 1f       	adc	r24, r24
    292a:	91 50       	subi	r25, 0x01	; 1
    292c:	50 40       	sbci	r21, 0x00	; 0
    292e:	a9 f7       	brne	.-22     	; 0x291a <__mulsf3_pse+0x64>
    2930:	9e 3f       	cpi	r25, 0xFE	; 254
    2932:	51 05       	cpc	r21, r1
    2934:	70 f0       	brcs	.+28     	; 0x2952 <__mulsf3_pse+0x9c>
    2936:	60 cf       	rjmp	.-320    	; 0x27f8 <__fp_inf>
    2938:	aa cf       	rjmp	.-172    	; 0x288e <__fp_szero>
    293a:	5f 3f       	cpi	r21, 0xFF	; 255
    293c:	ec f3       	brlt	.-6      	; 0x2938 <__mulsf3_pse+0x82>
    293e:	98 3e       	cpi	r25, 0xE8	; 232
    2940:	dc f3       	brlt	.-10     	; 0x2938 <__mulsf3_pse+0x82>
    2942:	86 95       	lsr	r24
    2944:	77 95       	ror	r23
    2946:	67 95       	ror	r22
    2948:	b7 95       	ror	r27
    294a:	f7 95       	ror	r31
    294c:	e7 95       	ror	r30
    294e:	9f 5f       	subi	r25, 0xFF	; 255
    2950:	c1 f7       	brne	.-16     	; 0x2942 <__mulsf3_pse+0x8c>
    2952:	fe 2b       	or	r31, r30
    2954:	88 0f       	add	r24, r24
    2956:	91 1d       	adc	r25, r1
    2958:	96 95       	lsr	r25
    295a:	87 95       	ror	r24
    295c:	97 f9       	bld	r25, 7
    295e:	08 95       	ret

00002960 <__udivmodhi4>:
    2960:	aa 1b       	sub	r26, r26
    2962:	bb 1b       	sub	r27, r27
    2964:	51 e1       	ldi	r21, 0x11	; 17
    2966:	07 c0       	rjmp	.+14     	; 0x2976 <__udivmodhi4_ep>

00002968 <__udivmodhi4_loop>:
    2968:	aa 1f       	adc	r26, r26
    296a:	bb 1f       	adc	r27, r27
    296c:	a6 17       	cp	r26, r22
    296e:	b7 07       	cpc	r27, r23
    2970:	10 f0       	brcs	.+4      	; 0x2976 <__udivmodhi4_ep>
    2972:	a6 1b       	sub	r26, r22
    2974:	b7 0b       	sbc	r27, r23

00002976 <__udivmodhi4_ep>:
    2976:	88 1f       	adc	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	5a 95       	dec	r21
    297c:	a9 f7       	brne	.-22     	; 0x2968 <__udivmodhi4_loop>
    297e:	80 95       	com	r24
    2980:	90 95       	com	r25
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	08 95       	ret

00002988 <__divmodhi4>:
    2988:	97 fb       	bst	r25, 7
    298a:	07 2e       	mov	r0, r23
    298c:	16 f4       	brtc	.+4      	; 0x2992 <__divmodhi4+0xa>
    298e:	00 94       	com	r0
    2990:	06 d0       	rcall	.+12     	; 0x299e <__divmodhi4_neg1>
    2992:	77 fd       	sbrc	r23, 7
    2994:	08 d0       	rcall	.+16     	; 0x29a6 <__divmodhi4_neg2>
    2996:	e4 df       	rcall	.-56     	; 0x2960 <__udivmodhi4>
    2998:	07 fc       	sbrc	r0, 7
    299a:	05 d0       	rcall	.+10     	; 0x29a6 <__divmodhi4_neg2>
    299c:	3e f4       	brtc	.+14     	; 0x29ac <__divmodhi4_exit>

0000299e <__divmodhi4_neg1>:
    299e:	90 95       	com	r25
    29a0:	81 95       	neg	r24
    29a2:	9f 4f       	sbci	r25, 0xFF	; 255
    29a4:	08 95       	ret

000029a6 <__divmodhi4_neg2>:
    29a6:	70 95       	com	r23
    29a8:	61 95       	neg	r22
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255

000029ac <__divmodhi4_exit>:
    29ac:	08 95       	ret

000029ae <__udivmodsi4>:
    29ae:	a1 e2       	ldi	r26, 0x21	; 33
    29b0:	1a 2e       	mov	r1, r26
    29b2:	aa 1b       	sub	r26, r26
    29b4:	bb 1b       	sub	r27, r27
    29b6:	fd 01       	movw	r30, r26
    29b8:	0d c0       	rjmp	.+26     	; 0x29d4 <__udivmodsi4_ep>

000029ba <__udivmodsi4_loop>:
    29ba:	aa 1f       	adc	r26, r26
    29bc:	bb 1f       	adc	r27, r27
    29be:	ee 1f       	adc	r30, r30
    29c0:	ff 1f       	adc	r31, r31
    29c2:	a2 17       	cp	r26, r18
    29c4:	b3 07       	cpc	r27, r19
    29c6:	e4 07       	cpc	r30, r20
    29c8:	f5 07       	cpc	r31, r21
    29ca:	20 f0       	brcs	.+8      	; 0x29d4 <__udivmodsi4_ep>
    29cc:	a2 1b       	sub	r26, r18
    29ce:	b3 0b       	sbc	r27, r19
    29d0:	e4 0b       	sbc	r30, r20
    29d2:	f5 0b       	sbc	r31, r21

000029d4 <__udivmodsi4_ep>:
    29d4:	66 1f       	adc	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	88 1f       	adc	r24, r24
    29da:	99 1f       	adc	r25, r25
    29dc:	1a 94       	dec	r1
    29de:	69 f7       	brne	.-38     	; 0x29ba <__udivmodsi4_loop>
    29e0:	60 95       	com	r22
    29e2:	70 95       	com	r23
    29e4:	80 95       	com	r24
    29e6:	90 95       	com	r25
    29e8:	9b 01       	movw	r18, r22
    29ea:	ac 01       	movw	r20, r24
    29ec:	bd 01       	movw	r22, r26
    29ee:	cf 01       	movw	r24, r30
    29f0:	08 95       	ret

000029f2 <__umulhisi3>:
    29f2:	a2 9f       	mul	r26, r18
    29f4:	b0 01       	movw	r22, r0
    29f6:	b3 9f       	mul	r27, r19
    29f8:	c0 01       	movw	r24, r0
    29fa:	a3 9f       	mul	r26, r19
    29fc:	70 0d       	add	r23, r0
    29fe:	81 1d       	adc	r24, r1
    2a00:	11 24       	eor	r1, r1
    2a02:	91 1d       	adc	r25, r1
    2a04:	b2 9f       	mul	r27, r18
    2a06:	70 0d       	add	r23, r0
    2a08:	81 1d       	adc	r24, r1
    2a0a:	11 24       	eor	r1, r1
    2a0c:	91 1d       	adc	r25, r1
    2a0e:	08 95       	ret

00002a10 <strlen>:
    2a10:	fc 01       	movw	r30, r24
    2a12:	01 90       	ld	r0, Z+
    2a14:	00 20       	and	r0, r0
    2a16:	e9 f7       	brne	.-6      	; 0x2a12 <strlen+0x2>
    2a18:	80 95       	com	r24
    2a1a:	90 95       	com	r25
    2a1c:	8e 0f       	add	r24, r30
    2a1e:	9f 1f       	adc	r25, r31
    2a20:	08 95       	ret

00002a22 <_exit>:
    2a22:	f8 94       	cli

00002a24 <__stop_program>:
    2a24:	ff cf       	rjmp	.-2      	; 0x2a24 <__stop_program>
