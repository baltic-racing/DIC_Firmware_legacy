
dic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00002a44  00002ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000280  008001d2  008001d2  00002baa  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00002baa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ad  00000000  00000000  00002e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  00005111  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d4e  00000000  00000000  000062b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00008008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f33  00000000  00000000  000086d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3d  00000000  00000000  00009607  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000a344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
      32:	00 00       	nop
      34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__vector_16>
      44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__vector_20>
      54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
      62:	00 00       	nop
      64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
      66:	00 00       	nop
      68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e4 e4       	ldi	r30, 0x44	; 68
      a8:	fa e2       	ldi	r31, 0x2A	; 42
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 3d       	cpi	r26, 0xD2	; 210
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	24 e0       	ldi	r18, 0x04	; 4
      bc:	a2 ed       	ldi	r26, 0xD2	; 210
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 35       	cpi	r26, 0x52	; 82
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <main>
      ce:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <_exit>

000000d2 <__bad_interrupt>:
      d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <can_check_free>:
#include "canlib.h"
#include <avr/io.h>



uint8_t can_check_free(uint8_t mobnum){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <can_check_free+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t mob_status = 0;
      e0:	19 82       	std	Y+1, r1	; 0x01
	
	if(mobnum >= 8){
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	88 30       	cpi	r24, 0x08	; 8
      e6:	c0 f0       	brcs	.+48     	; 0x118 <can_check_free+0x44>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
      e8:	8d ed       	ldi	r24, 0xDD	; 221
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	fc 01       	movw	r30, r24
      ee:	80 81       	ld	r24, Z
      f0:	88 2f       	mov	r24, r24
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a 81       	ldd	r18, Y+2	; 0x02
      f6:	22 2f       	mov	r18, r18
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	28 50       	subi	r18, 0x08	; 8
      fc:	31 09       	sbc	r19, r1
      fe:	02 c0       	rjmp	.+4      	; 0x104 <can_check_free+0x30>
     100:	95 95       	asr	r25
     102:	87 95       	ror	r24
     104:	2a 95       	dec	r18
     106:	e2 f7       	brpl	.-8      	; 0x100 <can_check_free+0x2c>
     108:	81 70       	andi	r24, 0x01	; 1
     10a:	99 27       	eor	r25, r25
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	89 2b       	or	r24, r25
     110:	09 f0       	breq	.+2      	; 0x114 <can_check_free+0x40>
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	29 83       	std	Y+1, r18	; 0x01
     116:	15 c0       	rjmp	.+42     	; 0x142 <can_check_free+0x6e>


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
     118:	8c ed       	ldi	r24, 0xDC	; 220
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	2a 81       	ldd	r18, Y+2	; 0x02
     126:	22 2f       	mov	r18, r18
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <can_check_free+0x5c>
     12c:	95 95       	asr	r25
     12e:	87 95       	ror	r24
     130:	2a 95       	dec	r18
     132:	e2 f7       	brpl	.-8      	; 0x12c <can_check_free+0x58>
     134:	81 70       	andi	r24, 0x01	; 1
     136:	99 27       	eor	r25, r25
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	89 2b       	or	r24, r25
     13c:	09 f0       	breq	.+2      	; 0x140 <can_check_free+0x6c>
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	29 83       	std	Y+1, r18	; 0x01
	}

	return mob_status;
     142:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <can_cfg>:
void can_cfg(){
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <can_cfg+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	
	CANGCON = 0; // Disable CAN
     158:	88 ed       	ldi	r24, 0xD8	; 216
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	10 82       	st	Z, r1
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     160:	19 82       	std	Y+1, r1	; 0x01
     162:	56 c0       	rjmp	.+172    	; 0x210 <can_cfg+0xc2>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     164:	8d ee       	ldi	r24, 0xED	; 237
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	29 81       	ldd	r18, Y+1	; 0x01
     16a:	22 2f       	mov	r18, r18
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	22 95       	swap	r18
     170:	32 95       	swap	r19
     172:	30 7f       	andi	r19, 0xF0	; 240
     174:	32 27       	eor	r19, r18
     176:	20 7f       	andi	r18, 0xF0	; 240
     178:	32 27       	eor	r19, r18
     17a:	28 60       	ori	r18, 0x08	; 8
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
		CANSTMOB = 0;
     180:	8e ee       	ldi	r24, 0xEE	; 238
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	10 82       	st	Z, r1
		CANCDMOB = 0;
     188:	8f ee       	ldi	r24, 0xEF	; 239
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	fc 01       	movw	r30, r24
     18e:	10 82       	st	Z, r1
		CANIDT4 = 0;
     190:	80 ef       	ldi	r24, 0xF0	; 240
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	10 82       	st	Z, r1
		CANIDT3 = 0;
     198:	81 ef       	ldi	r24, 0xF1	; 241
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	10 82       	st	Z, r1
		CANIDT2 = 0;
     1a0:	82 ef       	ldi	r24, 0xF2	; 242
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fc 01       	movw	r30, r24
     1a6:	10 82       	st	Z, r1
		CANIDT1 = 0;
     1a8:	83 ef       	ldi	r24, 0xF3	; 243
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	10 82       	st	Z, r1
		CANIDM4 = 0;
     1b0:	84 ef       	ldi	r24, 0xF4	; 244
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	fc 01       	movw	r30, r24
     1b6:	10 82       	st	Z, r1
		CANIDM3 = 0;
     1b8:	85 ef       	ldi	r24, 0xF5	; 245
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	10 82       	st	Z, r1
		CANIDM2 = 0;
     1c0:	86 ef       	ldi	r24, 0xF6	; 246
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	10 82       	st	Z, r1
		CANIDM1 = 0;
     1c8:	87 ef       	ldi	r24, 0xF7	; 247
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	10 82       	st	Z, r1
		for (uint8_t byte = 0; byte < 8; byte++){
     1d0:	1a 82       	std	Y+2, r1	; 0x02
     1d2:	18 c0       	rjmp	.+48     	; 0x204 <can_cfg+0xb6>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
     1d4:	8d ee       	ldi	r24, 0xED	; 237
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	22 2f       	mov	r18, r18
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	22 95       	swap	r18
     1e0:	32 95       	swap	r19
     1e2:	30 7f       	andi	r19, 0xF0	; 240
     1e4:	32 27       	eor	r19, r18
     1e6:	20 7f       	andi	r18, 0xF0	; 240
     1e8:	32 27       	eor	r19, r18
     1ea:	32 2f       	mov	r19, r18
     1ec:	2a 81       	ldd	r18, Y+2	; 0x02
     1ee:	23 2b       	or	r18, r19
     1f0:	28 60       	ori	r18, 0x08	; 8
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
			CANMSG = 0;
     1f6:	8a ef       	ldi	r24, 0xFA	; 250
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	10 82       	st	Z, r1
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	8a 83       	std	Y+2, r24	; 0x02
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 30       	cpi	r24, 0x08	; 8
     208:	28 f3       	brcs	.-54     	; 0x1d4 <can_cfg+0x86>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	8f 30       	cpi	r24, 0x0F	; 15
     214:	08 f4       	brcc	.+2      	; 0x218 <can_cfg+0xca>
     216:	a6 cf       	rjmp	.-180    	; 0x164 <can_cfg+0x16>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
     218:	82 ee       	ldi	r24, 0xE2	; 226
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	10 82       	st	Z, r1
	CANBT2 = 0x0C;// 500kBaud according
     220:	83 ee       	ldi	r24, 0xE3	; 227
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	2c e0       	ldi	r18, 0x0C	; 12
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
	CANBT3 = 0x36;// to Datasheet S. 267
     22a:	84 ee       	ldi	r24, 0xE4	; 228
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	26 e3       	ldi	r18, 0x36	; 54
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18

	CANGIE = 0;
     234:	8b ed       	ldi	r24, 0xDB	; 219
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	10 82       	st	Z, r1

	CANGCON |= (1<<ENASTB); // Enable CAN
     23c:	88 ed       	ldi	r24, 0xD8	; 216
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	28 ed       	ldi	r18, 0xD8	; 216
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	f9 01       	movw	r30, r18
     246:	20 81       	ld	r18, Z
     248:	22 60       	ori	r18, 0x02	; 2
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
	
	
	
}
     24e:	00 00       	nop
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <can_rx>:
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	00 d0       	rcall	.+0      	; 0x260 <can_rx+0x6>
     260:	00 d0       	rcall	.+0      	; 0x262 <can_rx+0x8>
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	9b 83       	std	Y+3, r25	; 0x03
     26a:	8a 83       	std	Y+2, r24	; 0x02
     26c:	7d 83       	std	Y+5, r23	; 0x05
     26e:	6c 83       	std	Y+4, r22	; 0x04
	
	CANPAGE = to_receive->mob_number << MOBNB0;
     270:	8d ee       	ldi	r24, 0xED	; 237
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	2a 81       	ldd	r18, Y+2	; 0x02
     276:	3b 81       	ldd	r19, Y+3	; 0x03
     278:	f9 01       	movw	r30, r18
     27a:	24 81       	ldd	r18, Z+4	; 0x04
     27c:	22 95       	swap	r18
     27e:	20 7f       	andi	r18, 0xF0	; 240
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	if (can_check_free(to_receive->mob_number)){
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	84 81       	ldd	r24, Z+4	; 0x04
     28c:	23 df       	rcall	.-442    	; 0xd4 <can_check_free>
     28e:	88 23       	and	r24, r24
     290:	09 f4       	brne	.+2      	; 0x294 <can_rx+0x3a>
     292:	50 c0       	rjmp	.+160    	; 0x334 <can_rx+0xda>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
     294:	83 ef       	ldi	r24, 0xF3	; 243
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	2a 81       	ldd	r18, Y+2	; 0x02
     29a:	3b 81       	ldd	r19, Y+3	; 0x03
     29c:	f9 01       	movw	r30, r18
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	36 95       	lsr	r19
     2a4:	27 95       	ror	r18
     2a6:	36 95       	lsr	r19
     2a8:	27 95       	ror	r18
     2aa:	36 95       	lsr	r19
     2ac:	27 95       	ror	r18
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
     2b2:	82 ef       	ldi	r24, 0xF2	; 242
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	2a 81       	ldd	r18, Y+2	; 0x02
     2b8:	3b 81       	ldd	r19, Y+3	; 0x03
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	31 81       	ldd	r19, Z+1	; 0x01
     2c0:	22 95       	swap	r18
     2c2:	22 0f       	add	r18, r18
     2c4:	20 7e       	andi	r18, 0xE0	; 224
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
		CANIDT3 = 0;
     2ca:	81 ef       	ldi	r24, 0xF1	; 241
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	10 82       	st	Z, r1
		CANIDT4 = 1<<RTRTAG;
     2d2:	80 ef       	ldi	r24, 0xF0	; 240
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	24 e0       	ldi	r18, 0x04	; 4
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
		CANIDM1 = to_receive->mob_idmask >>3;
     2dc:	87 ef       	ldi	r24, 0xF7	; 247
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	2a 81       	ldd	r18, Y+2	; 0x02
     2e2:	3b 81       	ldd	r19, Y+3	; 0x03
     2e4:	f9 01       	movw	r30, r18
     2e6:	22 81       	ldd	r18, Z+2	; 0x02
     2e8:	33 81       	ldd	r19, Z+3	; 0x03
     2ea:	36 95       	lsr	r19
     2ec:	27 95       	ror	r18
     2ee:	36 95       	lsr	r19
     2f0:	27 95       	ror	r18
     2f2:	36 95       	lsr	r19
     2f4:	27 95       	ror	r18
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
     2fa:	86 ef       	ldi	r24, 0xF6	; 246
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	3b 81       	ldd	r19, Y+3	; 0x03
     302:	f9 01       	movw	r30, r18
     304:	22 81       	ldd	r18, Z+2	; 0x02
     306:	33 81       	ldd	r19, Z+3	; 0x03
     308:	22 95       	swap	r18
     30a:	22 0f       	add	r18, r18
     30c:	20 7e       	andi	r18, 0xE0	; 224
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
		CANIDM3 = 0;
     312:	85 ef       	ldi	r24, 0xF5	; 245
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	10 82       	st	Z, r1
		CANIDM4 = 0;
     31a:	84 ef       	ldi	r24, 0xF4	; 244
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	10 82       	st	Z, r1
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
     322:	8f ee       	ldi	r24, 0xEF	; 239
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	28 ec       	ldi	r18, 0xC8	; 200
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
		CANSTMOB = 0;
     32c:	8e ee       	ldi	r24, 0xEE	; 238
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	10 82       	st	Z, r1
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     334:	19 82       	std	Y+1, r1	; 0x01
     336:	24 c0       	rjmp	.+72     	; 0x380 <can_rx+0x126>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
     338:	8d ee       	ldi	r24, 0xED	; 237
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	f9 01       	movw	r30, r18
     342:	24 81       	ldd	r18, Z+4	; 0x04
     344:	22 2f       	mov	r18, r18
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	22 95       	swap	r18
     34a:	32 95       	swap	r19
     34c:	30 7f       	andi	r19, 0xF0	; 240
     34e:	32 27       	eor	r19, r18
     350:	20 7f       	andi	r18, 0xF0	; 240
     352:	32 27       	eor	r19, r18
     354:	32 2f       	mov	r19, r18
     356:	29 81       	ldd	r18, Y+1	; 0x01
     358:	23 2b       	or	r18, r19
     35a:	28 60       	ori	r18, 0x08	; 8
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
		data[byte] = CANMSG;
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	2a ef       	ldi	r18, 0xFA	; 250
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	f9 01       	movw	r30, r18
     374:	20 81       	ld	r18, Z
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	c8 f2       	brcs	.-78     	; 0x338 <can_rx+0xde>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
     386:	00 00       	nop
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <can_tx+0x6>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <can_tx+0x8>
     3a0:	1f 92       	push	r1
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9b 83       	std	Y+3, r25	; 0x03
     3a8:	8a 83       	std	Y+2, r24	; 0x02
     3aa:	7d 83       	std	Y+5, r23	; 0x05
     3ac:	6c 83       	std	Y+4, r22	; 0x04
	
	for(uint8_t byte = 0; byte <8; byte++){
     3ae:	19 82       	std	Y+1, r1	; 0x01
     3b0:	24 c0       	rjmp	.+72     	; 0x3fa <can_tx+0x62>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
     3b2:	8d ee       	ldi	r24, 0xED	; 237
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	2a 81       	ldd	r18, Y+2	; 0x02
     3b8:	3b 81       	ldd	r19, Y+3	; 0x03
     3ba:	f9 01       	movw	r30, r18
     3bc:	24 81       	ldd	r18, Z+4	; 0x04
     3be:	22 2f       	mov	r18, r18
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	22 95       	swap	r18
     3c4:	32 95       	swap	r19
     3c6:	30 7f       	andi	r19, 0xF0	; 240
     3c8:	32 27       	eor	r19, r18
     3ca:	20 7f       	andi	r18, 0xF0	; 240
     3cc:	32 27       	eor	r19, r18
     3ce:	32 2f       	mov	r19, r18
     3d0:	29 81       	ldd	r18, Y+1	; 0x01
     3d2:	23 2b       	or	r18, r19
     3d4:	28 60       	ori	r18, 0x08	; 8
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
		CANMSG = data[byte];
     3da:	8a ef       	ldi	r24, 0xFA	; 250
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	22 2f       	mov	r18, r18
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	4c 81       	ldd	r20, Y+4	; 0x04
     3e6:	5d 81       	ldd	r21, Y+5	; 0x05
     3e8:	24 0f       	add	r18, r20
     3ea:	35 1f       	adc	r19, r21
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	88 30       	cpi	r24, 0x08	; 8
     3fe:	c8 f2       	brcs	.-78     	; 0x3b2 <can_tx+0x1a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
     400:	8d ee       	ldi	r24, 0xED	; 237
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2a 81       	ldd	r18, Y+2	; 0x02
     406:	3b 81       	ldd	r19, Y+3	; 0x03
     408:	f9 01       	movw	r30, r18
     40a:	24 81       	ldd	r18, Z+4	; 0x04
     40c:	22 95       	swap	r18
     40e:	20 7f       	andi	r18, 0xF0	; 240
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
	if (can_check_free(to_send->mob_number)){
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	fc 01       	movw	r30, r24
     41a:	84 81       	ldd	r24, Z+4	; 0x04
     41c:	5b de       	rcall	.-842    	; 0xd4 <can_check_free>
     41e:	88 23       	and	r24, r24
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	44 c0       	rjmp	.+136    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		CANSTMOB = 0;
     424:	8e ee       	ldi	r24, 0xEE	; 238
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fc 01       	movw	r30, r24
     42a:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
     42c:	83 ef       	ldi	r24, 0xF3	; 243
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	3b 81       	ldd	r19, Y+3	; 0x03
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	31 81       	ldd	r19, Z+1	; 0x01
     43a:	36 95       	lsr	r19
     43c:	27 95       	ror	r18
     43e:	36 95       	lsr	r19
     440:	27 95       	ror	r18
     442:	36 95       	lsr	r19
     444:	27 95       	ror	r18
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
     44a:	82 ef       	ldi	r24, 0xF2	; 242
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	2a 81       	ldd	r18, Y+2	; 0x02
     450:	3b 81       	ldd	r19, Y+3	; 0x03
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	22 95       	swap	r18
     45a:	22 0f       	add	r18, r18
     45c:	20 7e       	andi	r18, 0xE0	; 224
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
		CANIDT3 = 0;
     462:	81 ef       	ldi	r24, 0xF1	; 241
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	fc 01       	movw	r30, r24
     468:	10 82       	st	Z, r1
		CANIDT4 = 0;
     46a:	80 ef       	ldi	r24, 0xF0	; 240
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	10 82       	st	Z, r1
		CANIDM1 = 0; //0b11111111;
     472:	87 ef       	ldi	r24, 0xF7	; 247
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	fc 01       	movw	r30, r24
     478:	10 82       	st	Z, r1
		CANIDM2 = 0; //0b11100000;
     47a:	86 ef       	ldi	r24, 0xF6	; 246
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	fc 01       	movw	r30, r24
     480:	10 82       	st	Z, r1
		CANIDM3 = 0;
     482:	85 ef       	ldi	r24, 0xF5	; 245
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	10 82       	st	Z, r1
		CANIDM4 = 0;
     48a:	84 ef       	ldi	r24, 0xF4	; 244
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	10 82       	st	Z, r1
		CANSTMOB = 0;
     492:	8e ee       	ldi	r24, 0xEE	; 238
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
     49a:	8f ee       	ldi	r24, 0xEF	; 239
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	28 e4       	ldi	r18, 0x48	; 72
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
		CANSTMOB = 0;
     4a4:	8e ee       	ldi	r24, 0xEE	; 238
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	10 82       	st	Z, r1
	}
	
}
     4ac:	00 00       	nop
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <can_init_messages>:
struct CAN_MOB can_AMS2_mob;
	uint8_t AMS2_databytes[8];
struct CAN_MOB can_AMS3_mob;
	uint8_t AMS3_databytes[8];

void can_init_messages(){
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
	
	can_SWC_mob.mob_id = 0x750;
     4c6:	80 e5       	ldi	r24, 0x50	; 80
     4c8:	97 e0       	ldi	r25, 0x07	; 7
     4ca:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <can_SWC_mob+0x1>
     4ce:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <can_SWC_mob>
	can_SWC_mob.mob_idmask = 0xffff;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <can_SWC_mob+0x3>
     4da:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <can_SWC_mob+0x2>
	can_SWC_mob.mob_number = 0;
     4de:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <can_SWC_mob+0x4>
	
	can_Fusebox0_mob.mob_id = 0x600;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <can_Fusebox0_mob+0x1>
     4ea:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	9f ef       	ldi	r25, 0xFF	; 255
     4f2:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <can_Fusebox0_mob+0x3>
     4f6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <can_Fusebox0_mob+0x4>
	
	can_Fusebox0_mob.mob_id = 0x601;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	96 e0       	ldi	r25, 0x06	; 6
     504:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <can_Fusebox0_mob+0x1>
     508:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <can_Fusebox0_mob+0x3>
     514:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 2;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <can_Fusebox0_mob+0x4>
	
	can_SHR0_mob.mob_id = 0x400;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	94 e0       	ldi	r25, 0x04	; 4
     522:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <can_SHR0_mob+0x1>
     526:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <can_SHR0_mob>
	can_SHR0_mob.mob_idmask = 0xffff;
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <can_SHR0_mob+0x3>
     532:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <can_SHR0_mob+0x2>
	can_SHR0_mob.mob_number = 3;
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <can_SHR0_mob+0x4>
	
	can_SHL0_mob.mob_id = 0x410;
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <can_SHL0_mob+0x1>
     544:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <can_SHL0_mob>
	can_SHL0_mob.mob_idmask = 0xffff;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	9f ef       	ldi	r25, 0xFF	; 255
     54c:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <can_SHL0_mob+0x3>
     550:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <can_SHL0_mob+0x2>
	can_SHL0_mob.mob_number = 4;
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <can_SHL0_mob+0x4>
	
	can_SHB0_mob.mob_id = 0x420;
     55a:	80 e2       	ldi	r24, 0x20	; 32
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <can_SHB0_mob+0x1>
     562:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <can_SHB0_mob>
	can_SHB0_mob.mob_idmask = 0xffff;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	9f ef       	ldi	r25, 0xFF	; 255
     56a:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <can_SHB0_mob+0x3>
     56e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <can_SHB0_mob+0x2>
	can_SHB0_mob.mob_number = 5;
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <can_SHB0_mob+0x4>
	
	can_Logger0_mob.mob_id = 0x799;
     578:	89 e9       	ldi	r24, 0x99	; 153
     57a:	97 e0       	ldi	r25, 0x07	; 7
     57c:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <can_Logger0_mob+0x1>
     580:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <can_Logger0_mob>
	can_Logger0_mob.mob_idmask = 0xffff;
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <can_Logger0_mob+0x3>
     58c:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <can_Logger0_mob+0x2>
	can_Logger0_mob.mob_number = 6;
     590:	86 e0       	ldi	r24, 0x06	; 6
     592:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <can_Logger0_mob+0x4>
	
	can_Logger1_mob.mob_id = 0x798;
     596:	88 e9       	ldi	r24, 0x98	; 152
     598:	97 e0       	ldi	r25, 0x07	; 7
     59a:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <can_Logger1_mob+0x1>
     59e:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <can_Logger1_mob>
	can_Logger1_mob.mob_idmask = 0xffff;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	9f ef       	ldi	r25, 0xFF	; 255
     5a6:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <can_Logger1_mob+0x3>
     5aa:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <can_Logger1_mob+0x2>
	can_Logger1_mob.mob_number = 7;
     5ae:	87 e0       	ldi	r24, 0x07	; 7
     5b0:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <can_Logger1_mob+0x4>
		
	can_Logger2_mob.mob_id = 0x797;
     5b4:	87 e9       	ldi	r24, 0x97	; 151
     5b6:	97 e0       	ldi	r25, 0x07	; 7
     5b8:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <can_Logger2_mob+0x1>
     5bc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <can_Logger2_mob>
	can_Logger2_mob.mob_idmask = 0xffff;
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <can_Logger2_mob+0x3>
     5c8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <can_Logger2_mob+0x2>
	can_Logger2_mob.mob_number = 10;
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <can_Logger2_mob+0x4>
	
	can_DIC0_mob.mob_id = 0x500;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	95 e0       	ldi	r25, 0x05	; 5
     5d6:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <can_DIC0_mob+0x1>
     5da:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <can_DIC0_mob>
	can_DIC0_mob.mob_idmask = 0xffff;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	9f ef       	ldi	r25, 0xFF	; 255
     5e2:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <can_DIC0_mob+0x3>
     5e6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <can_DIC0_mob+0x2>
	can_DIC0_mob.mob_number = 11;
     5ea:	8b e0       	ldi	r24, 0x0B	; 11
     5ec:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <can_DIC0_mob+0x4>
	
	can_AMS0_mob.mob_id = 0x200;
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <can_AMS0_mob+0x1>
     5f8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <can_AMS0_mob>
	can_AMS0_mob.mob_idmask = 0xffff;
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <can_AMS0_mob+0x3>
     604:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <can_AMS0_mob+0x2>
	can_AMS0_mob.mob_number = 12;
     608:	8c e0       	ldi	r24, 0x0C	; 12
     60a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <can_AMS0_mob+0x4>
	
	can_AMS1_mob.mob_id = 0x201;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <can_AMS1_mob+0x1>
     616:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <can_AMS1_mob>
	can_AMS1_mob.mob_idmask = 0xffff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <can_AMS1_mob+0x3>
     622:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <can_AMS1_mob+0x2>
	can_AMS1_mob.mob_number = 13;
     626:	8d e0       	ldi	r24, 0x0D	; 13
     628:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <can_AMS1_mob+0x4>
	
	can_AMS2_mob.mob_id = 0x202;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <can_AMS2_mob+0x1>
     634:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <can_AMS2_mob>
	can_AMS2_mob.mob_idmask = 0xffff;
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	9f ef       	ldi	r25, 0xFF	; 255
     63c:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <can_AMS2_mob+0x3>
     640:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <can_AMS2_mob+0x2>
	can_AMS2_mob.mob_number = 14;
     644:	8e e0       	ldi	r24, 0x0E	; 14
     646:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <can_AMS2_mob+0x4>
	
	can_AMS3_mob.mob_id = 0x203;
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <can_AMS3_mob+0x1>
     652:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <can_AMS3_mob>
	can_AMS3_mob.mob_idmask = 0xffff;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	9f ef       	ldi	r25, 0xFF	; 255
     65a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <can_AMS3_mob+0x3>
     65e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <can_AMS3_mob+0x2>
	can_AMS3_mob.mob_number = 15;	
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <can_AMS3_mob+0x4>
	
}	
     668:	00 00       	nop
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <CAN_recieve>:

void CAN_recieve(){
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
	
	can_rx(&can_SWC_mob, SWC_databytes);
     678:	67 ef       	ldi	r22, 0xF7	; 247
     67a:	72 e0       	ldi	r23, 0x02	; 2
     67c:	8d ee       	ldi	r24, 0xED	; 237
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	ec dd       	rcall	.-1064   	; 0x25a <can_rx>
	can_rx(&can_Fusebox0_mob, Fusebox0_databytes);
     682:	6d ed       	ldi	r22, 0xDD	; 221
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	8d e7       	ldi	r24, 0x7D	; 125
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	e7 dd       	rcall	.-1074   	; 0x25a <can_rx>
	can_rx(&can_Fusebox1_mob, Fusebox1_databytes);
     68c:	65 ed       	ldi	r22, 0xD5	; 213
     68e:	72 e0       	ldi	r23, 0x02	; 2
     690:	86 eb       	ldi	r24, 0xB6	; 182
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	e2 dd       	rcall	.-1084   	; 0x25a <can_rx>
	can_rx(&can_SHR0_mob, SHR0_databytes);
     696:	61 ea       	ldi	r22, 0xA1	; 161
     698:	72 e0       	ldi	r23, 0x02	; 2
     69a:	8a e8       	ldi	r24, 0x8A	; 138
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	dd dd       	rcall	.-1094   	; 0x25a <can_rx>
	can_rx(&can_SHL0_mob, SHL0_databytes);
     6a0:	6e ea       	ldi	r22, 0xAE	; 174
     6a2:	72 e0       	ldi	r23, 0x02	; 2
     6a4:	8c e9       	ldi	r24, 0x9C	; 156
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	d8 dd       	rcall	.-1104   	; 0x25a <can_rx>
	can_rx(&can_SHB0_mob, SHB0_databytes);
     6aa:	6b eb       	ldi	r22, 0xBB	; 187
     6ac:	72 e0       	ldi	r23, 0x02	; 2
     6ae:	82 ef       	ldi	r24, 0xF2	; 242
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	d3 dd       	rcall	.-1114   	; 0x25a <can_rx>
	can_rx(&can_Logger0_mob, Logger0_databytes);
     6b4:	65 ee       	ldi	r22, 0xE5	; 229
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	83 ec       	ldi	r24, 0xC3	; 195
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	ce dd       	rcall	.-1124   	; 0x25a <can_rx>
	can_rx(&can_Logger1_mob, Logger1_databytes);
     6be:	68 e5       	ldi	r22, 0x58	; 88
     6c0:	72 e0       	ldi	r23, 0x02	; 2
     6c2:	89 ea       	ldi	r24, 0xA9	; 169
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	c9 dd       	rcall	.-1134   	; 0x25a <can_rx>
	can_rx(&can_Logger2_mob, Logger2_databytes);
     6c8:	65 e6       	ldi	r22, 0x65	; 101
     6ca:	72 e0       	ldi	r23, 0x02	; 2
     6cc:	80 e6       	ldi	r24, 0x60	; 96
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	c4 dd       	rcall	.-1144   	; 0x25a <can_rx>
	can_rx(&can_AMS0_mob, AMS0_databytes);
     6d2:	64 e9       	ldi	r22, 0x94	; 148
     6d4:	72 e0       	ldi	r23, 0x02	; 2
     6d6:	89 e0       	ldi	r24, 0x09	; 9
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	bf dd       	rcall	.-1154   	; 0x25a <can_rx>
	can_rx(&can_AMS1_mob, AMS1_databytes);
     6dc:	65 e7       	ldi	r22, 0x75	; 117
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	88 ec       	ldi	r24, 0xC8	; 200
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	ba dd       	rcall	.-1164   	; 0x25a <can_rx>
	can_rx(&can_AMS2_mob, AMS2_databytes);
     6e6:	62 e8       	ldi	r22, 0x82	; 130
     6e8:	72 e0       	ldi	r23, 0x02	; 2
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	b5 dd       	rcall	.-1174   	; 0x25a <can_rx>
	can_rx(&can_AMS3_mob, AMS3_databytes);
     6f0:	6d ec       	ldi	r22, 0xCD	; 205
     6f2:	72 e0       	ldi	r23, 0x02	; 2
     6f4:	8f e8       	ldi	r24, 0x8F	; 143
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	b0 dd       	rcall	.-1184   	; 0x25a <can_rx>
     6fa:	6d e6       	ldi	r22, 0x6D	; 109
	
	can_tx(&can_DIC0_mob, DIC0_databytes);
     6fc:	72 e0       	ldi	r23, 0x02	; 2
     6fe:	84 e0       	ldi	r24, 0x04	; 4
     700:	93 e0       	ldi	r25, 0x03	; 3
     702:	4a de       	rcall	.-876    	; 0x398 <can_tx>
     704:	00 00       	nop
     706:	df 91       	pop	r29
	
}
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <CAN_put_data>:
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29

void CAN_put_data(){
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
		Logger2_databytes[7] = 96<<8;
		
		Logger0_databytes[0] = 42;
*/
		
	Rotary_Encoder_Right = SWC_databytes[0];
     714:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <SWC_databytes>
     718:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
	Rotary_Encoder_Left = SWC_databytes[1];
     71c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <SWC_databytes+0x1>
     720:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <Rotary_Encoder_Left>
	dsp_mde = Rotary_Encoder_Right%4;
     724:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     728:	83 70       	andi	r24, 0x03	; 3
     72a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <dsp_mde>
	BrakeBias = 0;
     72e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <BrakeBias>

	APPS1 = (SHR0_databytes[1] << 8 | SHR0_databytes[0])/10;
     732:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <SHR0_databytes+0x1>
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	38 2f       	mov	r19, r24
     73c:	22 27       	eor	r18, r18
     73e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <SHR0_databytes>
     742:	88 2f       	mov	r24, r24
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	82 2b       	or	r24, r18
     748:	93 2b       	or	r25, r19
     74a:	2a e0       	ldi	r18, 0x0A	; 10
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	b9 01       	movw	r22, r18
     750:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divmodhi4>
     754:	cb 01       	movw	r24, r22
     756:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <APPS1>
	APPS2 = (SHR0_databytes[3] << 8 | SHR0_databytes[2])/10;
     75a:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <SHR0_databytes+0x3>
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	38 2f       	mov	r19, r24
     764:	22 27       	eor	r18, r18
     766:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <SHR0_databytes+0x2>
     76a:	88 2f       	mov	r24, r24
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	82 2b       	or	r24, r18
     770:	93 2b       	or	r25, r19
     772:	2a e0       	ldi	r18, 0x0A	; 10
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	b9 01       	movw	r22, r18
     778:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divmodhi4>
     77c:	cb 01       	movw	r24, r22
     77e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <APPS2>
	
	BPF = (SHL0_databytes[1] << 8 | SHL0_databytes[0])/10;
     782:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <SHL0_databytes+0x1>
     786:	88 2f       	mov	r24, r24
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	38 2f       	mov	r19, r24
     78c:	22 27       	eor	r18, r18
     78e:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <SHL0_databytes>
     792:	88 2f       	mov	r24, r24
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	82 2b       	or	r24, r18
     798:	93 2b       	or	r25, r19
     79a:	2a e0       	ldi	r18, 0x0A	; 10
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	b9 01       	movw	r22, r18
     7a0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divmodhi4>
     7a4:	cb 01       	movw	r24, r22
     7a6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <BPF>
	BPR = (SHL0_databytes[3] << 8 | SHL0_databytes[2])/10;
     7aa:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <SHL0_databytes+0x3>
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	38 2f       	mov	r19, r24
     7b4:	22 27       	eor	r18, r18
     7b6:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SHL0_databytes+0x2>
     7ba:	88 2f       	mov	r24, r24
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	82 2b       	or	r24, r18
     7c0:	93 2b       	or	r25, r19
     7c2:	2a e0       	ldi	r18, 0x0A	; 10
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	b9 01       	movw	r22, r18
     7c8:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divmodhi4>
     7cc:	cb 01       	movw	r24, r22
     7ce:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <BPR>
	CLT = (SHB0_databytes[1] << 8 | SHB0_databytes[0])/10;
     7d2:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <SHB0_databytes+0x1>
     7d6:	88 2f       	mov	r24, r24
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	38 2f       	mov	r19, r24
     7dc:	22 27       	eor	r18, r18
     7de:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <SHB0_databytes>
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	82 2b       	or	r24, r18
     7e8:	93 2b       	or	r25, r19
     7ea:	2a e0       	ldi	r18, 0x0A	; 10
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	b9 01       	movw	r22, r18
     7f0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divmodhi4>
     7f4:	cb 01       	movw	r24, r22
     7f6:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <CLT+0x1>
     7fa:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <CLT>

	LVSVoltage = (Fusebox0_databytes[1] << 8 | Fusebox0_databytes[0])/40;
     7fe:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Fusebox0_databytes+0x1>
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	38 2f       	mov	r19, r24
     808:	22 27       	eor	r18, r18
     80a:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <Fusebox0_databytes>
     80e:	88 2f       	mov	r24, r24
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	82 2b       	or	r24, r18
     814:	93 2b       	or	r25, r19
     816:	28 e2       	ldi	r18, 0x28	; 40
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	b9 01       	movw	r22, r18
     81c:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divmodhi4>
     820:	cb 01       	movw	r24, r22
     822:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <LVSVoltage+0x1>
     826:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <LVSVoltage>
	SDCIFB = (Fusebox1_databytes[1] << 8 | Fusebox1_databytes[0]);
     82a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <Fusebox1_databytes+0x1>
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	98 2f       	mov	r25, r24
     838:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Fusebox1_databytes>
     83c:	89 2b       	or	r24, r25
     83e:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <SDCIFB>
	FRO = (Fusebox1_databytes[3] << 8 | Fusebox1_databytes[2]);
     842:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <Fusebox1_databytes+0x3>
     846:	88 2f       	mov	r24, r24
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	38 2f       	mov	r19, r24
     84c:	22 27       	eor	r18, r18
     84e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <Fusebox1_databytes+0x2>
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	82 2b       	or	r24, r18
     858:	93 2b       	or	r25, r19
     85a:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <FRO+0x1>
     85e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <FRO>
	
	AMS_ERR = AMS0_databytes[0];
     862:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <AMS0_databytes>
     866:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <AMS_ERR>
	ERR_info = (AMS0_databytes[2] << 8 | AMS0_databytes[1]);
     86a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <AMS0_databytes+0x2>
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	38 2f       	mov	r19, r24
     874:	22 27       	eor	r18, r18
     876:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <AMS0_databytes+0x1>
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	82 2b       	or	r24, r18
     880:	93 2b       	or	r25, r19
     882:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <ERR_info+0x1>
     886:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <ERR_info>
	IMD_ERR = AMS0_databytes[4];
     88a:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <AMS0_databytes+0x4>
     88e:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <IMD_ERR>
	TSVoltage = (AMS1_databytes[1] << 8 | AMS1_databytes[0])/6;
     892:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <AMS1_databytes+0x1>
     896:	88 2f       	mov	r24, r24
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	38 2f       	mov	r19, r24
     89c:	22 27       	eor	r18, r18
     89e:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <AMS1_databytes>
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	82 2b       	or	r24, r18
     8a8:	93 2b       	or	r25, r19
     8aa:	26 e0       	ldi	r18, 0x06	; 6
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	b9 01       	movw	r22, r18
     8b0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__divmodhi4>
     8b4:	cb 01       	movw	r24, r22
     8b6:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <TSVoltage+0x1>
     8ba:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <TSVoltage>
	SOC = (AMS1_databytes[5] << 8 | AMS1_databytes[4]);
     8be:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <AMS1_databytes+0x5>
     8c2:	88 2f       	mov	r24, r24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	38 2f       	mov	r19, r24
     8c8:	22 27       	eor	r18, r18
     8ca:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <AMS1_databytes+0x4>
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	82 2b       	or	r24, r18
     8d4:	93 2b       	or	r25, r19
     8d6:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <SOC+0x1>
     8da:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SOC>
	AccumulatorTemperature = (AMS2_databytes[7] << 8 | AMS2_databytes[6]);
     8de:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <AMS2_databytes+0x7>
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	38 2f       	mov	r19, r24
     8e8:	22 27       	eor	r18, r18
     8ea:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <AMS2_databytes+0x6>
     8ee:	88 2f       	mov	r24, r24
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	82 2b       	or	r24, r18
     8f4:	93 2b       	or	r25, r19
     8f6:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <AccumulatorTemperature+0x1>
     8fa:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <AccumulatorTemperature>
	TS_RDY = AMS3_databytes[0];
     8fe:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <AMS3_databytes>
     902:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <TS_RDY>

	//For some weird reason the length of the variable that gets shifted seems to matter, atleast in this usecase, with for e.g BPF etc it works fine which may be becouse we are actually only transmitting an 8 bit value
	//what happens is we shift an 8bit uint by 8 to the left and want to save it in an 32bit uint, we put for e.g 135 in and should get 34560. instead we are getting 4294965720 which is definitly also not an 8bit value
	//i do not know what is happening here but shifting a variable beyond its own limit seems to do weird stuff. therefore this stupid hacky fix with putting the 8bit integers into 32bit integer and than whacking it together
	
	Laptime_1 = Logger0_databytes[1];
     906:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <Logger0_databytes+0x1>
     90a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Laptime_1>
	Laptime_2 = Logger0_databytes[2];
     90e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <Logger0_databytes+0x2>
     912:	88 2f       	mov	r24, r24
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <Laptime_2+0x1>
     91a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <Laptime_2>
	Laptime_3 = Logger0_databytes[3];
     91e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <Logger0_databytes+0x3>
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <Laptime_3>
     92e:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <Laptime_3+0x1>
     932:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <Laptime_3+0x2>
     936:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <Laptime_3+0x3>
	Laptime_4 = Logger0_databytes[4];
     93a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Logger0_databytes+0x4>
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Laptime_4>
     94a:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <Laptime_4+0x1>
     94e:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <Laptime_4+0x2>
     952:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <Laptime_4+0x3>
	
	Laptime = Laptime_1 | Laptime_2 << 8 | Laptime_3 << 16 | Laptime_4 << 24;
     956:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Laptime_1>
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <Laptime_2>
     962:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <Laptime_2+0x1>
     966:	98 2f       	mov	r25, r24
     968:	88 27       	eor	r24, r24
     96a:	82 2b       	or	r24, r18
     96c:	93 2b       	or	r25, r19
     96e:	9c 01       	movw	r18, r24
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Laptime_3>
     978:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <Laptime_3+0x1>
     97c:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <Laptime_3+0x2>
     980:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <Laptime_3+0x3>
     984:	dc 01       	movw	r26, r24
     986:	99 27       	eor	r25, r25
     988:	88 27       	eor	r24, r24
     98a:	28 2b       	or	r18, r24
     98c:	39 2b       	or	r19, r25
     98e:	4a 2b       	or	r20, r26
     990:	5b 2b       	or	r21, r27
     992:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Laptime_4>
     996:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Laptime_4+0x1>
     99a:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <Laptime_4+0x2>
     99e:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <Laptime_4+0x3>
     9a2:	b8 2f       	mov	r27, r24
     9a4:	aa 27       	eor	r26, r26
     9a6:	99 27       	eor	r25, r25
     9a8:	88 27       	eor	r24, r24
     9aa:	82 2b       	or	r24, r18
     9ac:	93 2b       	or	r25, r19
     9ae:	a4 2b       	or	r26, r20
     9b0:	b5 2b       	or	r27, r21
     9b2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <Laptime>
     9b6:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <Laptime+0x1>
     9ba:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <Laptime+0x2>
     9be:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <Laptime+0x3>
	
	Besttime_1 = Logger1_databytes[0];
     9c2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Logger1_databytes>
     9c6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <Besttime_1>
	Besttime_2 = Logger1_databytes[1];
     9ca:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <Logger1_databytes+0x1>
     9ce:	88 2f       	mov	r24, r24
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Besttime_2+0x1>
     9d6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Besttime_2>
	Besttime_3 = Logger1_databytes[2];
     9da:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Logger1_databytes+0x2>
     9de:	88 2f       	mov	r24, r24
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Besttime_3>
     9ea:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Besttime_3+0x1>
     9ee:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <Besttime_3+0x2>
     9f2:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <Besttime_3+0x3>
	Besttime_4 = Logger1_databytes[3];
     9f6:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Logger1_databytes+0x3>
     9fa:	88 2f       	mov	r24, r24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Besttime_4>
     a06:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <Besttime_4+0x1>
     a0a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <Besttime_4+0x2>
     a0e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <Besttime_4+0x3>
	
	Besttime = Besttime_1 | Besttime_2 << 8 | Besttime_3 << 16 | Besttime_4 << 24;
     a12:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <Besttime_1>
     a16:	28 2f       	mov	r18, r24
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Besttime_2>
     a1e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Besttime_2+0x1>
     a22:	98 2f       	mov	r25, r24
     a24:	88 27       	eor	r24, r24
     a26:	82 2b       	or	r24, r18
     a28:	93 2b       	or	r25, r19
     a2a:	9c 01       	movw	r18, r24
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Besttime_3>
     a34:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Besttime_3+0x1>
     a38:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <Besttime_3+0x2>
     a3c:	b0 91 05 02 	lds	r27, 0x0205	; 0x800205 <Besttime_3+0x3>
     a40:	dc 01       	movw	r26, r24
     a42:	99 27       	eor	r25, r25
     a44:	88 27       	eor	r24, r24
     a46:	28 2b       	or	r18, r24
     a48:	39 2b       	or	r19, r25
     a4a:	4a 2b       	or	r20, r26
     a4c:	5b 2b       	or	r21, r27
     a4e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Besttime_4>
     a52:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Besttime_4+0x1>
     a56:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <Besttime_4+0x2>
     a5a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <Besttime_4+0x3>
     a5e:	b8 2f       	mov	r27, r24
     a60:	aa 27       	eor	r26, r26
     a62:	99 27       	eor	r25, r25
     a64:	88 27       	eor	r24, r24
     a66:	82 2b       	or	r24, r18
     a68:	93 2b       	or	r25, r19
     a6a:	a4 2b       	or	r26, r20
     a6c:	b5 2b       	or	r27, r21
     a6e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Besttime>
     a72:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Besttime+0x1>
     a76:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <Besttime+0x2>
     a7a:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <Besttime+0x3>
	
	Pred_time_1 = Logger1_databytes[4];
     a7e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <Logger1_databytes+0x4>
     a82:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Pred_time_1>
	Pred_time_2 = Logger1_databytes[5];
     a86:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <Logger1_databytes+0x5>
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <Pred_time_2+0x1>
     a92:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Pred_time_2>
	Pred_time_3 = Logger1_databytes[6];
     a96:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <Logger1_databytes+0x6>
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	a0 e0       	ldi	r26, 0x00	; 0
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Pred_time_3>
     aa6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Pred_time_3+0x1>
     aaa:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <Pred_time_3+0x2>
     aae:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <Pred_time_3+0x3>
	Pred_time_4 = Logger1_databytes[7];
     ab2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <Logger1_databytes+0x7>
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Pred_time_4>
     ac2:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Pred_time_4+0x1>
     ac6:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <Pred_time_4+0x2>
     aca:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <Pred_time_4+0x3>
	
	Pred_time = Pred_time_1 | Pred_time_2 << 8 | Pred_time_3 << 16 | Pred_time_4 << 24;
     ace:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Pred_time_1>
     ad2:	28 2f       	mov	r18, r24
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Pred_time_2>
     ada:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <Pred_time_2+0x1>
     ade:	98 2f       	mov	r25, r24
     ae0:	88 27       	eor	r24, r24
     ae2:	82 2b       	or	r24, r18
     ae4:	93 2b       	or	r25, r19
     ae6:	9c 01       	movw	r18, r24
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Pred_time_3>
     af0:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Pred_time_3+0x1>
     af4:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <Pred_time_3+0x2>
     af8:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <Pred_time_3+0x3>
     afc:	dc 01       	movw	r26, r24
     afe:	99 27       	eor	r25, r25
     b00:	88 27       	eor	r24, r24
     b02:	28 2b       	or	r18, r24
     b04:	39 2b       	or	r19, r25
     b06:	4a 2b       	or	r20, r26
     b08:	5b 2b       	or	r21, r27
     b0a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Pred_time_4>
     b0e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Pred_time_4+0x1>
     b12:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <Pred_time_4+0x2>
     b16:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <Pred_time_4+0x3>
     b1a:	b8 2f       	mov	r27, r24
     b1c:	aa 27       	eor	r26, r26
     b1e:	99 27       	eor	r25, r25
     b20:	88 27       	eor	r24, r24
     b22:	82 2b       	or	r24, r18
     b24:	93 2b       	or	r25, r19
     b26:	a4 2b       	or	r26, r20
     b28:	b5 2b       	or	r27, r21
     b2a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Pred_time>
     b2e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Pred_time+0x1>
     b32:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <Pred_time+0x2>
     b36:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <Pred_time+0x3>
	
	ODO = Logger0_databytes[6] << 8 | Logger0_databytes[5];
     b3a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Logger0_databytes+0x6>
     b3e:	88 2f       	mov	r24, r24
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	38 2f       	mov	r19, r24
     b44:	22 27       	eor	r18, r18
     b46:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <Logger0_databytes+0x5>
     b4a:	88 2f       	mov	r24, r24
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	82 2b       	or	r24, r18
     b50:	93 2b       	or	r25, r19
     b52:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <ODO+0x1>
     b56:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <ODO>
	GPS_Speed = Logger2_databytes[7] << 8 | Logger2_databytes[6];
     b5a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <Logger2_databytes+0x7>
     b5e:	88 2f       	mov	r24, r24
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	38 2f       	mov	r19, r24
     b64:	22 27       	eor	r18, r18
     b66:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <Logger2_databytes+0x6>
     b6a:	88 2f       	mov	r24, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	82 2b       	or	r24, r18
     b70:	93 2b       	or	r25, r19
     b72:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <GPS_Speed+0x1>
     b76:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <GPS_Speed>
	LapNumber = Logger0_databytes[0];	
     b7a:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Logger0_databytes>
     b7e:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <LapNumber>
	
	DIC0_databytes[0] = LC_Active;
     b82:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <LC_Active>
     b86:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <difftime>
     b8a:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <DIC0_databytes>
	DIC0_databytes[7] ^= (1 << 0);
     b8e:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <DIC0_databytes+0x7>
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	89 27       	eor	r24, r25
     b96:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <DIC0_databytes+0x7>
     b9a:	00 00       	nop
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <calc_BB>:
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <calc_BB+0xe>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	6a 83       	std	Y+2, r22	; 0x02
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	8a 30       	cpi	r24, 0x0A	; 10
     bbc:	08 f4       	brcc	.+2      	; 0xbc0 <calc_BB+0x1e>
     bbe:	59 c0       	rjmp	.+178    	; 0xc72 <calc_BB+0xd0>
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	09 2e       	mov	r0, r25
     bd2:	00 0c       	add	r0, r0
     bd4:	aa 0b       	sbc	r26, r26
     bd6:	bb 0b       	sbc	r27, r27
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatsisf>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     be8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     bec:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     bf0:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	09 2e       	mov	r0, r25
     bfc:	00 0c       	add	r0, r0
     bfe:	aa 0b       	sbc	r26, r26
     c00:	bb 0b       	sbc	r27, r27
     c02:	bc 01       	movw	r22, r24
     c04:	cd 01       	movw	r24, r26
     c06:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__floatsisf>
     c0a:	7b 01       	movw	r14, r22
     c0c:	8c 01       	movw	r16, r24
     c0e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c12:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c16:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c1a:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c1e:	9c 01       	movw	r18, r24
     c20:	ad 01       	movw	r20, r26
     c22:	c8 01       	movw	r24, r16
     c24:	b7 01       	movw	r22, r14
     c26:	0e 94 3a 13 	call	0x2674	; 0x2674 <__divsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c32:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c36:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c3a:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c3e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c42:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c46:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c4a:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	48 ec       	ldi	r20, 0xC8	; 200
     c54:	52 e4       	ldi	r21, 0x42	; 66
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__mulsf3>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c66:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c6a:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c6e:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c72:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c76:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c7a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c7e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c82:	bc 01       	movw	r22, r24
     c84:	cd 01       	movw	r24, r26
     c86:	0e 94 a2 13 	call	0x2744	; 0x2744 <__fixunssfsi>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	08 95       	ret

00000ca0 <string_to_digit>:
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	27 97       	sbiw	r28, 0x07	; 7
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	8b 83       	std	Y+3, r24	; 0x03
     cb6:	7d 83       	std	Y+5, r23	; 0x05
     cb8:	6c 83       	std	Y+4, r22	; 0x04
     cba:	4e 83       	std	Y+6, r20	; 0x06
     cbc:	2f 83       	std	Y+7, r18	; 0x07
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	2e c0       	rjmp	.+92     	; 0xd20 <string_to_digit+0x80>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	68 2f       	mov	r22, r24
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	8f 81       	ldd	r24, Y+7	; 0x07
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	48 2f       	mov	r20, r24
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	84 0f       	add	r24, r20
     cdc:	95 1f       	adc	r25, r21
     cde:	ec 81       	ldd	r30, Y+4	; 0x04
     ce0:	fd 81       	ldd	r31, Y+5	; 0x05
     ce2:	49 81       	ldd	r20, Y+1	; 0x01
     ce4:	5a 81       	ldd	r21, Y+2	; 0x02
     ce6:	4e 0f       	add	r20, r30
     ce8:	5f 1f       	adc	r21, r31
     cea:	da 01       	movw	r26, r20
     cec:	ec 91       	ld	r30, X
     cee:	f4 e1       	ldi	r31, 0x14	; 20
     cf0:	f2 9f       	mul	r31, r18
     cf2:	a0 01       	movw	r20, r0
     cf4:	f3 9f       	mul	r31, r19
     cf6:	50 0d       	add	r21, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	f0 e5       	ldi	r31, 0x50	; 80
     cfc:	f6 9f       	mul	r31, r22
     cfe:	90 01       	movw	r18, r0
     d00:	f7 9f       	mul	r31, r23
     d02:	30 0d       	add	r19, r0
     d04:	11 24       	eor	r1, r1
     d06:	24 0f       	add	r18, r20
     d08:	35 1f       	adc	r19, r21
     d0a:	82 0f       	add	r24, r18
     d0c:	93 1f       	adc	r25, r19
     d0e:	82 5f       	subi	r24, 0xF2	; 242
     d10:	9c 4f       	sbci	r25, 0xFC	; 252
     d12:	dc 01       	movw	r26, r24
     d14:	ec 93       	st	X, r30
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	9d 81       	ldd	r25, Y+5	; 0x05
     d24:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <strlen>
     d28:	9c 01       	movw	r18, r24
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	82 17       	cp	r24, r18
     d30:	93 07       	cpc	r25, r19
     d32:	40 f2       	brcs	.-112    	; 0xcc4 <string_to_digit+0x24>
     d34:	00 00       	nop
     d36:	27 96       	adiw	r28, 0x07	; 7
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <num_to_digit>:
     d48:	ef 92       	push	r14
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	62 97       	sbiw	r28, 0x12	; 18
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	8a 87       	std	Y+10, r24	; 0x0a
     d64:	7c 87       	std	Y+12, r23	; 0x0c
     d66:	6b 87       	std	Y+11, r22	; 0x0b
     d68:	4d 87       	std	Y+13, r20	; 0x0d
     d6a:	2e 87       	std	Y+14, r18	; 0x0e
     d6c:	0f 87       	std	Y+15, r16	; 0x0f
     d6e:	e8 8a       	std	Y+16, r14	; 0x10
     d70:	4d b7       	in	r20, 0x3d	; 61
     d72:	5e b7       	in	r21, 0x3e	; 62
     d74:	5a 8b       	std	Y+18, r21	; 0x12
     d76:	49 8b       	std	Y+17, r20	; 0x11
     d78:	8d b7       	in	r24, 0x3d	; 61
     d7a:	9e b7       	in	r25, 0x3e	; 62
     d7c:	8c 01       	movw	r16, r24
     d7e:	2e 85       	ldd	r18, Y+14	; 0x0e
     d80:	82 2f       	mov	r24, r18
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
     d8a:	82 2f       	mov	r24, r18
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	6d b7       	in	r22, 0x3d	; 61
     d90:	7e b7       	in	r23, 0x3e	; 62
     d92:	68 1b       	sub	r22, r24
     d94:	79 0b       	sbc	r23, r25
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	7e bf       	out	0x3e, r23	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	6d bf       	out	0x3d, r22	; 61
     da0:	8d b7       	in	r24, 0x3d	; 61
     da2:	9e b7       	in	r25, 0x3e	; 62
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	98 87       	std	Y+8, r25	; 0x08
     da8:	8f 83       	std	Y+7, r24	; 0x07
     daa:	19 82       	std	Y+1, r1	; 0x01
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	8a 83       	std	Y+2, r24	; 0x02
     db0:	40 c0       	rjmp	.+128    	; 0xe32 <num_to_digit+0xea>
     db2:	4b 85       	ldd	r20, Y+11	; 0x0b
     db4:	5c 85       	ldd	r21, Y+12	; 0x0c
     db6:	9a 01       	movw	r18, r20
     db8:	ad ec       	ldi	r26, 0xCD	; 205
     dba:	bc ec       	ldi	r27, 0xCC	; 204
     dbc:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	96 95       	lsr	r25
     dc6:	87 95       	ror	r24
     dc8:	96 95       	lsr	r25
     dca:	87 95       	ror	r24
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	9c 01       	movw	r18, r24
     dd2:	22 0f       	add	r18, r18
     dd4:	33 1f       	adc	r19, r19
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	82 0f       	add	r24, r18
     ddc:	93 1f       	adc	r25, r19
     dde:	da 01       	movw	r26, r20
     de0:	a8 1b       	sub	r26, r24
     de2:	b9 0b       	sbc	r27, r25
     de4:	cd 01       	movw	r24, r26
     de6:	89 87       	std	Y+9, r24	; 0x09
     de8:	8e 85       	ldd	r24, Y+14	; 0x0e
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	f9 01       	movw	r30, r18
     df6:	e8 1b       	sub	r30, r24
     df8:	f9 0b       	sbc	r31, r25
     dfa:	cf 01       	movw	r24, r30
     dfc:	29 85       	ldd	r18, Y+9	; 0x09
     dfe:	40 e3       	ldi	r20, 0x30	; 48
     e00:	42 0f       	add	r20, r18
     e02:	2f 81       	ldd	r18, Y+7	; 0x07
     e04:	38 85       	ldd	r19, Y+8	; 0x08
     e06:	82 0f       	add	r24, r18
     e08:	93 1f       	adc	r25, r19
     e0a:	dc 01       	movw	r26, r24
     e0c:	4c 93       	st	X, r20
     e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e10:	9c 85       	ldd	r25, Y+12	; 0x0c
     e12:	9c 01       	movw	r18, r24
     e14:	ad ec       	ldi	r26, 0xCD	; 205
     e16:	bc ec       	ldi	r27, 0xCC	; 204
     e18:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
     e1c:	96 95       	lsr	r25
     e1e:	87 95       	ror	r24
     e20:	96 95       	lsr	r25
     e22:	87 95       	ror	r24
     e24:	96 95       	lsr	r25
     e26:	87 95       	ror	r24
     e28:	9c 87       	std	Y+12, r25	; 0x0c
     e2a:	8b 87       	std	Y+11, r24	; 0x0b
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	8f 5f       	subi	r24, 0xFF	; 255
     e30:	8a 83       	std	Y+2, r24	; 0x02
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	8e 85       	ldd	r24, Y+14	; 0x0e
     e36:	89 17       	cp	r24, r25
     e38:	08 f0       	brcs	.+2      	; 0xe3c <num_to_digit+0xf4>
     e3a:	bb cf       	rjmp	.-138    	; 0xdb2 <num_to_digit+0x6a>
     e3c:	1b 82       	std	Y+3, r1	; 0x03
     e3e:	1c 82       	std	Y+4, r1	; 0x04
     e40:	c8 c0       	rjmp	.+400    	; 0xfd2 <num_to_digit+0x28a>
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	2f 81       	ldd	r18, Y+7	; 0x07
     e4a:	38 85       	ldd	r19, Y+8	; 0x08
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	80 33       	cpi	r24, 0x30	; 48
     e56:	11 f0       	breq	.+4      	; 0xe5c <num_to_digit+0x114>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	8b 83       	std	Y+3, r24	; 0x03
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	88 23       	and	r24, r24
     e62:	09 f0       	breq	.+2      	; 0xe66 <num_to_digit+0x11e>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e6e:	48 2f       	mov	r20, r24
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	8d 85       	ldd	r24, Y+13	; 0x0d
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	da 01       	movw	r26, r20
     e7a:	a8 1b       	sub	r26, r24
     e7c:	b9 0b       	sbc	r27, r25
     e7e:	cd 01       	movw	r24, r26
     e80:	02 97       	sbiw	r24, 0x02	; 2
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	0c f0       	brlt	.+2      	; 0xe8c <num_to_digit+0x144>
     e8a:	40 e0       	ldi	r20, 0x00	; 0
     e8c:	86 2f       	mov	r24, r22
     e8e:	84 23       	and	r24, r20
     e90:	88 23       	and	r24, r24
     e92:	51 f0       	breq	.+20     	; 0xea8 <num_to_digit+0x160>
     e94:	8c 81       	ldd	r24, Y+4	; 0x04
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	2f 81       	ldd	r18, Y+7	; 0x07
     e9c:	38 85       	ldd	r19, Y+8	; 0x08
     e9e:	82 0f       	add	r24, r18
     ea0:	93 1f       	adc	r25, r19
     ea2:	20 e1       	ldi	r18, 0x10	; 16
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 83       	st	Z, r18
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8e 85       	ldd	r24, Y+14	; 0x0e
     eb0:	48 2f       	mov	r20, r24
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb6:	88 2f       	mov	r24, r24
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	ba 01       	movw	r22, r20
     ebc:	68 1b       	sub	r22, r24
     ebe:	79 0b       	sbc	r23, r25
     ec0:	cb 01       	movw	r24, r22
     ec2:	28 17       	cp	r18, r24
     ec4:	39 07       	cpc	r19, r25
     ec6:	64 f5       	brge	.+88     	; 0xf20 <num_to_digit+0x1d8>
     ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eca:	68 2f       	mov	r22, r24
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	88 89       	ldd	r24, Y+16	; 0x10
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed6:	48 2f       	mov	r20, r24
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	84 0f       	add	r24, r20
     ee2:	95 1f       	adc	r25, r21
     ee4:	4c 81       	ldd	r20, Y+4	; 0x04
     ee6:	44 2f       	mov	r20, r20
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	af 81       	ldd	r26, Y+7	; 0x07
     eec:	b8 85       	ldd	r27, Y+8	; 0x08
     eee:	4a 0f       	add	r20, r26
     ef0:	5b 1f       	adc	r21, r27
     ef2:	fa 01       	movw	r30, r20
     ef4:	a0 81       	ld	r26, Z
     ef6:	b4 e1       	ldi	r27, 0x14	; 20
     ef8:	b2 9f       	mul	r27, r18
     efa:	a0 01       	movw	r20, r0
     efc:	b3 9f       	mul	r27, r19
     efe:	50 0d       	add	r21, r0
     f00:	11 24       	eor	r1, r1
     f02:	b0 e5       	ldi	r27, 0x50	; 80
     f04:	b6 9f       	mul	r27, r22
     f06:	90 01       	movw	r18, r0
     f08:	b7 9f       	mul	r27, r23
     f0a:	30 0d       	add	r19, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	24 0f       	add	r18, r20
     f10:	35 1f       	adc	r19, r21
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	82 5f       	subi	r24, 0xF2	; 242
     f18:	9c 4f       	sbci	r25, 0xFC	; 252
     f1a:	fc 01       	movw	r30, r24
     f1c:	a0 83       	st	Z, r26
     f1e:	56 c0       	rjmp	.+172    	; 0xfcc <num_to_digit+0x284>
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	88 23       	and	r24, r24
     f24:	29 f5       	brne	.+74     	; 0xf70 <num_to_digit+0x228>
     f26:	8a 85       	ldd	r24, Y+10	; 0x0a
     f28:	68 2f       	mov	r22, r24
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	88 89       	ldd	r24, Y+16	; 0x10
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8f 85       	ldd	r24, Y+15	; 0x0f
     f34:	48 2f       	mov	r20, r24
     f36:	50 e0       	ldi	r21, 0x00	; 0
     f38:	8c 81       	ldd	r24, Y+4	; 0x04
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	84 0f       	add	r24, r20
     f40:	95 1f       	adc	r25, r21
     f42:	a4 e1       	ldi	r26, 0x14	; 20
     f44:	a2 9f       	mul	r26, r18
     f46:	a0 01       	movw	r20, r0
     f48:	a3 9f       	mul	r26, r19
     f4a:	50 0d       	add	r21, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	a0 e5       	ldi	r26, 0x50	; 80
     f50:	a6 9f       	mul	r26, r22
     f52:	90 01       	movw	r18, r0
     f54:	a7 9f       	mul	r26, r23
     f56:	30 0d       	add	r19, r0
     f58:	11 24       	eor	r1, r1
     f5a:	24 0f       	add	r18, r20
     f5c:	35 1f       	adc	r19, r21
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	82 5f       	subi	r24, 0xF2	; 242
     f64:	9c 4f       	sbci	r25, 0xFC	; 252
     f66:	2e e2       	ldi	r18, 0x2E	; 46
     f68:	dc 01       	movw	r26, r24
     f6a:	2c 93       	st	X, r18
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	8a 85       	ldd	r24, Y+10	; 0x0a
     f72:	68 2f       	mov	r22, r24
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	88 89       	ldd	r24, Y+16	; 0x10
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	ac 01       	movw	r20, r24
     f84:	4f 5f       	subi	r20, 0xFF	; 255
     f86:	5f 4f       	sbci	r21, 0xFF	; 255
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	84 0f       	add	r24, r20
     f90:	95 1f       	adc	r25, r21
     f92:	4c 81       	ldd	r20, Y+4	; 0x04
     f94:	44 2f       	mov	r20, r20
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	af 81       	ldd	r26, Y+7	; 0x07
     f9a:	b8 85       	ldd	r27, Y+8	; 0x08
     f9c:	4a 0f       	add	r20, r26
     f9e:	5b 1f       	adc	r21, r27
     fa0:	fa 01       	movw	r30, r20
     fa2:	a0 81       	ld	r26, Z
     fa4:	b4 e1       	ldi	r27, 0x14	; 20
     fa6:	b2 9f       	mul	r27, r18
     fa8:	a0 01       	movw	r20, r0
     faa:	b3 9f       	mul	r27, r19
     fac:	50 0d       	add	r21, r0
     fae:	11 24       	eor	r1, r1
     fb0:	b0 e5       	ldi	r27, 0x50	; 80
     fb2:	b6 9f       	mul	r27, r22
     fb4:	90 01       	movw	r18, r0
     fb6:	b7 9f       	mul	r27, r23
     fb8:	30 0d       	add	r19, r0
     fba:	11 24       	eor	r1, r1
     fbc:	24 0f       	add	r18, r20
     fbe:	35 1f       	adc	r19, r21
     fc0:	82 0f       	add	r24, r18
     fc2:	93 1f       	adc	r25, r19
     fc4:	82 5f       	subi	r24, 0xF2	; 242
     fc6:	9c 4f       	sbci	r25, 0xFC	; 252
     fc8:	fc 01       	movw	r30, r24
     fca:	a0 83       	st	Z, r26
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	8c 83       	std	Y+4, r24	; 0x04
     fd2:	9c 81       	ldd	r25, Y+4	; 0x04
     fd4:	8e 85       	ldd	r24, Y+14	; 0x0e
     fd6:	98 17       	cp	r25, r24
     fd8:	08 f4       	brcc	.+2      	; 0xfdc <num_to_digit+0x294>
     fda:	33 cf       	rjmp	.-410    	; 0xe42 <num_to_digit+0xfa>
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	1e bf       	out	0x3e, r17	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0d bf       	out	0x3d, r16	; 61
     fe6:	00 00       	nop
     fe8:	49 89       	ldd	r20, Y+17	; 0x11
     fea:	5a 89       	ldd	r21, Y+18	; 0x12
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	5e bf       	out	0x3e, r21	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	4d bf       	out	0x3d, r20	; 61
     ff6:	62 96       	adiw	r28, 0x12	; 18
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ef 90       	pop	r14
    100c:	08 95       	ret

0000100e <time_to_digit>:
    100e:	0f 93       	push	r16
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	63 97       	sbiw	r28, 0x13	; 19
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	8d 87       	std	Y+13, r24	; 0x0d
    1026:	4e 87       	std	Y+14, r20	; 0x0e
    1028:	5f 87       	std	Y+15, r21	; 0x0f
    102a:	68 8b       	std	Y+16, r22	; 0x10
    102c:	79 8b       	std	Y+17, r23	; 0x11
    102e:	2a 8b       	std	Y+18, r18	; 0x12
    1030:	0b 8b       	std	Y+19, r16	; 0x13
    1032:	8e 85       	ldd	r24, Y+14	; 0x0e
    1034:	9f 85       	ldd	r25, Y+15	; 0x0f
    1036:	a8 89       	ldd	r26, Y+16	; 0x10
    1038:	b9 89       	ldd	r27, Y+17	; 0x11
    103a:	28 ee       	ldi	r18, 0xE8	; 232
    103c:	33 e0       	ldi	r19, 0x03	; 3
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodsi4>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	8e 85       	ldd	r24, Y+14	; 0x0e
    1054:	9f 85       	ldd	r25, Y+15	; 0x0f
    1056:	a8 89       	ldd	r26, Y+16	; 0x10
    1058:	b9 89       	ldd	r27, Y+17	; 0x11
    105a:	28 ee       	ldi	r18, 0xE8	; 232
    105c:	33 e0       	ldi	r19, 0x03	; 3
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodsi4>
    106a:	da 01       	movw	r26, r20
    106c:	c9 01       	movw	r24, r18
    106e:	9c 83       	std	Y+4, r25	; 0x04
    1070:	8b 83       	std	Y+3, r24	; 0x03
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	9c 01       	movw	r18, r24
    1078:	a9 e8       	ldi	r26, 0x89	; 137
    107a:	b8 e8       	ldi	r27, 0x88	; 136
    107c:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    1080:	96 95       	lsr	r25
    1082:	87 95       	ror	r24
    1084:	92 95       	swap	r25
    1086:	82 95       	swap	r24
    1088:	8f 70       	andi	r24, 0x0F	; 15
    108a:	89 27       	eor	r24, r25
    108c:	9f 70       	andi	r25, 0x0F	; 15
    108e:	89 27       	eor	r24, r25
    1090:	9c 83       	std	Y+4, r25	; 0x04
    1092:	8b 83       	std	Y+3, r24	; 0x03
    1094:	8e 85       	ldd	r24, Y+14	; 0x0e
    1096:	9f 85       	ldd	r25, Y+15	; 0x0f
    1098:	a8 89       	ldd	r26, Y+16	; 0x10
    109a:	b9 89       	ldd	r27, Y+17	; 0x11
    109c:	28 ee       	ldi	r18, 0xE8	; 232
    109e:	33 e0       	ldi	r19, 0x03	; 3
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	bc 01       	movw	r22, r24
    10a6:	cd 01       	movw	r24, r26
    10a8:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodsi4>
    10ac:	da 01       	movw	r26, r20
    10ae:	c9 01       	movw	r24, r18
    10b0:	9e 83       	std	Y+6, r25	; 0x06
    10b2:	8d 83       	std	Y+5, r24	; 0x05
    10b4:	4d 81       	ldd	r20, Y+5	; 0x05
    10b6:	5e 81       	ldd	r21, Y+6	; 0x06
    10b8:	9a 01       	movw	r18, r20
    10ba:	a9 e8       	ldi	r26, 0x89	; 137
    10bc:	b8 e8       	ldi	r27, 0x88	; 136
    10be:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    10c2:	9c 01       	movw	r18, r24
    10c4:	36 95       	lsr	r19
    10c6:	27 95       	ror	r18
    10c8:	32 95       	swap	r19
    10ca:	22 95       	swap	r18
    10cc:	2f 70       	andi	r18, 0x0F	; 15
    10ce:	23 27       	eor	r18, r19
    10d0:	3f 70       	andi	r19, 0x0F	; 15
    10d2:	23 27       	eor	r18, r19
    10d4:	6c e3       	ldi	r22, 0x3C	; 60
    10d6:	62 9f       	mul	r22, r18
    10d8:	c0 01       	movw	r24, r0
    10da:	63 9f       	mul	r22, r19
    10dc:	90 0d       	add	r25, r0
    10de:	11 24       	eor	r1, r1
    10e0:	9a 01       	movw	r18, r20
    10e2:	28 1b       	sub	r18, r24
    10e4:	39 0b       	sbc	r19, r25
    10e6:	c9 01       	movw	r24, r18
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	1f 82       	std	Y+7, r1	; 0x07
    10ee:	58 c0       	rjmp	.+176    	; 0x11a0 <__stack+0xa1>
    10f0:	49 81       	ldd	r20, Y+1	; 0x01
    10f2:	5a 81       	ldd	r21, Y+2	; 0x02
    10f4:	9a 01       	movw	r18, r20
    10f6:	ad ec       	ldi	r26, 0xCD	; 205
    10f8:	bc ec       	ldi	r27, 0xCC	; 204
    10fa:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	96 95       	lsr	r25
    1104:	87 95       	ror	r24
    1106:	96 95       	lsr	r25
    1108:	87 95       	ror	r24
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	9c 01       	movw	r18, r24
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	82 0f       	add	r24, r18
    111a:	93 1f       	adc	r25, r19
    111c:	fa 01       	movw	r30, r20
    111e:	e8 1b       	sub	r30, r24
    1120:	f9 0b       	sbc	r31, r25
    1122:	cf 01       	movw	r24, r30
    1124:	8b 87       	std	Y+11, r24	; 0x0b
    1126:	8b 85       	ldd	r24, Y+11	; 0x0b
    1128:	80 5d       	subi	r24, 0xD0	; 208
    112a:	8b 87       	std	Y+11, r24	; 0x0b
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	9c 01       	movw	r18, r24
    1132:	ad ec       	ldi	r26, 0xCD	; 205
    1134:	bc ec       	ldi	r27, 0xCC	; 204
    1136:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    113a:	96 95       	lsr	r25
    113c:	87 95       	ror	r24
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	8d 85       	ldd	r24, Y+13	; 0x0d
    114c:	68 2f       	mov	r22, r24
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	8b 89       	ldd	r24, Y+19	; 0x13
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8a 89       	ldd	r24, Y+18	; 0x12
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	ac 01       	movw	r20, r24
    115e:	49 5f       	subi	r20, 0xF9	; 249
    1160:	5f 4f       	sbci	r21, 0xFF	; 255
    1162:	8f 81       	ldd	r24, Y+7	; 0x07
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fa 01       	movw	r30, r20
    116a:	e8 1b       	sub	r30, r24
    116c:	f9 0b       	sbc	r31, r25
    116e:	cf 01       	movw	r24, r30
    1170:	e4 e1       	ldi	r30, 0x14	; 20
    1172:	e2 9f       	mul	r30, r18
    1174:	a0 01       	movw	r20, r0
    1176:	e3 9f       	mul	r30, r19
    1178:	50 0d       	add	r21, r0
    117a:	11 24       	eor	r1, r1
    117c:	e0 e5       	ldi	r30, 0x50	; 80
    117e:	e6 9f       	mul	r30, r22
    1180:	90 01       	movw	r18, r0
    1182:	e7 9f       	mul	r30, r23
    1184:	30 0d       	add	r19, r0
    1186:	11 24       	eor	r1, r1
    1188:	24 0f       	add	r18, r20
    118a:	35 1f       	adc	r19, r21
    118c:	82 0f       	add	r24, r18
    118e:	93 1f       	adc	r25, r19
    1190:	82 5f       	subi	r24, 0xF2	; 242
    1192:	9c 4f       	sbci	r25, 0xFC	; 252
    1194:	2b 85       	ldd	r18, Y+11	; 0x0b
    1196:	fc 01       	movw	r30, r24
    1198:	20 83       	st	Z, r18
    119a:	8f 81       	ldd	r24, Y+7	; 0x07
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	8f 83       	std	Y+7, r24	; 0x07
    11a0:	8f 81       	ldd	r24, Y+7	; 0x07
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <__stack+0xa9>
    11a6:	a4 cf       	rjmp	.-184    	; 0x10f0 <time_to_digit+0xe2>
    11a8:	18 86       	std	Y+8, r1	; 0x08
    11aa:	58 c0       	rjmp	.+176    	; 0x125c <__stack+0x15d>
    11ac:	4d 81       	ldd	r20, Y+5	; 0x05
    11ae:	5e 81       	ldd	r21, Y+6	; 0x06
    11b0:	9a 01       	movw	r18, r20
    11b2:	ad ec       	ldi	r26, 0xCD	; 205
    11b4:	bc ec       	ldi	r27, 0xCC	; 204
    11b6:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    11ba:	96 95       	lsr	r25
    11bc:	87 95       	ror	r24
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	96 95       	lsr	r25
    11c4:	87 95       	ror	r24
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	9c 01       	movw	r18, r24
    11cc:	22 0f       	add	r18, r18
    11ce:	33 1f       	adc	r19, r19
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	9a 01       	movw	r18, r20
    11da:	28 1b       	sub	r18, r24
    11dc:	39 0b       	sbc	r19, r25
    11de:	c9 01       	movw	r24, r18
    11e0:	8c 87       	std	Y+12, r24	; 0x0c
    11e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e4:	80 5d       	subi	r24, 0xD0	; 208
    11e6:	8c 87       	std	Y+12, r24	; 0x0c
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	9c 01       	movw	r18, r24
    11ee:	ad ec       	ldi	r26, 0xCD	; 205
    11f0:	bc ec       	ldi	r27, 0xCC	; 204
    11f2:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    11f6:	96 95       	lsr	r25
    11f8:	87 95       	ror	r24
    11fa:	96 95       	lsr	r25
    11fc:	87 95       	ror	r24
    11fe:	96 95       	lsr	r25
    1200:	87 95       	ror	r24
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	8d 85       	ldd	r24, Y+13	; 0x0d
    1208:	68 2f       	mov	r22, r24
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	8b 89       	ldd	r24, Y+19	; 0x13
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8a 89       	ldd	r24, Y+18	; 0x12
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	ac 01       	movw	r20, r24
    121a:	4d 5f       	subi	r20, 0xFD	; 253
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	88 85       	ldd	r24, Y+8	; 0x08
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	fa 01       	movw	r30, r20
    1226:	e8 1b       	sub	r30, r24
    1228:	f9 0b       	sbc	r31, r25
    122a:	cf 01       	movw	r24, r30
    122c:	e4 e1       	ldi	r30, 0x14	; 20
    122e:	e2 9f       	mul	r30, r18
    1230:	a0 01       	movw	r20, r0
    1232:	e3 9f       	mul	r30, r19
    1234:	50 0d       	add	r21, r0
    1236:	11 24       	eor	r1, r1
    1238:	e0 e5       	ldi	r30, 0x50	; 80
    123a:	e6 9f       	mul	r30, r22
    123c:	90 01       	movw	r18, r0
    123e:	e7 9f       	mul	r30, r23
    1240:	30 0d       	add	r19, r0
    1242:	11 24       	eor	r1, r1
    1244:	24 0f       	add	r18, r20
    1246:	35 1f       	adc	r19, r21
    1248:	82 0f       	add	r24, r18
    124a:	93 1f       	adc	r25, r19
    124c:	82 5f       	subi	r24, 0xF2	; 242
    124e:	9c 4f       	sbci	r25, 0xFC	; 252
    1250:	2c 85       	ldd	r18, Y+12	; 0x0c
    1252:	fc 01       	movw	r30, r24
    1254:	20 83       	st	Z, r18
    1256:	88 85       	ldd	r24, Y+8	; 0x08
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	88 87       	std	Y+8, r24	; 0x08
    125c:	88 85       	ldd	r24, Y+8	; 0x08
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	08 f4       	brcc	.+2      	; 0x1264 <__stack+0x165>
    1262:	a4 cf       	rjmp	.-184    	; 0x11ac <__stack+0xad>
    1264:	19 86       	std	Y+9, r1	; 0x09
    1266:	66 c0       	rjmp	.+204    	; 0x1334 <__stack+0x235>
    1268:	4b 81       	ldd	r20, Y+3	; 0x03
    126a:	5c 81       	ldd	r21, Y+4	; 0x04
    126c:	9a 01       	movw	r18, r20
    126e:	ad ec       	ldi	r26, 0xCD	; 205
    1270:	bc ec       	ldi	r27, 0xCC	; 204
    1272:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    1276:	96 95       	lsr	r25
    1278:	87 95       	ror	r24
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	96 95       	lsr	r25
    1280:	87 95       	ror	r24
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	9c 01       	movw	r18, r24
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	82 0f       	add	r24, r18
    1292:	93 1f       	adc	r25, r19
    1294:	9a 01       	movw	r18, r20
    1296:	28 1b       	sub	r18, r24
    1298:	39 0b       	sbc	r19, r25
    129a:	c9 01       	movw	r24, r18
    129c:	8a 87       	std	Y+10, r24	; 0x0a
    129e:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a0:	80 5d       	subi	r24, 0xD0	; 208
    12a2:	8a 87       	std	Y+10, r24	; 0x0a
    12a4:	31 e0       	ldi	r19, 0x01	; 1
    12a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a8:	80 33       	cpi	r24, 0x30	; 48
    12aa:	09 f0       	breq	.+2      	; 0x12ae <__stack+0x1af>
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	0a 97       	sbiw	r24, 0x0a	; 10
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__stack+0x1bb>
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	83 2f       	mov	r24, r19
    12bc:	82 23       	and	r24, r18
    12be:	88 23       	and	r24, r24
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <__stack+0x1c7>
    12c2:	80 e1       	ldi	r24, 0x10	; 16
    12c4:	8a 87       	std	Y+10, r24	; 0x0a
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	9c 01       	movw	r18, r24
    12cc:	ad ec       	ldi	r26, 0xCD	; 205
    12ce:	bc ec       	ldi	r27, 0xCC	; 204
    12d0:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__umulhisi3>
    12d4:	96 95       	lsr	r25
    12d6:	87 95       	ror	r24
    12d8:	96 95       	lsr	r25
    12da:	87 95       	ror	r24
    12dc:	96 95       	lsr	r25
    12de:	87 95       	ror	r24
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e6:	68 2f       	mov	r22, r24
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	8a 89       	ldd	r24, Y+18	; 0x12
    12f2:	48 2f       	mov	r20, r24
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	fa 01       	movw	r30, r20
    12fe:	e8 1b       	sub	r30, r24
    1300:	f9 0b       	sbc	r31, r25
    1302:	cf 01       	movw	r24, r30
    1304:	e4 e1       	ldi	r30, 0x14	; 20
    1306:	e2 9f       	mul	r30, r18
    1308:	a0 01       	movw	r20, r0
    130a:	e3 9f       	mul	r30, r19
    130c:	50 0d       	add	r21, r0
    130e:	11 24       	eor	r1, r1
    1310:	e0 e5       	ldi	r30, 0x50	; 80
    1312:	e6 9f       	mul	r30, r22
    1314:	90 01       	movw	r18, r0
    1316:	e7 9f       	mul	r30, r23
    1318:	30 0d       	add	r19, r0
    131a:	11 24       	eor	r1, r1
    131c:	24 0f       	add	r18, r20
    131e:	35 1f       	adc	r19, r21
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	82 5f       	subi	r24, 0xF2	; 242
    1326:	9c 4f       	sbci	r25, 0xFC	; 252
    1328:	2a 85       	ldd	r18, Y+10	; 0x0a
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	89 87       	std	Y+9, r24	; 0x09
    1334:	89 85       	ldd	r24, Y+9	; 0x09
    1336:	82 30       	cpi	r24, 0x02	; 2
    1338:	08 f4       	brcc	.+2      	; 0x133c <__stack+0x23d>
    133a:	96 cf       	rjmp	.-212    	; 0x1268 <__stack+0x169>
    133c:	00 00       	nop
    133e:	63 96       	adiw	r28, 0x13	; 19
    1340:	0f b6       	in	r0, 0x3f	; 63
    1342:	f8 94       	cli
    1344:	de bf       	out	0x3e, r29	; 62
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <dsp_clear>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	00 d0       	rcall	.+0      	; 0x1358 <dsp_clear+0x6>
    1358:	00 d0       	rcall	.+0      	; 0x135a <dsp_clear+0x8>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	1a 82       	std	Y+2, r1	; 0x02
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	56 c0       	rjmp	.+172    	; 0x1410 <dsp_clear+0xbe>
    1364:	1c 82       	std	Y+4, r1	; 0x04
    1366:	1b 82       	std	Y+3, r1	; 0x03
    1368:	49 c0       	rjmp	.+146    	; 0x13fc <dsp_clear+0xaa>
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	44 e1       	ldi	r20, 0x14	; 20
    1370:	48 9f       	mul	r20, r24
    1372:	90 01       	movw	r18, r0
    1374:	49 9f       	mul	r20, r25
    1376:	30 0d       	add	r19, r0
    1378:	11 24       	eor	r1, r1
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	82 0f       	add	r24, r18
    1380:	93 1f       	adc	r25, r19
    1382:	82 5f       	subi	r24, 0xF2	; 242
    1384:	9c 4f       	sbci	r25, 0xFC	; 252
    1386:	20 e1       	ldi	r18, 0x10	; 16
    1388:	fc 01       	movw	r30, r24
    138a:	20 83       	st	Z, r18
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	44 e1       	ldi	r20, 0x14	; 20
    1392:	48 9f       	mul	r20, r24
    1394:	90 01       	movw	r18, r0
    1396:	49 9f       	mul	r20, r25
    1398:	30 0d       	add	r19, r0
    139a:	11 24       	eor	r1, r1
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	82 5a       	subi	r24, 0xA2	; 162
    13a6:	9c 4f       	sbci	r25, 0xFC	; 252
    13a8:	20 e1       	ldi	r18, 0x10	; 16
    13aa:	fc 01       	movw	r30, r24
    13ac:	20 83       	st	Z, r18
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	44 e1       	ldi	r20, 0x14	; 20
    13b4:	48 9f       	mul	r20, r24
    13b6:	90 01       	movw	r18, r0
    13b8:	49 9f       	mul	r20, r25
    13ba:	30 0d       	add	r19, r0
    13bc:	11 24       	eor	r1, r1
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	82 0f       	add	r24, r18
    13c4:	93 1f       	adc	r25, r19
    13c6:	82 55       	subi	r24, 0x52	; 82
    13c8:	9c 4f       	sbci	r25, 0xFC	; 252
    13ca:	20 e1       	ldi	r18, 0x10	; 16
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	44 e1       	ldi	r20, 0x14	; 20
    13d6:	48 9f       	mul	r20, r24
    13d8:	90 01       	movw	r18, r0
    13da:	49 9f       	mul	r20, r25
    13dc:	30 0d       	add	r19, r0
    13de:	11 24       	eor	r1, r1
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	82 50       	subi	r24, 0x02	; 2
    13ea:	9c 4f       	sbci	r25, 0xFC	; 252
    13ec:	20 e1       	ldi	r18, 0x10	; 16
    13ee:	fc 01       	movw	r30, r24
    13f0:	20 83       	st	Z, r18
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	44 97       	sbiw	r24, 0x14	; 20
    1402:	0c f4       	brge	.+2      	; 0x1406 <dsp_clear+0xb4>
    1404:	b2 cf       	rjmp	.-156    	; 0x136a <dsp_clear+0x18>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	9a 81       	ldd	r25, Y+2	; 0x02
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	04 97       	sbiw	r24, 0x04	; 4
    1416:	0c f4       	brge	.+2      	; 0x141a <dsp_clear+0xc8>
    1418:	a5 cf       	rjmp	.-182    	; 0x1364 <dsp_clear+0x12>
    141a:	00 00       	nop
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <dsp_arrayinit_static>:
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	84 e5       	ldi	r24, 0x54	; 84
    1434:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <dsp_data>
    1438:	83 e5       	ldi	r24, 0x53	; 83
    143a:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <dsp_data+0x1>
    143e:	86 e5       	ldi	r24, 0x56	; 86
    1440:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <dsp_data+0x2>
    1444:	83 e5       	ldi	r24, 0x53	; 83
    1446:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <dsp_data+0xa>
    144a:	80 e5       	ldi	r24, 0x50	; 80
    144c:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <dsp_data+0xb>
    1450:	84 e4       	ldi	r24, 0x44	; 68
    1452:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <dsp_data+0xc>
    1456:	83 e4       	ldi	r24, 0x43	; 67
    1458:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <dsp_data+0x14>
    145c:	8f e4       	ldi	r24, 0x4F	; 79
    145e:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <dsp_data+0x15>
    1462:	8f e4       	ldi	r24, 0x4F	; 79
    1464:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <dsp_data+0x16>
    1468:	8c e4       	ldi	r24, 0x4C	; 76
    146a:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <dsp_data+0x17>
    146e:	81 e4       	ldi	r24, 0x41	; 65
    1470:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <dsp_data+0x1e>
    1474:	83 e4       	ldi	r24, 0x43	; 67
    1476:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <dsp_data+0x1f>
    147a:	84 e5       	ldi	r24, 0x54	; 84
    147c:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <dsp_data+0x20>
    1480:	82 e4       	ldi	r24, 0x42	; 66
    1482:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <dsp_data+0x28>
    1486:	82 e4       	ldi	r24, 0x42	; 66
    1488:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <dsp_data+0x29>
    148c:	83 e5       	ldi	r24, 0x53	; 83
    148e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <dsp_data+0x32>
    1492:	8f e4       	ldi	r24, 0x4F	; 79
    1494:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <dsp_data+0x33>
    1498:	83 e4       	ldi	r24, 0x43	; 67
    149a:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <dsp_data+0x34>
    149e:	8c e4       	ldi	r24, 0x4C	; 76
    14a0:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <dsp_data+0x46>
    14a4:	86 e5       	ldi	r24, 0x56	; 86
    14a6:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <dsp_data+0x47>
    14aa:	83 e5       	ldi	r24, 0x53	; 83
    14ac:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <dsp_data+0x48>
    14b0:	86 e5       	ldi	r24, 0x56	; 86
    14b2:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <dsp_data+0x8>
    14b6:	8b e4       	ldi	r24, 0x4B	; 75
    14b8:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <dsp_data+0x11>
    14bc:	8d e4       	ldi	r24, 0x4D	; 77
    14be:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <dsp_data+0x12>
    14c2:	88 e4       	ldi	r24, 0x48	; 72
    14c4:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <dsp_data+0x13>
    14c8:	83 e4       	ldi	r24, 0x43	; 67
    14ca:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <dsp_data+0x1c>
    14ce:	83 e4       	ldi	r24, 0x43	; 67
    14d0:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <dsp_data+0x25>
    14d4:	8d e2       	ldi	r24, 0x2D	; 45
    14d6:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <dsp_data+0x30>
    14da:	85 e2       	ldi	r24, 0x25	; 37
    14dc:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <dsp_data+0x39>
    14e0:	86 e5       	ldi	r24, 0x56	; 86
    14e2:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <dsp_data+0x4d>
    14e6:	84 e5       	ldi	r24, 0x54	; 84
    14e8:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <dsp_data+0x50>
    14ec:	80 e5       	ldi	r24, 0x50	; 80
    14ee:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <dsp_data+0x51>
    14f2:	83 e5       	ldi	r24, 0x53	; 83
    14f4:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <dsp_data+0x52>
    14f8:	81 e3       	ldi	r24, 0x31	; 49
    14fa:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <dsp_data+0x53>
    14fe:	82 e3       	ldi	r24, 0x32	; 50
    1500:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <dsp_data+0x5a>
    1504:	81 e4       	ldi	r24, 0x41	; 65
    1506:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <dsp_data+0x64>
    150a:	80 e5       	ldi	r24, 0x50	; 80
    150c:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <dsp_data+0x65>
    1510:	83 e5       	ldi	r24, 0x53	; 83
    1512:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <dsp_data+0x66>
    1516:	81 e3       	ldi	r24, 0x31	; 49
    1518:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <dsp_data+0x67>
    151c:	82 e3       	ldi	r24, 0x32	; 50
    151e:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <dsp_data+0x6e>
    1522:	84 e5       	ldi	r24, 0x54	; 84
    1524:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <dsp_data+0x78>
    1528:	80 e5       	ldi	r24, 0x50	; 80
    152a:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <dsp_data+0x79>
    152e:	83 e5       	ldi	r24, 0x53	; 83
    1530:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <dsp_data+0x7a>
    1534:	85 e4       	ldi	r24, 0x45	; 69
    1536:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <dsp_data+0x7b>
    153a:	82 e4       	ldi	r24, 0x42	; 66
    153c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <dsp_data+0x8c>
    1540:	80 e5       	ldi	r24, 0x50	; 80
    1542:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <dsp_data+0x8d>
    1546:	86 e4       	ldi	r24, 0x46	; 70
    1548:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <dsp_data+0x8e>
    154c:	82 e5       	ldi	r24, 0x52	; 82
    154e:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <dsp_data+0x94>
    1552:	85 e2       	ldi	r24, 0x25	; 37
    1554:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <dsp_data+0x58>
    1558:	85 e2       	ldi	r24, 0x25	; 37
    155a:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <dsp_data+0x6c>
    155e:	85 e2       	ldi	r24, 0x25	; 37
    1560:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <dsp_data+0x80>
    1564:	85 e2       	ldi	r24, 0x25	; 37
    1566:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <dsp_data+0x5f>
    156a:	85 e2       	ldi	r24, 0x25	; 37
    156c:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <dsp_data+0x73>
    1570:	82 e4       	ldi	r24, 0x42	; 66
    1572:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <dsp_data+0x92>
    1576:	82 e4       	ldi	r24, 0x42	; 66
    1578:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <dsp_data+0x98>
    157c:	84 e5       	ldi	r24, 0x54	; 84
    157e:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <dsp_data+0xa0>
    1582:	83 e4       	ldi	r24, 0x43	; 67
    1584:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <dsp_data+0xa1>
    1588:	82 e4       	ldi	r24, 0x42	; 66
    158a:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <dsp_data+0xb4>
    158e:	85 e4       	ldi	r24, 0x45	; 69
    1590:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <dsp_data+0xb5>
    1594:	83 e5       	ldi	r24, 0x53	; 83
    1596:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <dsp_data+0xb6>
    159a:	80 e5       	ldi	r24, 0x50	; 80
    159c:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <dsp_data+0xc8>
    15a0:	82 e5       	ldi	r24, 0x52	; 82
    15a2:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <dsp_data+0xc9>
    15a6:	85 e4       	ldi	r24, 0x45	; 69
    15a8:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <dsp_data+0xca>
    15ac:	8c e4       	ldi	r24, 0x4C	; 76
    15ae:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <dsp_data+0xdc>
    15b2:	8e e4       	ldi	r24, 0x4E	; 78
    15b4:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <dsp_data+0xdd>
    15b8:	83 e5       	ldi	r24, 0x53	; 83
    15ba:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dsp_data+0xa5>
    15be:	80 e5       	ldi	r24, 0x50	; 80
    15c0:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <dsp_data+0xa6>
    15c4:	85 e4       	ldi	r24, 0x45	; 69
    15c6:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <dsp_data+0xa7>
    15ca:	84 e4       	ldi	r24, 0x44	; 68
    15cc:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <dsp_data+0xa8>
    15d0:	8b e4       	ldi	r24, 0x4B	; 75
    15d2:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <dsp_data+0xad>
    15d6:	8d e4       	ldi	r24, 0x4D	; 77
    15d8:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <dsp_data+0xae>
    15dc:	88 e4       	ldi	r24, 0x48	; 72
    15de:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dsp_data+0xaf>
    15e2:	8f e4       	ldi	r24, 0x4F	; 79
    15e4:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <dsp_data+0xe2>
    15e8:	84 e4       	ldi	r24, 0x44	; 68
    15ea:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <dsp_data+0xe3>
    15ee:	8f e4       	ldi	r24, 0x4F	; 79
    15f0:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <dsp_data+0xe4>
    15f4:	8b e4       	ldi	r24, 0x4B	; 75
    15f6:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <dsp_data+0xe9>
    15fa:	8d e4       	ldi	r24, 0x4D	; 77
    15fc:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <dsp_data+0xea>
    1600:	8a e3       	ldi	r24, 0x3A	; 58
    1602:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <dsp_data+0xb9>
    1606:	8a e3       	ldi	r24, 0x3A	; 58
    1608:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <dsp_data+0xbc>
    160c:	8a e3       	ldi	r24, 0x3A	; 58
    160e:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <dsp_data+0xcd>
    1612:	8a e3       	ldi	r24, 0x3A	; 58
    1614:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <dsp_data+0xd0>
    1618:	00 00       	nop
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <invert_binary_number>:
	clear_top_right_bar();
	uint16_t Top_Right_Bar_Divider = (max_value_r - min_value_r) / (LED_COUNT_TOP_RIGHT - 1);
	int8_t amount_r = (current_value_r - min_value_r + Top_Right_Bar_Divider) / Top_Right_Bar_Divider;
	if (amount_r > 0) {led_right_top_bar_select(amount_r);}
	else {led_right_top_bar_select(0);}
}
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	00 d0       	rcall	.+0      	; 0x1626 <invert_binary_number+0x6>
    1626:	1f 92       	push	r1
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	19 82       	std	Y+1, r1	; 0x01
    1630:	1a 82       	std	Y+2, r1	; 0x02
    1632:	22 c0       	rjmp	.+68     	; 0x1678 <invert_binary_number+0x58>
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	2a 81       	ldd	r18, Y+2	; 0x02
    163c:	22 2f       	mov	r18, r18
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <invert_binary_number+0x26>
    1642:	95 95       	asr	r25
    1644:	87 95       	ror	r24
    1646:	2a 95       	dec	r18
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <invert_binary_number+0x22>
    164a:	81 70       	andi	r24, 0x01	; 1
    164c:	99 27       	eor	r25, r25
    164e:	2a 81       	ldd	r18, Y+2	; 0x02
    1650:	22 2f       	mov	r18, r18
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	47 e0       	ldi	r20, 0x07	; 7
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	ba 01       	movw	r22, r20
    165a:	62 1b       	sub	r22, r18
    165c:	73 0b       	sbc	r23, r19
    165e:	9b 01       	movw	r18, r22
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <invert_binary_number+0x46>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	2a 95       	dec	r18
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <invert_binary_number+0x42>
    166a:	98 2f       	mov	r25, r24
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	89 2b       	or	r24, r25
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	8a 83       	std	Y+2, r24	; 0x02
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	88 30       	cpi	r24, 0x08	; 8
    167c:	d8 f2       	brcs	.-74     	; 0x1634 <invert_binary_number+0x14>
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <clear_top_left_bar>:
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	82 e2       	ldi	r24, 0x22	; 34
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	22 e2       	ldi	r18, 0x22	; 34
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	f9 01       	movw	r30, r18
    169e:	20 81       	ld	r18, Z
    16a0:	2f 70       	andi	r18, 0x0F	; 15
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
    16a6:	84 e3       	ldi	r24, 0x34	; 52
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	24 e3       	ldi	r18, 0x34	; 52
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	f9 01       	movw	r30, r18
    16b0:	20 81       	ld	r18, Z
    16b2:	2b 7f       	andi	r18, 0xFB	; 251
    16b4:	fc 01       	movw	r30, r24
    16b6:	20 83       	st	Z, r18
    16b8:	00 00       	nop
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <clear_top_right_bar>:
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	88 e2       	ldi	r24, 0x28	; 40
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	fc 01       	movw	r30, r24
    16ce:	10 82       	st	Z, r1
    16d0:	84 e3       	ldi	r24, 0x34	; 52
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	24 e3       	ldi	r18, 0x34	; 52
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	f9 01       	movw	r30, r18
    16da:	20 81       	ld	r18, Z
    16dc:	2c 7f       	andi	r18, 0xFC	; 252
    16de:	fc 01       	movw	r30, r24
    16e0:	20 83       	st	Z, r18
    16e2:	00 00       	nop
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	08 95       	ret

000016ea <led_left_top_bar_select>:

//This Function turns on the desired amount of LEDs of the left Top Bar
void led_left_top_bar_select(uint8_t select_l)
{
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	1f 92       	push	r1
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= ~(0xFF << select_l) << PA4;
    16f6:	82 e2       	ldi	r24, 0x22	; 34
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	22 e2       	ldi	r18, 0x22	; 34
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	f9 01       	movw	r30, r18
    1700:	20 81       	ld	r18, Z
    1702:	62 2f       	mov	r22, r18
    1704:	29 81       	ldd	r18, Y+1	; 0x01
    1706:	42 2f       	mov	r20, r18
    1708:	50 e0       	ldi	r21, 0x00	; 0
    170a:	2f ef       	ldi	r18, 0xFF	; 255
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <led_left_top_bar_select+0x2a>
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	4a 95       	dec	r20
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <led_left_top_bar_select+0x26>
    1718:	20 95       	com	r18
    171a:	30 95       	com	r19
    171c:	22 95       	swap	r18
    171e:	32 95       	swap	r19
    1720:	30 7f       	andi	r19, 0xF0	; 240
    1722:	32 27       	eor	r19, r18
    1724:	20 7f       	andi	r18, 0xF0	; 240
    1726:	32 27       	eor	r19, r18
    1728:	26 2b       	or	r18, r22
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
	PORTG |= (1<<PG2) & ((0x80) >> select_l);
    172e:	84 e3       	ldi	r24, 0x34	; 52
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	24 e3       	ldi	r18, 0x34	; 52
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	f9 01       	movw	r30, r18
    1738:	20 81       	ld	r18, Z
    173a:	62 2f       	mov	r22, r18
    173c:	29 81       	ldd	r18, Y+1	; 0x01
    173e:	42 2f       	mov	r20, r18
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	20 e8       	ldi	r18, 0x80	; 128
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <led_left_top_bar_select+0x62>
    1748:	35 95       	asr	r19
    174a:	27 95       	ror	r18
    174c:	4a 95       	dec	r20
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <led_left_top_bar_select+0x5e>
    1750:	24 70       	andi	r18, 0x04	; 4
    1752:	26 2b       	or	r18, r22
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
}
    1758:	00 00       	nop
    175a:	0f 90       	pop	r0
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <led_right_top_bar_select>:

//This Function turns on the desired amount of LEDs of the right Top Bar
void led_right_top_bar_select(uint8_t select_r)
{
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	1f 92       	push	r1
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	89 83       	std	Y+1, r24	; 0x01
	PORTC |= ~(0xFF >> select_r);
    176e:	88 e2       	ldi	r24, 0x28	; 40
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	28 e2       	ldi	r18, 0x28	; 40
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	f9 01       	movw	r30, r18
    1778:	20 81       	ld	r18, Z
    177a:	62 2f       	mov	r22, r18
    177c:	29 81       	ldd	r18, Y+1	; 0x01
    177e:	42 2f       	mov	r20, r18
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	2f ef       	ldi	r18, 0xFF	; 255
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	02 c0       	rjmp	.+4      	; 0x178c <led_right_top_bar_select+0x2a>
    1788:	35 95       	asr	r19
    178a:	27 95       	ror	r18
    178c:	4a 95       	dec	r20
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <led_right_top_bar_select+0x26>
    1790:	20 95       	com	r18
    1792:	26 2b       	or	r18, r22
    1794:	fc 01       	movw	r30, r24
    1796:	20 83       	st	Z, r18
	PORTG |= (~(0xFF << (select_r/9)) << (select_r/9)) + (select_r/10);
    1798:	84 e3       	ldi	r24, 0x34	; 52
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	24 e3       	ldi	r18, 0x34	; 52
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	f9 01       	movw	r30, r18
    17a2:	20 81       	ld	r18, Z
    17a4:	62 2f       	mov	r22, r18
    17a6:	39 81       	ldd	r19, Y+1	; 0x01
    17a8:	29 e3       	ldi	r18, 0x39	; 57
    17aa:	32 9f       	mul	r19, r18
    17ac:	21 2d       	mov	r18, r1
    17ae:	11 24       	eor	r1, r1
    17b0:	26 95       	lsr	r18
    17b2:	42 2f       	mov	r20, r18
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	2f ef       	ldi	r18, 0xFF	; 255
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <led_right_top_bar_select+0x5e>
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	4a 95       	dec	r20
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <led_right_top_bar_select+0x5a>
    17c4:	20 95       	com	r18
    17c6:	30 95       	com	r19
    17c8:	59 81       	ldd	r21, Y+1	; 0x01
    17ca:	49 e3       	ldi	r20, 0x39	; 57
    17cc:	54 9f       	mul	r21, r20
    17ce:	41 2d       	mov	r20, r1
    17d0:	11 24       	eor	r1, r1
    17d2:	46 95       	lsr	r20
    17d4:	44 2f       	mov	r20, r20
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <led_right_top_bar_select+0x7c>
    17da:	22 0f       	add	r18, r18
    17dc:	33 1f       	adc	r19, r19
    17de:	4a 95       	dec	r20
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <led_right_top_bar_select+0x78>
    17e2:	42 2f       	mov	r20, r18
    17e4:	39 81       	ldd	r19, Y+1	; 0x01
    17e6:	2d ec       	ldi	r18, 0xCD	; 205
    17e8:	32 9f       	mul	r19, r18
    17ea:	21 2d       	mov	r18, r1
    17ec:	11 24       	eor	r1, r1
    17ee:	26 95       	lsr	r18
    17f0:	26 95       	lsr	r18
    17f2:	26 95       	lsr	r18
    17f4:	24 0f       	add	r18, r20
    17f6:	26 2b       	or	r18, r22
    17f8:	fc 01       	movw	r30, r24
    17fa:	20 83       	st	Z, r18
}
    17fc:	00 00       	nop
    17fe:	0f 90       	pop	r0
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <dsp_writedata>:


//This Function writes data into the Display
void dsp_writedata(uint8_t data,uint8_t rs)
{
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	00 d0       	rcall	.+0      	; 0x1810 <dsp_writedata+0xa>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <dsp_writedata+0xc>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8b 83       	std	Y+3, r24	; 0x03
    1818:	6c 83       	std	Y+4, r22	; 0x04
	//PORTE as Output
	
	PORTE = invert_binary_number(data);
    181a:	0e e2       	ldi	r16, 0x2E	; 46
    181c:	10 e0       	ldi	r17, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	ff de       	rcall	.-514    	; 0x1620 <invert_binary_number>
    1822:	f8 01       	movw	r30, r16
    1824:	80 83       	st	Z, r24
	
	//SETS THE RS PIN
	if (rs==1) {PORTB |= (1<<PB6);}
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	51 f4       	brne	.+20     	; 0x1840 <dsp_writedata+0x3a>
    182c:	85 e2       	ldi	r24, 0x25	; 37
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	25 e2       	ldi	r18, 0x25	; 37
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	f9 01       	movw	r30, r18
    1836:	20 81       	ld	r18, Z
    1838:	20 64       	ori	r18, 0x40	; 64
    183a:	fc 01       	movw	r30, r24
    183c:	20 83       	st	Z, r18
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <dsp_writedata+0x4c>
	else {PORTB &= ~(1<<PB6);}
    1840:	85 e2       	ldi	r24, 0x25	; 37
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	25 e2       	ldi	r18, 0x25	; 37
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	f9 01       	movw	r30, r18
    184a:	20 81       	ld	r18, Z
    184c:	2f 7b       	andi	r18, 0xBF	; 191
    184e:	fc 01       	movw	r30, r24
    1850:	20 83       	st	Z, r18

	//Sets enable high
	PORTB |= (1<<PB4);
    1852:	85 e2       	ldi	r24, 0x25	; 37
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	25 e2       	ldi	r18, 0x25	; 37
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	f9 01       	movw	r30, r18
    185c:	20 81       	ld	r18, Z
    185e:	20 61       	ori	r18, 0x10	; 16
    1860:	fc 01       	movw	r30, r24
    1862:	20 83       	st	Z, r18
	//Sets enable low
	for(int wait = 0; wait<100; wait++){}
    1864:	1a 82       	std	Y+2, r1	; 0x02
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	05 c0       	rjmp	.+10     	; 0x1874 <dsp_writedata+0x6e>
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	9a 83       	std	Y+2, r25	; 0x02
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	9a 81       	ldd	r25, Y+2	; 0x02
    1878:	84 36       	cpi	r24, 0x64	; 100
    187a:	91 05       	cpc	r25, r1
    187c:	b4 f3       	brlt	.-20     	; 0x186a <dsp_writedata+0x64>
	PORTB &= ~(1<<PB4);
    187e:	85 e2       	ldi	r24, 0x25	; 37
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	25 e2       	ldi	r18, 0x25	; 37
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	f9 01       	movw	r30, r18
    1888:	20 81       	ld	r18, Z
    188a:	2f 7e       	andi	r18, 0xEF	; 239
    188c:	fc 01       	movw	r30, r24
    188e:	20 83       	st	Z, r18
	//This is done so that the display will read the data pins and process them
}
    1890:	00 00       	nop
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	08 95       	ret

000018a4 <dsp_customchar>:
//Function to set customchars
//charpos = position in cgram
//line 1-8 lines of the char

void dsp_customchar(uint8_t charpos, uint8_t line1, uint8_t line2, uint8_t line3, uint8_t line4, uint8_t line5, uint8_t line6, uint8_t line7, uint8_t line8)
{	
    18a4:	8f 92       	push	r8
    18a6:	af 92       	push	r10
    18a8:	cf 92       	push	r12
    18aa:	ef 92       	push	r14
    18ac:	0f 93       	push	r16
    18ae:	cf 93       	push	r28
    18b0:	df 93       	push	r29
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	29 97       	sbiw	r28, 0x09	; 9
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	6a 83       	std	Y+2, r22	; 0x02
    18c6:	4b 83       	std	Y+3, r20	; 0x03
    18c8:	2c 83       	std	Y+4, r18	; 0x04
    18ca:	0d 83       	std	Y+5, r16	; 0x05
    18cc:	ee 82       	std	Y+6, r14	; 0x06
    18ce:	cf 82       	std	Y+7, r12	; 0x07
    18d0:	a8 86       	std	Y+8, r10	; 0x08
    18d2:	89 86       	std	Y+9, r8	; 0x09
	//where to write in cgram
	dsp_writedata(0x40+8*charpos,0);
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	08 96       	adiw	r24, 0x08	; 8
    18dc:	88 0f       	add	r24, r24
    18de:	88 0f       	add	r24, r24
    18e0:	88 0f       	add	r24, r24
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	90 df       	rcall	.-224    	; 0x1806 <dsp_writedata>

	//write each line
	dsp_writedata(line1,1);
    18e6:	61 e0       	ldi	r22, 0x01	; 1
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	8d df       	rcall	.-230    	; 0x1806 <dsp_writedata>
	dsp_writedata(line2,1);
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	8a df       	rcall	.-236    	; 0x1806 <dsp_writedata>
	dsp_writedata(line3,1);
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	8c 81       	ldd	r24, Y+4	; 0x04
    18f6:	87 df       	rcall	.-242    	; 0x1806 <dsp_writedata>
	dsp_writedata(line4,1);
    18f8:	61 e0       	ldi	r22, 0x01	; 1
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	84 df       	rcall	.-248    	; 0x1806 <dsp_writedata>
	dsp_writedata(line5,1);
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	81 df       	rcall	.-254    	; 0x1806 <dsp_writedata>
	dsp_writedata(line6,1);
    1904:	61 e0       	ldi	r22, 0x01	; 1
    1906:	8f 81       	ldd	r24, Y+7	; 0x07
    1908:	7e df       	rcall	.-260    	; 0x1806 <dsp_writedata>
	dsp_writedata(line7,1);
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	88 85       	ldd	r24, Y+8	; 0x08
    190e:	7b df       	rcall	.-266    	; 0x1806 <dsp_writedata>
	dsp_writedata(line8,1);
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	89 85       	ldd	r24, Y+9	; 0x09
    1914:	78 df       	rcall	.-272    	; 0x1806 <dsp_writedata>
    1916:	60 e0       	ldi	r22, 0x00	; 0

	//dsiplay return home
	dsp_writedata(0x02,0);
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	75 df       	rcall	.-278    	; 0x1806 <dsp_writedata>
    191c:	00 00       	nop
    191e:	29 96       	adiw	r28, 0x09	; 9
}
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	0f 91       	pop	r16
    1930:	ef 90       	pop	r14
    1932:	cf 90       	pop	r12
    1934:	af 90       	pop	r10
    1936:	8f 90       	pop	r8
    1938:	08 95       	ret

0000193a <dsp_write>:
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29


void dsp_write(uint8_t dsp_mode)
{	
    193e:	1f 92       	push	r1
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
	if (counter<20)
    1946:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    194a:	84 31       	cpi	r24, 0x14	; 20
    194c:	28 f5       	brcc	.+74     	; 0x1998 <dsp_write+0x5e>
	dsp_writedata(dsp_data[dsp_mode][dsp_linecounter][counter++],1);
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	68 2f       	mov	r22, r24
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    1960:	91 e0       	ldi	r25, 0x01	; 1
    1962:	98 0f       	add	r25, r24
    1964:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <counter>
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	e4 e1       	ldi	r30, 0x14	; 20
    196e:	e2 9f       	mul	r30, r18
    1970:	a0 01       	movw	r20, r0
    1972:	e3 9f       	mul	r30, r19
    1974:	50 0d       	add	r21, r0
    1976:	11 24       	eor	r1, r1
    1978:	e0 e5       	ldi	r30, 0x50	; 80
    197a:	e6 9f       	mul	r30, r22
    197c:	90 01       	movw	r18, r0
    197e:	e7 9f       	mul	r30, r23
    1980:	30 0d       	add	r19, r0
    1982:	11 24       	eor	r1, r1
    1984:	24 0f       	add	r18, r20
    1986:	35 1f       	adc	r19, r21
    1988:	82 0f       	add	r24, r18
    198a:	93 1f       	adc	r25, r19
    198c:	82 5f       	subi	r24, 0xF2	; 242
    198e:	9c 4f       	sbci	r25, 0xFC	; 252
    1990:	fc 01       	movw	r30, r24
    1992:	80 81       	ld	r24, Z
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	37 df       	rcall	.-402    	; 0x1806 <dsp_writedata>
	if (counter == 20)
    1998:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    199c:	84 31       	cpi	r24, 0x14	; 20
    199e:	89 f4       	brne	.+34     	; 0x19c2 <dsp_write+0x88>
	{
		//go into next line
		dsp_writedata(dsp_line[dsp_linecounter],0);
    19a0:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	89 5f       	subi	r24, 0xF9	; 249
    19aa:	9e 4f       	sbci	r25, 0xFE	; 254
    19ac:	fc 01       	movw	r30, r24
    19ae:	80 81       	ld	r24, Z
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	29 df       	rcall	.-430    	; 0x1806 <dsp_writedata>
		counter=0;
    19b4:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <counter>
		dsp_linecounter+=1;
    19b8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <dsp_linecounter>
	}
	if (dsp_linecounter == 4)
    19c2:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19c6:	84 30       	cpi	r24, 0x04	; 4
    19c8:	11 f4       	brne	.+4      	; 0x19ce <dsp_write+0x94>
	{
		dsp_linecounter = 0;
    19ca:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <dsp_linecounter>
	}
}
    19ce:	00 00       	nop
    19d0:	0f 90       	pop	r0
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <dsp_definechars>:


void dsp_definechars()
{
    19d8:	8f 92       	push	r8
    19da:	af 92       	push	r10
    19dc:	cf 92       	push	r12
    19de:	ef 92       	push	r14
    19e0:	0f 93       	push	r16
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
	//definition of needed custom chars
	dsp_customchar(0,0,0,0,0,0,0x1F,0x1F,0x1F);
    19ea:	0f 2e       	mov	r0, r31
    19ec:	ff e1       	ldi	r31, 0x1F	; 31
    19ee:	8f 2e       	mov	r8, r31
    19f0:	f0 2d       	mov	r31, r0
    19f2:	0f 2e       	mov	r0, r31
    19f4:	ff e1       	ldi	r31, 0x1F	; 31
    19f6:	af 2e       	mov	r10, r31
    19f8:	f0 2d       	mov	r31, r0
    19fa:	0f 2e       	mov	r0, r31
    19fc:	ff e1       	ldi	r31, 0x1F	; 31
    19fe:	cf 2e       	mov	r12, r31
    1a00:	f0 2d       	mov	r31, r0
    1a02:	e1 2c       	mov	r14, r1
    1a04:	00 e0       	ldi	r16, 0x00	; 0
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	4a df       	rcall	.-364    	; 0x18a4 <dsp_customchar>
	dsp_customchar(1,0x1F,0x1F,0,0,0,0,0,0);
    1a10:	81 2c       	mov	r8, r1
    1a12:	a1 2c       	mov	r10, r1
    1a14:	c1 2c       	mov	r12, r1
    1a16:	e1 2c       	mov	r14, r1
    1a18:	00 e0       	ldi	r16, 0x00	; 0
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	4f e1       	ldi	r20, 0x1F	; 31
    1a1e:	6f e1       	ldi	r22, 0x1F	; 31
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	40 df       	rcall	.-384    	; 0x18a4 <dsp_customchar>
	dsp_customchar(2,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF);
    1a24:	0f 2e       	mov	r0, r31
    1a26:	ff ee       	ldi	r31, 0xEF	; 239
    1a28:	8f 2e       	mov	r8, r31
    1a2a:	f0 2d       	mov	r31, r0
    1a2c:	0f 2e       	mov	r0, r31
    1a2e:	ff ee       	ldi	r31, 0xEF	; 239
    1a30:	af 2e       	mov	r10, r31
    1a32:	f0 2d       	mov	r31, r0
    1a34:	0f 2e       	mov	r0, r31
    1a36:	ff ee       	ldi	r31, 0xEF	; 239
    1a38:	cf 2e       	mov	r12, r31
    1a3a:	f0 2d       	mov	r31, r0
    1a3c:	0f 2e       	mov	r0, r31
    1a3e:	ff ee       	ldi	r31, 0xEF	; 239
    1a40:	ef 2e       	mov	r14, r31
    1a42:	f0 2d       	mov	r31, r0
    1a44:	0f ee       	ldi	r16, 0xEF	; 239
    1a46:	2f ee       	ldi	r18, 0xEF	; 239
    1a48:	4f ee       	ldi	r20, 0xEF	; 239
    1a4a:	6f ee       	ldi	r22, 0xEF	; 239
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	2a df       	rcall	.-428    	; 0x18a4 <dsp_customchar>
	dsp_customchar(3,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E);
    1a50:	0f 2e       	mov	r0, r31
    1a52:	fe e1       	ldi	r31, 0x1E	; 30
    1a54:	8f 2e       	mov	r8, r31
    1a56:	f0 2d       	mov	r31, r0
    1a58:	0f 2e       	mov	r0, r31
    1a5a:	fe e1       	ldi	r31, 0x1E	; 30
    1a5c:	af 2e       	mov	r10, r31
    1a5e:	f0 2d       	mov	r31, r0
    1a60:	0f 2e       	mov	r0, r31
    1a62:	fe e1       	ldi	r31, 0x1E	; 30
    1a64:	cf 2e       	mov	r12, r31
    1a66:	f0 2d       	mov	r31, r0
    1a68:	0f 2e       	mov	r0, r31
    1a6a:	fe e1       	ldi	r31, 0x1E	; 30
    1a6c:	ef 2e       	mov	r14, r31
    1a6e:	f0 2d       	mov	r31, r0
    1a70:	0e e1       	ldi	r16, 0x1E	; 30
    1a72:	2e e1       	ldi	r18, 0x1E	; 30
    1a74:	4e e1       	ldi	r20, 0x1E	; 30
    1a76:	6e e1       	ldi	r22, 0x1E	; 30
    1a78:	83 e0       	ldi	r24, 0x03	; 3
    1a7a:	14 df       	rcall	.-472    	; 0x18a4 <dsp_customchar>
	dsp_customchar(4,0xFF,0xFF,0xFF,0xFF,0,0,0,0);
    1a7c:	81 2c       	mov	r8, r1
    1a7e:	a1 2c       	mov	r10, r1
    1a80:	c1 2c       	mov	r12, r1
    1a82:	e1 2c       	mov	r14, r1
    1a84:	0f ef       	ldi	r16, 0xFF	; 255
    1a86:	2f ef       	ldi	r18, 0xFF	; 255
    1a88:	4f ef       	ldi	r20, 0xFF	; 255
    1a8a:	6f ef       	ldi	r22, 0xFF	; 255
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	0a df       	rcall	.-492    	; 0x18a4 <dsp_customchar>
	dsp_customchar(5,0xFF,0xFF,0xFF,0xFF,0xEF,0xEF,0xEF,0xEF);
    1a90:	0f 2e       	mov	r0, r31
    1a92:	ff ee       	ldi	r31, 0xEF	; 239
    1a94:	8f 2e       	mov	r8, r31
    1a96:	f0 2d       	mov	r31, r0
    1a98:	0f 2e       	mov	r0, r31
    1a9a:	ff ee       	ldi	r31, 0xEF	; 239
    1a9c:	af 2e       	mov	r10, r31
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	0f 2e       	mov	r0, r31
    1aa2:	ff ee       	ldi	r31, 0xEF	; 239
    1aa4:	cf 2e       	mov	r12, r31
    1aa6:	f0 2d       	mov	r31, r0
    1aa8:	0f 2e       	mov	r0, r31
    1aaa:	ff ee       	ldi	r31, 0xEF	; 239
    1aac:	ef 2e       	mov	r14, r31
    1aae:	f0 2d       	mov	r31, r0
    1ab0:	0f ef       	ldi	r16, 0xFF	; 255
    1ab2:	2f ef       	ldi	r18, 0xFF	; 255
    1ab4:	4f ef       	ldi	r20, 0xFF	; 255
    1ab6:	6f ef       	ldi	r22, 0xFF	; 255
    1ab8:	85 e0       	ldi	r24, 0x05	; 5
    1aba:	f4 de       	rcall	.-536    	; 0x18a4 <dsp_customchar>
	dsp_customchar(6,0x08,0x15,0x0A,0x04,0x0A,0x15,0x02,0x00);
    1abc:	81 2c       	mov	r8, r1
    1abe:	68 94       	set
    1ac0:	aa 24       	eor	r10, r10
    1ac2:	a1 f8       	bld	r10, 1
    1ac4:	0f 2e       	mov	r0, r31
    1ac6:	f5 e1       	ldi	r31, 0x15	; 21
    1ac8:	cf 2e       	mov	r12, r31
    1aca:	f0 2d       	mov	r31, r0
    1acc:	0f 2e       	mov	r0, r31
    1ace:	fa e0       	ldi	r31, 0x0A	; 10
    1ad0:	ef 2e       	mov	r14, r31
    1ad2:	f0 2d       	mov	r31, r0
    1ad4:	04 e0       	ldi	r16, 0x04	; 4
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	45 e1       	ldi	r20, 0x15	; 21
    1ada:	68 e0       	ldi	r22, 0x08	; 8
    1adc:	86 e0       	ldi	r24, 0x06	; 6
    1ade:	e2 de       	rcall	.-572    	; 0x18a4 <dsp_customchar>
};
    1ae0:	00 00       	nop
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	0f 91       	pop	r16
    1ae8:	ef 90       	pop	r14
    1aea:	cf 90       	pop	r12
    1aec:	af 90       	pop	r10
    1aee:	8f 90       	pop	r8
    1af0:	08 95       	ret

00001af2 <dsp_init>:

//runs through the init commands

void dsp_init()
{
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <dsp_init+0x6>
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1afc:	1a 82       	std	Y+2, r1	; 0x02
    1afe:	19 82       	std	Y+1, r1	; 0x01
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <dsp_init+0x2a>
	{
		dsp_writedata(dsp_command[i],0);
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	80 50       	subi	r24, 0x00	; 0
    1b08:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	80 81       	ld	r24, Z
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	7a de       	rcall	.-780    	; 0x1806 <dsp_writedata>
//runs through the init commands

void dsp_init()
{
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	9a 83       	std	Y+2, r25	; 0x02
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	07 97       	sbiw	r24, 0x07	; 7
    1b22:	7c f3       	brlt	.-34     	; 0x1b02 <dsp_init+0x10>
	{
		dsp_writedata(dsp_command[i],0);
	}
}
    1b24:	00 00       	nop
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <selftest>:
// 			}
// 		}
// 	}
// }

void selftest(){
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	
	if (systime_selftest+selftest_time*2 >= sys_time)
    1b38:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1b3c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1b40:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1b44:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1b48:	88 54       	subi	r24, 0x48	; 72
    1b4a:	94 4f       	sbci	r25, 0xF4	; 244
    1b4c:	af 4f       	sbci	r26, 0xFF	; 255
    1b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b50:	9c 01       	movw	r18, r24
    1b52:	ad 01       	movw	r20, r26
    1b54:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1b58:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1b5c:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1b60:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1b64:	28 17       	cp	r18, r24
    1b66:	39 07       	cpc	r19, r25
    1b68:	4a 07       	cpc	r20, r26
    1b6a:	5b 07       	cpc	r21, r27
    1b6c:	d8 f0       	brcs	.+54     	; 0x1ba4 <selftest+0x74>
	{
		string_to_digit(0,"      DIC V0.1      ",0,0);
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	6c e0       	ldi	r22, 0x0C	; 12
    1b74:	71 e0       	ldi	r23, 0x01	; 1
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	93 d8       	rcall	.-3802   	; 0xca0 <string_to_digit>
		string_to_digit(0,"  Software written  ",0,1);
    1b7a:	21 e0       	ldi	r18, 0x01	; 1
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	61 e2       	ldi	r22, 0x21	; 33
    1b80:	71 e0       	ldi	r23, 0x01	; 1
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	8d d8       	rcall	.-3814   	; 0xca0 <string_to_digit>
		string_to_digit(0,"         by         ",0,2);
    1b86:	22 e0       	ldi	r18, 0x02	; 2
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	66 e3       	ldi	r22, 0x36	; 54
    1b8c:	71 e0       	ldi	r23, 0x01	; 1
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	87 d8       	rcall	.-3826   	; 0xca0 <string_to_digit>
		string_to_digit(0,"Baltic Racing Alumni",0,3);
    1b92:	23 e0       	ldi	r18, 0x03	; 3
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	6b e4       	ldi	r22, 0x4B	; 75
    1b98:	71 e0       	ldi	r23, 0x01	; 1
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);	
    1b9c:	81 d8       	rcall	.-3838   	; 0xca0 <string_to_digit>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	cc de       	rcall	.-616    	; 0x193a <dsp_write>
    1ba2:	35 c0       	rjmp	.+106    	; 0x1c0e <selftest+0xde>
	}
	else if (systime_selftest+selftest_time*4 >= sys_time)
    1ba4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1ba8:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1bac:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1bb0:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1bb4:	80 59       	subi	r24, 0x90	; 144
    1bb6:	98 4e       	sbci	r25, 0xE8	; 232
    1bb8:	af 4f       	sbci	r26, 0xFF	; 255
    1bba:	bf 4f       	sbci	r27, 0xFF	; 255
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	ad 01       	movw	r20, r26
    1bc0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1bc4:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1bc8:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1bcc:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1bd0:	28 17       	cp	r18, r24
    1bd2:	39 07       	cpc	r19, r25
    1bd4:	4a 07       	cpc	r20, r26
    1bd6:	5b 07       	cpc	r21, r27
    1bd8:	d0 f0       	brcs	.+52     	; 0x1c0e <selftest+0xde>
	{
		string_to_digit(0,"   And fixed by     ",0,0);
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	60 e6       	ldi	r22, 0x60	; 96
    1be0:	71 e0       	ldi	r23, 0x01	; 1
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	5d d8       	rcall	.-3910   	; 0xca0 <string_to_digit>
		string_to_digit(0,"      Deine Mudda   ",0,1);
    1be6:	21 e0       	ldi	r18, 0x01	; 1
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	65 e7       	ldi	r22, 0x75	; 117
    1bec:	71 e0       	ldi	r23, 0x01	; 1
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	57 d8       	rcall	.-3922   	; 0xca0 <string_to_digit>
		string_to_digit(0,"--------------------",0,2);
    1bf2:	22 e0       	ldi	r18, 0x02	; 2
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	6a e8       	ldi	r22, 0x8A	; 138
    1bf8:	71 e0       	ldi	r23, 0x01	; 1
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	51 d8       	rcall	.-3934   	; 0xca0 <string_to_digit>
		string_to_digit(0,"  #MOSFET-Barbecue  ",0,3);
    1bfe:	23 e0       	ldi	r18, 0x03	; 3
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	6f e9       	ldi	r22, 0x9F	; 159
    1c04:	71 e0       	ldi	r23, 0x01	; 1
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	4b d8       	rcall	.-3946   	; 0xca0 <string_to_digit>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);
    1c0c:	96 de       	rcall	.-724    	; 0x193a <dsp_write>
    1c0e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	}
		
	if (systime_selftest + LEDS_on * (selftest_time/LED_Count+1)*4 < sys_time )
    1c12:	48 2f       	mov	r20, r24
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	24 e9       	ldi	r18, 0x94	; 148
    1c18:	31 e0       	ldi	r19, 0x01	; 1
    1c1a:	42 9f       	mul	r20, r18
    1c1c:	c0 01       	movw	r24, r0
    1c1e:	43 9f       	mul	r20, r19
    1c20:	90 0d       	add	r25, r0
    1c22:	52 9f       	mul	r21, r18
    1c24:	90 0d       	add	r25, r0
    1c26:	11 24       	eor	r1, r1
    1c28:	9c 01       	movw	r18, r24
    1c2a:	99 0f       	add	r25, r25
    1c2c:	44 0b       	sbc	r20, r20
    1c2e:	55 0b       	sbc	r21, r21
    1c30:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1c34:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1c38:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1c3c:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	a4 1f       	adc	r26, r20
    1c46:	b5 1f       	adc	r27, r21
    1c48:	9c 01       	movw	r18, r24
    1c4a:	ad 01       	movw	r20, r26
    1c4c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1c50:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1c54:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1c58:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1c5c:	28 17       	cp	r18, r24
    1c5e:	39 07       	cpc	r19, r25
    1c60:	4a 07       	cpc	r20, r26
    1c62:	5b 07       	cpc	r21, r27
    1c64:	98 f4       	brcc	.+38     	; 0x1c8c <selftest+0x15c>
    1c66:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	{
		if (LEDS_on <= LED_COUNT_TOP_LEFT)
    1c6a:	86 30       	cpi	r24, 0x06	; 6
    1c6c:	20 f4       	brcc	.+8      	; 0x1c76 <selftest+0x146>
		{
			led_left_top_bar_select(LEDS_on);
    1c6e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1c72:	3b dd       	rcall	.-1418   	; 0x16ea <led_left_top_bar_select>
    1c74:	06 c0       	rjmp	.+12     	; 0x1c82 <selftest+0x152>
    1c76:	85 e0       	ldi	r24, 0x05	; 5
		}
		else
		{
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    1c78:	38 dd       	rcall	.-1424   	; 0x16ea <led_left_top_bar_select>
    1c7a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
			led_right_top_bar_select(LEDS_on-LED_COUNT_TOP_LEFT);
    1c7e:	85 50       	subi	r24, 0x05	; 5
    1c80:	70 dd       	rcall	.-1312   	; 0x1762 <led_right_top_bar_select>
    1c82:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1c86:	8f 5f       	subi	r24, 0xFF	; 255
		}
		LEDS_on++;
    1c88:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <LEDS_on>
    1c8c:	00 00       	nop
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
 	}
    1c92:	08 95       	ret

00001c94 <error_handling>:
    1c94:	cf 93       	push	r28
    1c96:	df 93       	push	r29
    1c98:	1f 92       	push	r1
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    1ca0:	23 e0       	ldi	r18, 0x03	; 3
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	64 eb       	ldi	r22, 0xB4	; 180
    1caa:	71 e0       	ldi	r23, 0x01	; 1
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 50 06 	call	0xca0	; 0xca0 <string_to_digit>
    1cb4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1cb8:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1cbc:	83 37       	cpi	r24, 0x73	; 115
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	78 f0       	brcs	.+30     	; 0x1ce0 <error_handling+0x4c>
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	23 e0       	ldi	r18, 0x03	; 3
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	ac 01       	movw	r20, r24
    1cce:	6f eb       	ldi	r22, 0xBF	; 191
    1cd0:	71 e0       	ldi	r23, 0x01	; 1
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 50 06 	call	0xca0	; 0xca0 <string_to_digit>
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	8c 5f       	subi	r24, 0xFC	; 252
    1cde:	89 83       	std	Y+1, r24	; 0x01
    1ce0:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1ce4:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1ce8:	31 e0       	ldi	r19, 0x01	; 1
    1cea:	cc 97       	sbiw	r24, 0x3c	; 60
    1cec:	08 f4       	brcc	.+2      	; 0x1cf0 <error_handling+0x5c>
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	88 2f       	mov	r24, r24
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	04 96       	adiw	r24, 0x04	; 4
    1cf8:	21 e0       	ldi	r18, 0x01	; 1
    1cfa:	0b 97       	sbiw	r24, 0x0b	; 11
    1cfc:	08 f0       	brcs	.+2      	; 0x1d00 <error_handling+0x6c>
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	83 2f       	mov	r24, r19
    1d02:	82 23       	and	r24, r18
    1d04:	88 23       	and	r24, r24
    1d06:	79 f0       	breq	.+30     	; 0x1d26 <error_handling+0x92>
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	23 e0       	ldi	r18, 0x03	; 3
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	ac 01       	movw	r20, r24
    1d14:	6f eb       	ldi	r22, 0xBF	; 191
    1d16:	71 e0       	ldi	r23, 0x01	; 1
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 50 06 	call	0xca0	; 0xca0 <string_to_digit>
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	8c 5f       	subi	r24, 0xFC	; 252
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	88 23       	and	r24, r24
    1d2a:	51 f4       	brne	.+20     	; 0x1d40 <error_handling+0xac>
    1d2c:	23 e0       	ldi	r18, 0x03	; 3
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	50 e0       	ldi	r21, 0x00	; 0
    1d34:	64 ec       	ldi	r22, 0xC4	; 196
    1d36:	71 e0       	ldi	r23, 0x01	; 1
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 50 06 	call	0xca0	; 0xca0 <string_to_digit>
    1d40:	00 00       	nop
    1d42:	0f 90       	pop	r0
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <main>:
void LED_Blink_CTRL();


// MAIN FUNCTION
int main(void)
{
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	//Init and config part
	
	port_config();
    1d5a:	c9 d3       	rcall	.+1938   	; 0x24ee <port_config>
	sys_timer_config();
    1d5c:	3e d4       	rcall	.+2172   	; 0x25da <sys_timer_config>
    1d5e:	0e 94 5f 02 	call	0x4be	; 0x4be <can_init_messages>
	can_init_messages();
	dsp_init();
    1d62:	c7 de       	rcall	.-626    	; 0x1af2 <dsp_init>
    1d64:	39 de       	rcall	.-910    	; 0x19d8 <dsp_definechars>
	dsp_definechars();
    1d66:	0e 94 a7 00 	call	0x14e	; 0x14e <can_cfg>
	can_cfg();
    1d6a:	f3 da       	rcall	.-2586   	; 0x1352 <dsp_clear>
	
	dsp_clear();
    1d6c:	78 94       	sei
    1d6e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
	sei();
	systime_selftest = sys_time;
    1d72:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1d76:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1d7a:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1d7e:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <systime_selftest+0x1>
    1d82:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <systime_selftest>
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <main+0x40>
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1d88:	d3 de       	rcall	.-602    	; 0x1b30 <selftest>
	{
		selftest();
    1d8a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
	
	dsp_clear();
	sei();
	systime_selftest = sys_time;
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1d8e:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1d92:	80 59       	subi	r24, 0x90	; 144
    1d94:	98 4e       	sbci	r25, 0xE8	; 232
    1d96:	9c 01       	movw	r18, r24
    1d98:	99 0f       	add	r25, r25
    1d9a:	44 0b       	sbc	r20, r20
    1d9c:	55 0b       	sbc	r21, r21
    1d9e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1da2:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1da6:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1daa:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1dae:	28 17       	cp	r18, r24
    1db0:	39 07       	cpc	r19, r25
    1db2:	4a 07       	cpc	r20, r26
    1db4:	5b 07       	cpc	r21, r27
    1db6:	40 f7       	brcc	.-48     	; 0x1d88 <main+0x3e>
	{
		selftest();
	}
	LED_Blink(10,3000);
    1db8:	68 eb       	ldi	r22, 0xB8	; 184
    1dba:	7b e0       	ldi	r23, 0x0B	; 11
    1dbc:	8a e0       	ldi	r24, 0x0A	; 10
    1dbe:	52 d2       	rcall	.+1188   	; 0x2264 <LED_Blink>
    1dc0:	c8 da       	rcall	.-2672   	; 0x1352 <dsp_clear>
	
	dsp_clear();
    1dc2:	33 db       	rcall	.-2458   	; 0x142a <dsp_arrayinit_static>
    1dc4:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
	
	dsp_arrayinit_static();
    1dc8:	81 32       	cpi	r24, 0x21	; 33

	
	//Loop
	while(1){

		if(update_data>=33){ //refresh rate for display about 30Hz
    1dca:	08 f4       	brcc	.+2      	; 0x1dce <main+0x84>
    1dcc:	d8 c1       	rjmp	.+944    	; 0x217e <main+0x434>
    1dce:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <update_data>
    1dd2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			update_data = 0;
    1dd6:	88 23       	and	r24, r24
			
			if (dsp_mde == 0){ //DiSPlay Mode 0 = Home
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <main+0x92>
    1dda:	3f c1       	rjmp	.+638    	; 0x205a <main+0x310>
    1ddc:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <TSVoltage>
    1de0:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <TSVoltage+0x1>
				num_to_digit(0,TSVoltage,0,3,5,0);
    1de4:	e1 2c       	mov	r14, r1
    1de6:	05 e0       	ldi	r16, 0x05	; 5
    1de8:	23 e0       	ldi	r18, 0x03	; 3
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	bc 01       	movw	r22, r24
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    1df4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    1df8:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(0,GPS_Speed,0,3,14,0);
    1dfc:	e1 2c       	mov	r14, r1
    1dfe:	0e e0       	ldi	r16, 0x0E	; 14
    1e00:	23 e0       	ldi	r18, 0x03	; 3
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	bc 01       	movw	r22, r24
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    1e0c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1e10:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
				num_to_digit(0,CLT,0,2,6,1);//writes the number 121 for clt TEST ONLY!!!
    1e14:	ee 24       	eor	r14, r14
    1e16:	e3 94       	inc	r14
    1e18:	06 e0       	ldi	r16, 0x06	; 6
    1e1a:	22 e0       	ldi	r18, 0x02	; 2
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	bc 01       	movw	r22, r24
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    1e26:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <AccumulatorTemperature>
    1e2a:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <AccumulatorTemperature+0x1>
				num_to_digit(0,AccumulatorTemperature,0,2,15,1);
    1e2e:	ee 24       	eor	r14, r14
    1e30:	e3 94       	inc	r14
    1e32:	0f e0       	ldi	r16, 0x0F	; 15
    1e34:	22 e0       	ldi	r18, 0x02	; 2
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	bc 01       	movw	r22, r24
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    1e40:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <SOC>
    1e44:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <SOC+0x1>
				num_to_digit(0,SOC,0,3,14,2);
    1e48:	68 94       	set
    1e4a:	ee 24       	eor	r14, r14
    1e4c:	e1 f8       	bld	r14, 1
    1e4e:	0e e0       	ldi	r16, 0x0E	; 14
    1e50:	23 e0       	ldi	r18, 0x03	; 3
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	bc 01       	movw	r22, r24
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    1e5c:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <LVSVoltage>
    1e60:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <LVSVoltage+0x1>
				num_to_digit(0,LVSVoltage,0,2,15,3);
    1e64:	0f 2e       	mov	r0, r31
    1e66:	f3 e0       	ldi	r31, 0x03	; 3
    1e68:	ef 2e       	mov	r14, r31
    1e6a:	f0 2d       	mov	r31, r0
    1e6c:	0f e0       	ldi	r16, 0x0F	; 15
    1e6e:	22 e0       	ldi	r18, 0x02	; 2
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	bc 01       	movw	r22, r24
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    1e7a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <Rotary_Encoder_Left>
    1e7e:	88 23       	and	r24, r24

//-------------------------- Sitching between brake bias or LC Active------------------------------
					if (Rotary_Encoder_Left == 0){
    1e80:	71 f4       	brne	.+28     	; 0x1e9e <main+0x154>
    1e82:	22 e0       	ldi	r18, 0x02	; 2
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	67 ec       	ldi	r22, 0xC7	; 199
						string_to_digit(0,"LC ACTIVE",0,2);
    1e88:	71 e0       	ldi	r23, 0x01	; 1
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	0e 94 50 06 	call	0xca0	; 0xca0 <string_to_digit>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
						LC_change = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <LC_Active>
						LC_Active =TRUE;
    1e9c:	2b c0       	rjmp	.+86     	; 0x1ef4 <main+0x1aa>
    1e9e:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <LC_Active>
    1ea2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
					}
					else{
						LC_Active = FALSE;
    1ea6:	88 23       	and	r24, r24
						//on first iteration clear the window
						if ( LC_change > 0){
    1ea8:	91 f0       	breq	.+36     	; 0x1ece <main+0x184>
    1eaa:	80 e1       	ldi	r24, 0x10	; 16
    1eac:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <dsp_data+0x2a>
							dsp_data[0][2][2] = 0x10;
    1eb0:	80 e1       	ldi	r24, 0x10	; 16
    1eb2:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <dsp_data+0x2b>
							dsp_data[0][2][3] = 0x10;
    1eb6:	80 e1       	ldi	r24, 0x10	; 16
    1eb8:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <dsp_data+0x2c>
							dsp_data[0][2][4] = 0x10;
    1ebc:	80 e1       	ldi	r24, 0x10	; 16
    1ebe:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <dsp_data+0x2d>
							dsp_data[0][2][5] = 0x10;
    1ec2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
							LC_change--;
    1ec6:	81 50       	subi	r24, 0x01	; 1
    1ec8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
    1ecc:	ae da       	rcall	.-2724   	; 0x142a <dsp_arrayinit_static>
    1ece:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <BPR>
							dsp_arrayinit_static();
    1ed2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
						}
						num_to_digit(0,calc_BB(BPF,BPR),0,2,6,2);//writes the number 55 for BB  TEST ONLY!!!
    1ed6:	69 2f       	mov	r22, r25
    1ed8:	0e 94 d1 05 	call	0xba2	; 0xba2 <calc_BB>
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	68 94       	set
    1ee2:	ee 24       	eor	r14, r14
    1ee4:	e1 f8       	bld	r14, 1
    1ee6:	06 e0       	ldi	r16, 0x06	; 6
    1ee8:	22 e0       	ldi	r18, 0x02	; 2
    1eea:	40 e0       	ldi	r20, 0x00	; 0
    1eec:	bc 01       	movw	r22, r24
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    1ef4:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <Laptime>
    1ef8:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <Laptime+0x1>
					}
//--------------------------------Switching between error indicator and diff time ---------------------------------------
				difftime = Laptime-Besttime;//calculate the differenz from your best time from your last
    1efc:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <Laptime+0x2>
    1f00:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <Laptime+0x3>
    1f04:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    1f08:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
    1f0c:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    1f10:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    1f14:	79 01       	movw	r14, r18
    1f16:	8a 01       	movw	r16, r20
    1f18:	e8 1a       	sub	r14, r24
    1f1a:	f9 0a       	sbc	r15, r25
    1f1c:	0a 0b       	sbc	r16, r26
    1f1e:	1b 0b       	sbc	r17, r27
    1f20:	d8 01       	movw	r26, r16
    1f22:	c7 01       	movw	r24, r14
    1f24:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <difftime>
    1f28:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <difftime+0x1>
    1f2c:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <difftime+0x2>
    1f30:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <difftime+0x3>
    1f34:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <difftime_old>
    1f38:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <difftime_old+0x1>
				
				if (difftime_old != difftime){//If your diff time has been updated (new Lap) we want to show your diff on the homescreen
    1f3c:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <difftime_old+0x2>
    1f40:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <difftime_old+0x3>
    1f44:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1f48:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
    1f4c:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1f50:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1f54:	28 17       	cp	r18, r24
    1f56:	39 07       	cpc	r19, r25
    1f58:	4a 07       	cpc	r20, r26
    1f5a:	5b 07       	cpc	r21, r27
    1f5c:	a1 f1       	breq	.+104    	; 0x1fc6 <main+0x27c>
    1f5e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1f62:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
					systime_time_indicator = sys_time;
    1f66:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1f6a:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1f6e:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1f72:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1f76:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1f7a:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1f7e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <systime_time_indicator>
    1f82:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <systime_time_indicator+0x1>
					systime_time_indicator += time_indicator_intervall;
    1f86:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1f8a:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1f8e:	88 57       	subi	r24, 0x78	; 120
    1f90:	9c 4e       	sbci	r25, 0xEC	; 236
    1f92:	af 4f       	sbci	r26, 0xFF	; 255
    1f94:	bf 4f       	sbci	r27, 0xFF	; 255
    1f96:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1f9a:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1f9e:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1fa2:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1fa6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1faa:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					difftime_old = difftime;
    1fae:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1fb2:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1fb6:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <difftime_old>
    1fba:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <difftime_old+0x1>
    1fbe:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <difftime_old+0x2>
    1fc2:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <difftime_old+0x3>
    1fc6:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <systime_time_indicator>
    1fca:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <systime_time_indicator+0x1>
				}
				if (systime_time_indicator > sys_time){
    1fce:	40 91 41 02 	lds	r20, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1fd2:	50 91 42 02 	lds	r21, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1fd6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1fda:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1fde:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1fe2:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1fe6:	82 17       	cp	r24, r18
    1fe8:	93 07       	cpc	r25, r19
    1fea:	a4 07       	cpc	r26, r20
    1fec:	b5 07       	cpc	r27, r21
    1fee:	68 f5       	brcc	.+90     	; 0x204a <main+0x300>
    1ff0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1ff4:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					time_to_digit(0,abs(difftime),1,3);
    1ff8:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1ffc:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    2000:	99 23       	and	r25, r25
    2002:	1c f4       	brge	.+6      	; 0x200a <main+0x2c0>
    2004:	91 95       	neg	r25
    2006:	81 95       	neg	r24
    2008:	91 09       	sbc	r25, r1
    200a:	09 2e       	mov	r0, r25
    200c:	00 0c       	add	r0, r0
    200e:	aa 0b       	sbc	r26, r26
    2010:	bb 0b       	sbc	r27, r27
    2012:	03 e0       	ldi	r16, 0x03	; 3
    2014:	21 e0       	ldi	r18, 0x01	; 1
    2016:	ac 01       	movw	r20, r24
    2018:	bd 01       	movw	r22, r26
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	0e 94 07 08 	call	0x100e	; 0x100e <time_to_digit>
    2020:	8a e3       	ldi	r24, 0x3A	; 58
    2022:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <dsp_data+0x41>
					dsp_data[0][3][5] = ':';
    2026:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    202a:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					if (difftime >= 0){
    202e:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    2032:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    2036:	bb 23       	and	r27, r27
    2038:	24 f0       	brlt	.+8      	; 0x2042 <main+0x2f8>
    203a:	8b e2       	ldi	r24, 0x2B	; 43
    203c:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
						dsp_data[0][3][0] = '+';
    2040:	0c c0       	rjmp	.+24     	; 0x205a <main+0x310>
    2042:	8d e2       	ldi	r24, 0x2D	; 45
    2044:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
					}
					else{
					dsp_data[0][3][0] = '-';
    2048:	08 c0       	rjmp	.+16     	; 0x205a <main+0x310>
    204a:	24 de       	rcall	.-952    	; 0x1c94 <error_handling>
    204c:	23 e0       	ldi	r18, 0x03	; 3
					}
				}
				else{//If the diff time has not been updated within the the last intervall we want to show the error stuff
					error_handling();
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	68 e2       	ldi	r22, 0x28	; 40
					string_to_digit(0,error_indicator,0,3);					
    2052:	72 e0       	ldi	r23, 0x02	; 2
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	0e 94 50 06 	call	0xca0	; 0xca0 <string_to_digit>
    205a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    205e:	81 30       	cpi	r24, 0x01	; 1
			}
			
			
			
			
			if (dsp_mde == 1){ //debug screen
    2060:	c1 f5       	brne	.+112    	; 0x20d2 <main+0x388>
    2062:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <APPS1>
    2066:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS1,0,3,5,1);
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	ee 24       	eor	r14, r14
    206c:	e3 94       	inc	r14
    206e:	05 e0       	ldi	r16, 0x05	; 5
    2070:	23 e0       	ldi	r18, 0x03	; 3
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	bc 01       	movw	r22, r24
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    207c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <APPS2>
    2080:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS2,0,3,12,1);
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	ee 24       	eor	r14, r14
    2086:	e3 94       	inc	r14
    2088:	0c e0       	ldi	r16, 0x0C	; 12
    208a:	23 e0       	ldi	r18, 0x03	; 3
    208c:	40 e0       	ldi	r20, 0x00	; 0
    208e:	bc 01       	movw	r22, r24
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    2096:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
    209a:	88 2f       	mov	r24, r24

				num_to_digit(1,BPF,0,2,4,3);
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0f 2e       	mov	r0, r31
    20a0:	f3 e0       	ldi	r31, 0x03	; 3
    20a2:	ef 2e       	mov	r14, r31
    20a4:	f0 2d       	mov	r31, r0
    20a6:	04 e0       	ldi	r16, 0x04	; 4
    20a8:	22 e0       	ldi	r18, 0x02	; 2
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	bc 01       	movw	r22, r24
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    20b4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <BPR>
    20b8:	88 2f       	mov	r24, r24
				num_to_digit(1,BPR,0,2,10,3);				
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0f 2e       	mov	r0, r31
    20be:	f3 e0       	ldi	r31, 0x03	; 3
    20c0:	ef 2e       	mov	r14, r31
    20c2:	f0 2d       	mov	r31, r0
    20c4:	0a e0       	ldi	r16, 0x0A	; 10
    20c6:	22 e0       	ldi	r18, 0x02	; 2
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	bc 01       	movw	r22, r24
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    20d2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    20d6:	82 30       	cpi	r24, 0x02	; 2
			
			
			
			
			
			if (dsp_mde == 2){ //Times screen
    20d8:	09 f0       	breq	.+2      	; 0x20dc <main+0x392>
    20da:	51 c0       	rjmp	.+162    	; 0x217e <main+0x434>
    20dc:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    20e0:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
				time_to_digit(2,Besttime,4,1); //BEST/LAP Convertes a time in ms to minutes:seconds:milliseconds
    20e4:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    20e8:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    20ec:	01 e0       	ldi	r16, 0x01	; 1
    20ee:	24 e0       	ldi	r18, 0x04	; 4
    20f0:	ac 01       	movw	r20, r24
    20f2:	bd 01       	movw	r22, r26
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	0e 94 07 08 	call	0x100e	; 0x100e <time_to_digit>
    20fa:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Pred_time>
    20fe:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Pred_time+0x1>
				time_to_digit(2,Pred_time,4,2); //Predicted
    2102:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <Pred_time+0x2>
    2106:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <Pred_time+0x3>
    210a:	02 e0       	ldi	r16, 0x02	; 2
    210c:	24 e0       	ldi	r18, 0x04	; 4
    210e:	ac 01       	movw	r20, r24
    2110:	bd 01       	movw	r22, r26
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	0e 94 07 08 	call	0x100e	; 0x100e <time_to_digit>
    2118:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <ODO>
    211c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <ODO+0x1>
				num_to_digit(2,ODO,0,3,10,3); //ODO
    2120:	0f 2e       	mov	r0, r31
    2122:	f3 e0       	ldi	r31, 0x03	; 3
    2124:	ef 2e       	mov	r14, r31
    2126:	f0 2d       	mov	r31, r0
    2128:	0a e0       	ldi	r16, 0x0A	; 10
    212a:	23 e0       	ldi	r18, 0x03	; 3
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	bc 01       	movw	r22, r24
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    2136:	e1 2c       	mov	r14, r1
    2138:	03 e0       	ldi	r16, 0x03	; 3
    213a:	21 e0       	ldi	r18, 0x01	; 1
				num_to_digit(2,9,0,1,3,0);//TC setting needs to be implemented!!!
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	69 e0       	ldi	r22, 0x09	; 9
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	82 e0       	ldi	r24, 0x02	; 2
    2144:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    2148:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <LapNumber>
    214c:	88 2f       	mov	r24, r24
				num_to_digit(2,LapNumber,0,2,3,3);//Lap number
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0f 2e       	mov	r0, r31
    2152:	f3 e0       	ldi	r31, 0x03	; 3
    2154:	ef 2e       	mov	r14, r31
    2156:	f0 2d       	mov	r31, r0
    2158:	03 e0       	ldi	r16, 0x03	; 3
    215a:	22 e0       	ldi	r18, 0x02	; 2
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	bc 01       	movw	r22, r24
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    2166:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    216a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(2,GPS_Speed,0,3,10,0);//Speed
    216e:	e1 2c       	mov	r14, r1
    2170:	0a e0       	ldi	r16, 0x0A	; 10
    2172:	23 e0       	ldi	r18, 0x03	; 3
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	bc 01       	movw	r22, r24
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	0e 94 a4 06 	call	0xd48	; 0xd48 <num_to_digit>
    217e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <draw_data>
				
			}
		}
		if(draw_data){ //1000Hz/1ms loop
    2182:	88 23       	and	r24, r24
    2184:	31 f0       	breq	.+12     	; 0x2192 <main+0x448>
    2186:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			dsp_write(dsp_mde);
    218a:	d7 db       	rcall	.-2130   	; 0x193a <dsp_write>
    218c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <draw_data>
			draw_data = 0;
    2190:	96 d0       	rcall	.+300    	; 0x22be <LED_Blink_CTRL>
    2192:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
			LED_Blink_CTRL();		
    2196:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}	
		if((sys_time - time_100) >= 10){//100Hz/10ms loop
    219a:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    219e:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    21a2:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <time_100>
    21a6:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <time_100+0x1>
    21aa:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <time_100+0x2>
    21ae:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <time_100+0x3>
    21b2:	79 01       	movw	r14, r18
    21b4:	8a 01       	movw	r16, r20
    21b6:	e8 1a       	sub	r14, r24
    21b8:	f9 0a       	sbc	r15, r25
    21ba:	0a 0b       	sbc	r16, r26
    21bc:	1b 0b       	sbc	r17, r27
    21be:	d8 01       	movw	r26, r16
    21c0:	c7 01       	movw	r24, r14
    21c2:	0a 97       	sbiw	r24, 0x0a	; 10
    21c4:	a1 05       	cpc	r26, r1
    21c6:	b1 05       	cpc	r27, r1
    21c8:	a0 f0       	brcs	.+40     	; 0x21f2 <main+0x4a8>
    21ca:	0e 94 38 03 	call	0x670	; 0x670 <CAN_recieve>
    21ce:	0e 94 86 03 	call	0x70c	; 0x70c <CAN_put_data>
			CAN_recieve();
    21d2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
			CAN_put_data();			
    21d6:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_100 = sys_time;		
    21da:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    21de:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    21e2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <time_100>
    21e6:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <time_100+0x1>
    21ea:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <time_100+0x2>
    21ee:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <time_100+0x3>
    21f2:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
    21f6:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}
		if((sys_time - time_10) >= 100){//10Hz/100ms loop
    21fa:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    21fe:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    2202:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <time_10>
    2206:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <time_10+0x1>
    220a:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <time_10+0x2>
    220e:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <time_10+0x3>
    2212:	79 01       	movw	r14, r18
    2214:	8a 01       	movw	r16, r20
    2216:	e8 1a       	sub	r14, r24
    2218:	f9 0a       	sbc	r15, r25
    221a:	0a 0b       	sbc	r16, r26
    221c:	1b 0b       	sbc	r17, r27
    221e:	d8 01       	movw	r26, r16
    2220:	c7 01       	movw	r24, r14
    2222:	84 36       	cpi	r24, 0x64	; 100
    2224:	91 05       	cpc	r25, r1
    2226:	a1 05       	cpc	r26, r1
    2228:	b1 05       	cpc	r27, r1
    222a:	08 f4       	brcc	.+2      	; 0x222e <main+0x4e4>
    222c:	cb cd       	rjmp	.-1130   	; 0x1dc4 <main+0x7a>
    222e:	84 e3       	ldi	r24, 0x34	; 52
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	24 e3       	ldi	r18, 0x34	; 52
			PORTG ^= (1<<PG3);			
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	f9 01       	movw	r30, r18
    2238:	30 81       	ld	r19, Z
    223a:	28 e0       	ldi	r18, 0x08	; 8
    223c:	23 27       	eor	r18, r19
    223e:	fc 01       	movw	r30, r24
    2240:	20 83       	st	Z, r18
    2242:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    2246:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_10 = sys_time;
    224a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    224e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2252:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <time_10>
    2256:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <time_10+0x1>
    225a:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <time_10+0x2>
    225e:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <time_10+0x3>
    2262:	b0 cd       	rjmp	.-1184   	; 0x1dc4 <main+0x7a>

00002264 <LED_Blink>:
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
		}
	}	
    2268:	00 d0       	rcall	.+0      	; 0x226a <LED_Blink+0x6>
}

void LED_Blink(uint8_t Anzahl_Blinks, uint16_t Zeit_fuer_Blinken){
    226a:	1f 92       	push	r1
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	7b 83       	std	Y+3, r23	; 0x03
    2274:	6a 83       	std	Y+2, r22	; 0x02
	Anzahl_Blinks_Glob = Anzahl_Blinks;
    2276:	89 81       	ldd	r24, Y+1	; 0x01
    2278:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <Anzahl_Blinks_Glob>
	Zeit_fuer_Blinken_Glob = Zeit_fuer_Blinken;
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    2284:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <Zeit_fuer_Blinken_Glob>
	sys_time_blink = sys_time;
    2288:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    228c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    2290:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2294:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2298:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <sys_time_blink>
    229c:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <sys_time_blink+0x1>
    22a0:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <sys_time_blink+0x2>
    22a4:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <sys_time_blink+0x3>
	LED_Blink_Flag = 0;
    22a8:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    22ac:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	}
    22b0:	00 00       	nop
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	08 95       	ret

000022be <LED_Blink_CTRL>:

void LED_Blink_CTRL(){
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	
	if (LED_Blink_Flag < Anzahl_Blinks_Glob)
    22ca:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <LED_Blink_Flag>
    22ce:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    22d2:	98 17       	cp	r25, r24
    22d4:	08 f0       	brcs	.+2      	; 0x22d8 <LED_Blink_CTRL+0x1a>
    22d6:	a2 c0       	rjmp	.+324    	; 0x241c <LED_Blink_CTRL+0x15e>
	{
		if (((sys_time_blink + (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)/2) + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 0))
    22d8:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    22dc:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    22e0:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    22e4:	88 2f       	mov	r24, r24
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	88 0f       	add	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	ac 01       	movw	r20, r24
    22ee:	c9 01       	movw	r24, r18
    22f0:	ba 01       	movw	r22, r20
    22f2:	45 d3       	rcall	.+1674   	; 0x297e <__udivmodhi4>
    22f4:	cb 01       	movw	r24, r22
    22f6:	96 95       	lsr	r25
    22f8:	87 95       	ror	r24
    22fa:	9c 01       	movw	r18, r24
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    2304:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    2308:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    230c:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    2310:	89 01       	movw	r16, r18
    2312:	9a 01       	movw	r18, r20
    2314:	08 0f       	add	r16, r24
    2316:	19 1f       	adc	r17, r25
    2318:	2a 1f       	adc	r18, r26
    231a:	3b 1f       	adc	r19, r27
    231c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2320:	e8 2f       	mov	r30, r24
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    2328:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    232c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	bc 01       	movw	r22, r24
    233a:	ca 01       	movw	r24, r20
    233c:	20 d3       	rcall	.+1600   	; 0x297e <__udivmodhi4>
    233e:	cb 01       	movw	r24, r22
    2340:	ac 01       	movw	r20, r24
    2342:	e4 9f       	mul	r30, r20
    2344:	c0 01       	movw	r24, r0
    2346:	e5 9f       	mul	r30, r21
    2348:	90 0d       	add	r25, r0
    234a:	f4 9f       	mul	r31, r20
    234c:	90 0d       	add	r25, r0
    234e:	11 24       	eor	r1, r1
    2350:	cc 01       	movw	r24, r24
    2352:	a0 e0       	ldi	r26, 0x00	; 0
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	a9 01       	movw	r20, r18
    2358:	98 01       	movw	r18, r16
    235a:	28 0f       	add	r18, r24
    235c:	39 1f       	adc	r19, r25
    235e:	4a 1f       	adc	r20, r26
    2360:	5b 1f       	adc	r21, r27
    2362:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    2366:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    236a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    236e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2372:	82 17       	cp	r24, r18
    2374:	93 07       	cpc	r25, r19
    2376:	a4 07       	cpc	r26, r20
    2378:	b5 07       	cpc	r27, r21
    237a:	88 f0       	brcs	.+34     	; 0x239e <LED_Blink_CTRL+0xe0>
    237c:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
    2380:	88 23       	and	r24, r24
    2382:	69 f4       	brne	.+26     	; 0x239e <LED_Blink_CTRL+0xe0>
		{
			LED_Blink_on = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <LED_Blink_on>
			
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    238a:	85 e0       	ldi	r24, 0x05	; 5
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
    238c:	ae d9       	rcall	.-3236   	; 0x16ea <led_left_top_bar_select>
    238e:	8a e0       	ldi	r24, 0x0A	; 10
    2390:	e8 d9       	rcall	.-3120   	; 0x1762 <led_right_top_bar_select>
			
			LED_Blink_Flag++;
    2392:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2396:	8f 5f       	subi	r24, 0xFF	; 255
    2398:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <LED_Blink_Flag>
	Anzahl_Blinks_Glob = 0;
	LED_Blink_on = 0;
	clear_top_left_bar();
	clear_top_right_bar();
	}
    239c:	47 c0       	rjmp	.+142    	; 0x242c <LED_Blink_CTRL+0x16e>
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
			
			LED_Blink_Flag++;
			
		}
		else if (((sys_time_blink  + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 1))
    239e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    23aa:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    23ae:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	bc 01       	movw	r22, r24
    23bc:	ca 01       	movw	r24, r20
    23be:	df d2       	rcall	.+1470   	; 0x297e <__udivmodhi4>
    23c0:	cb 01       	movw	r24, r22
    23c2:	ac 01       	movw	r20, r24
    23c4:	24 9f       	mul	r18, r20
    23c6:	c0 01       	movw	r24, r0
    23c8:	25 9f       	mul	r18, r21
    23ca:	90 0d       	add	r25, r0
    23cc:	34 9f       	mul	r19, r20
    23ce:	90 0d       	add	r25, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	9c 01       	movw	r18, r24
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    23dc:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    23e0:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    23e4:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    23e8:	28 0f       	add	r18, r24
    23ea:	39 1f       	adc	r19, r25
    23ec:	4a 1f       	adc	r20, r26
    23ee:	5b 1f       	adc	r21, r27
    23f0:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    23f4:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    23f8:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    23fc:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2400:	82 17       	cp	r24, r18
    2402:	93 07       	cpc	r25, r19
    2404:	a4 07       	cpc	r26, r20
    2406:	b5 07       	cpc	r27, r21
    2408:	88 f0       	brcs	.+34     	; 0x242c <LED_Blink_CTRL+0x16e>
    240a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
		{
			LED_Blink_on = 0;
    240e:	81 30       	cpi	r24, 0x01	; 1
    2410:	69 f4       	brne	.+26     	; 0x242c <LED_Blink_CTRL+0x16e>
			clear_top_left_bar();
    2412:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
			clear_top_right_bar();
    2416:	3a d9       	rcall	.-3468   	; 0x168c <clear_top_left_bar>
    2418:	53 d9       	rcall	.-3418   	; 0x16c0 <clear_top_right_bar>
		}
	}else{
	LED_Blink_Flag = 0;
    241a:	08 c0       	rjmp	.+16     	; 0x242c <LED_Blink_CTRL+0x16e>
	Anzahl_Blinks_Glob = 0;
    241c:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    2420:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <Anzahl_Blinks_Glob>
	clear_top_left_bar();
    2424:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	clear_top_right_bar();
    2428:	31 d9       	rcall	.-3486   	; 0x168c <clear_top_left_bar>
    242a:	4a d9       	rcall	.-3436   	; 0x16c0 <clear_top_right_bar>
	}
    242c:	00 00       	nop
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	08 95       	ret

00002438 <__vector_20>:
    2438:	1f 92       	push	r1
    243a:	0f 92       	push	r0
    243c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2440:	0f 92       	push	r0
    2442:	11 24       	eor	r1, r1
    2444:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    2448:	0f 92       	push	r0
    244a:	2f 93       	push	r18
    244c:	3f 93       	push	r19
    244e:	8f 93       	push	r24
    2450:	9f 93       	push	r25
    2452:	ef 93       	push	r30
    2454:	ff 93       	push	r31
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <spi_state>
    2462:	88 2f       	mov	r24, r24
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	82 30       	cpi	r24, 0x02	; 2
    2468:	91 05       	cpc	r25, r1
    246a:	81 f0       	breq	.+32     	; 0x248c <__vector_20+0x54>
    246c:	83 30       	cpi	r24, 0x03	; 3
    246e:	91 05       	cpc	r25, r1
    2470:	b9 f0       	breq	.+46     	; 0x24a0 <__vector_20+0x68>
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	09 f0       	breq	.+2      	; 0x2478 <__vector_20+0x40>
    2476:	29 c0       	rjmp	.+82     	; 0x24ca <__vector_20+0x92>
    2478:	8e e4       	ldi	r24, 0x4E	; 78
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <current_msg+0x2>
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
    2484:	82 e0       	ldi	r24, 0x02	; 2
    2486:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    248a:	1f c0       	rjmp	.+62     	; 0x24ca <__vector_20+0x92>
    248c:	8e e4       	ldi	r24, 0x4E	; 78
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <current_msg+0x3>
    2494:	fc 01       	movw	r30, r24
    2496:	20 83       	st	Z, r18
    2498:	83 e0       	ldi	r24, 0x03	; 3
    249a:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    249e:	15 c0       	rjmp	.+42     	; 0x24ca <__vector_20+0x92>
    24a0:	85 e2       	ldi	r24, 0x25	; 37
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	25 e2       	ldi	r18, 0x25	; 37
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	f9 01       	movw	r30, r18
    24aa:	20 81       	ld	r18, Z
    24ac:	20 68       	ori	r18, 0x80	; 128
    24ae:	fc 01       	movw	r30, r24
    24b0:	20 83       	st	Z, r18
    24b2:	82 e2       	ldi	r24, 0x22	; 34
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	22 e2       	ldi	r18, 0x22	; 34
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	f9 01       	movw	r30, r18
    24bc:	20 81       	ld	r18, Z
    24be:	28 60       	ori	r18, 0x08	; 8
    24c0:	fc 01       	movw	r30, r24
    24c2:	20 83       	st	Z, r18
    24c4:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <spi_state>
    24c8:	00 00       	nop
    24ca:	00 00       	nop
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	ff 91       	pop	r31
    24d2:	ef 91       	pop	r30
    24d4:	9f 91       	pop	r25
    24d6:	8f 91       	pop	r24
    24d8:	3f 91       	pop	r19
    24da:	2f 91       	pop	r18
    24dc:	0f 90       	pop	r0
    24de:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    24e2:	0f 90       	pop	r0
    24e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    24e8:	0f 90       	pop	r0
    24ea:	1f 90       	pop	r1
    24ec:	18 95       	reti

000024ee <port_config>:
extern volatile unsigned long sys_time;
uint8_t update_data = 0;
uint8_t draw_data = 0;

void port_config(void)
{
    24ee:	cf 93       	push	r28
    24f0:	df 93       	push	r29
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
	//PA2 --> IMD_LED
	//PA3 --> Chip_Select_RGB_Left
	//(PA4 - PA7) --> Top Bar
	DDRA |= (1<<PA2) | (1<<PA3) | (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
    24f6:	81 e2       	ldi	r24, 0x21	; 33
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	21 e2       	ldi	r18, 0x21	; 33
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	f9 01       	movw	r30, r18
    2500:	20 81       	ld	r18, Z
    2502:	2c 6f       	ori	r18, 0xFC	; 252
    2504:	fc 01       	movw	r30, r24
    2506:	20 83       	st	Z, r18
	
	//Button Inputs
	DDRA &= ~(1<<PA0) & ~(1<<PA1);
    2508:	81 e2       	ldi	r24, 0x21	; 33
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	21 e2       	ldi	r18, 0x21	; 33
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	f9 01       	movw	r30, r18
    2512:	20 81       	ld	r18, Z
    2514:	2c 7f       	andi	r18, 0xFC	; 252
    2516:	fc 01       	movw	r30, r24
    2518:	20 83       	st	Z, r18
	//PB2 --> MOSI
	//PB4 --> Display_Enable
	//PB5 --> Display_R/W
	//PB6 --> Display_RS
	//PB7 --> Chip_Select_RGB_Right
	DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
    251a:	84 e2       	ldi	r24, 0x24	; 36
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	24 e2       	ldi	r18, 0x24	; 36
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	f9 01       	movw	r30, r18
    2524:	20 81       	ld	r18, Z
    2526:	26 6f       	ori	r18, 0xF6	; 246
    2528:	fc 01       	movw	r30, r24
    252a:	20 83       	st	Z, r18
	
	//PB3 --> MISO
	DDRB &= ~(1<<PB3);
    252c:	84 e2       	ldi	r24, 0x24	; 36
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	24 e2       	ldi	r18, 0x24	; 36
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	f9 01       	movw	r30, r18
    2536:	20 81       	ld	r18, Z
    2538:	27 7f       	andi	r18, 0xF7	; 247
    253a:	fc 01       	movw	r30, r24
    253c:	20 83       	st	Z, r18
	
	//Top Bar
	DDRC = 0xFF;
    253e:	87 e2       	ldi	r24, 0x27	; 39
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	2f ef       	ldi	r18, 0xFF	; 255
    2544:	fc 01       	movw	r30, r24
    2546:	20 83       	st	Z, r18
	
	//Bottom Bar
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3) | (1<<PD4) | (1<<PD7);
    2548:	8a e2       	ldi	r24, 0x2A	; 42
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	2a e2       	ldi	r18, 0x2A	; 42
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	f9 01       	movw	r30, r18
    2552:	20 81       	ld	r18, Z
    2554:	2f 69       	ori	r18, 0x9F	; 159
    2556:	fc 01       	movw	r30, r24
    2558:	20 83       	st	Z, r18
	
	//Display-Bus Bar
	DDRE = 0xFF;
    255a:	8d e2       	ldi	r24, 0x2D	; 45
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	2f ef       	ldi	r18, 0xFF	; 255
    2560:	fc 01       	movw	r30, r24
    2562:	20 83       	st	Z, r18
	
	//SDCI Inputs:
	//PF1 --> SDB_DB
	//PF2 --> Inertia
	//PF3 --> BOTS
	DDRF &= ~(1<<PF1) & ~(1<<PF2) & ~(1<<PF3);
    2564:	80 e3       	ldi	r24, 0x30	; 48
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	20 e3       	ldi	r18, 0x30	; 48
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	f9 01       	movw	r30, r18
    256e:	20 81       	ld	r18, Z
    2570:	21 7f       	andi	r18, 0xF1	; 241
    2572:	fc 01       	movw	r30, r24
    2574:	20 83       	st	Z, r18
	
	//(PG0 - PG2) --> Top Bar
	//PG3 --> Heart
	//PG4 --> Fault
	DDRG |= (1<<PG0) | (1<<PG1) | (1<<PG2) | (1<<PG3) | (1<<PG4);
    2576:	83 e3       	ldi	r24, 0x33	; 51
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	23 e3       	ldi	r18, 0x33	; 51
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	f9 01       	movw	r30, r18
    2580:	20 81       	ld	r18, Z
    2582:	2f 61       	ori	r18, 0x1F	; 31
    2584:	fc 01       	movw	r30, r24
    2586:	20 83       	st	Z, r18
	
	//Resetting all PORTS
	PORTA = 0;
    2588:	82 e2       	ldi	r24, 0x22	; 34
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	fc 01       	movw	r30, r24
    258e:	10 82       	st	Z, r1
	//Resetting Display-Control-Ports
	PORTB = 0;
    2590:	85 e2       	ldi	r24, 0x25	; 37
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	fc 01       	movw	r30, r24
    2596:	10 82       	st	Z, r1
	PORTC = 0;
    2598:	88 e2       	ldi	r24, 0x28	; 40
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	10 82       	st	Z, r1
	PORTD = 0;
    25a0:	8b e2       	ldi	r24, 0x2B	; 43
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	fc 01       	movw	r30, r24
    25a6:	10 82       	st	Z, r1
	//Resetting Display-Bus Bar
	PORTE = 0;
    25a8:	8e e2       	ldi	r24, 0x2E	; 46
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	fc 01       	movw	r30, r24
    25ae:	10 82       	st	Z, r1
	PORTF = 0;
    25b0:	81 e3       	ldi	r24, 0x31	; 49
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	fc 01       	movw	r30, r24
    25b6:	10 82       	st	Z, r1
	PORTG = 0;
    25b8:	84 e3       	ldi	r24, 0x34	; 52
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	fc 01       	movw	r30, r24
    25be:	10 82       	st	Z, r1
	
	//Selecting Pull-Up Resistors for Button - Inputs
	PORTA |= (1<<PA0) | (1<<PA1);
    25c0:	82 e2       	ldi	r24, 0x22	; 34
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	22 e2       	ldi	r18, 0x22	; 34
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	f9 01       	movw	r30, r18
    25ca:	20 81       	ld	r18, Z
    25cc:	23 60       	ori	r18, 0x03	; 3
    25ce:	fc 01       	movw	r30, r24
    25d0:	20 83       	st	Z, r18
}
    25d2:	00 00       	nop
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	08 95       	ret

000025da <sys_timer_config>:

void sys_timer_config(void)
{
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
	//8 bit Timer 0 configuration
	//Mode --> CTC, Divider --> /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
    25e2:	84 e4       	ldi	r24, 0x44	; 68
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	2b e0       	ldi	r18, 0x0B	; 11
    25e8:	fc 01       	movw	r30, r24
    25ea:	20 83       	st	Z, r18
	//compare interrupt enable
	TIMSK0 = 0 | (1<<OCIE0A);
    25ec:	8e e6       	ldi	r24, 0x6E	; 110
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	22 e0       	ldi	r18, 0x02	; 2
    25f2:	fc 01       	movw	r30, r24
    25f4:	20 83       	st	Z, r18
	//compare value for 1ms;
	OCR0A = 250-1;
    25f6:	87 e4       	ldi	r24, 0x47	; 71
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	29 ef       	ldi	r18, 0xF9	; 249
    25fc:	fc 01       	movw	r30, r24
    25fe:	20 83       	st	Z, r18
}
    2600:	00 00       	nop
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	08 95       	ret

00002608 <__vector_16>:

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
    2608:	1f 92       	push	r1
    260a:	0f 92       	push	r0
    260c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2610:	0f 92       	push	r0
    2612:	11 24       	eor	r1, r1
    2614:	8f 93       	push	r24
    2616:	9f 93       	push	r25
    2618:	af 93       	push	r26
    261a:	bf 93       	push	r27
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
	draw_data = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <draw_data>
	update_data++;
    262a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
    262e:	8f 5f       	subi	r24, 0xFF	; 255
    2630:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <update_data>
	sys_time++;
    2634:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    2638:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    263c:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2640:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2644:	01 96       	adiw	r24, 0x01	; 1
    2646:	a1 1d       	adc	r26, r1
    2648:	b1 1d       	adc	r27, r1
    264a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <sys_time>
    264e:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <sys_time+0x1>
    2652:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <sys_time+0x2>
    2656:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <sys_time+0x3>
	
}
    265a:	00 00       	nop
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	bf 91       	pop	r27
    2662:	af 91       	pop	r26
    2664:	9f 91       	pop	r25
    2666:	8f 91       	pop	r24
    2668:	0f 90       	pop	r0
    266a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    266e:	0f 90       	pop	r0
    2670:	1f 90       	pop	r1
    2672:	18 95       	reti

00002674 <__divsf3>:
    2674:	0c d0       	rcall	.+24     	; 0x268e <__divsf3x>
    2676:	e6 c0       	rjmp	.+460    	; 0x2844 <__fp_round>
    2678:	de d0       	rcall	.+444    	; 0x2836 <__fp_pscB>
    267a:	40 f0       	brcs	.+16     	; 0x268c <__divsf3+0x18>
    267c:	d5 d0       	rcall	.+426    	; 0x2828 <__fp_pscA>
    267e:	30 f0       	brcs	.+12     	; 0x268c <__divsf3+0x18>
    2680:	21 f4       	brne	.+8      	; 0x268a <__divsf3+0x16>
    2682:	5f 3f       	cpi	r21, 0xFF	; 255
    2684:	19 f0       	breq	.+6      	; 0x268c <__divsf3+0x18>
    2686:	c7 c0       	rjmp	.+398    	; 0x2816 <__fp_inf>
    2688:	51 11       	cpse	r21, r1
    268a:	10 c1       	rjmp	.+544    	; 0x28ac <__fp_szero>
    268c:	ca c0       	rjmp	.+404    	; 0x2822 <__fp_nan>

0000268e <__divsf3x>:
    268e:	eb d0       	rcall	.+470    	; 0x2866 <__fp_split3>
    2690:	98 f3       	brcs	.-26     	; 0x2678 <__divsf3+0x4>

00002692 <__divsf3_pse>:
    2692:	99 23       	and	r25, r25
    2694:	c9 f3       	breq	.-14     	; 0x2688 <__divsf3+0x14>
    2696:	55 23       	and	r21, r21
    2698:	b1 f3       	breq	.-20     	; 0x2686 <__divsf3+0x12>
    269a:	95 1b       	sub	r25, r21
    269c:	55 0b       	sbc	r21, r21
    269e:	bb 27       	eor	r27, r27
    26a0:	aa 27       	eor	r26, r26
    26a2:	62 17       	cp	r22, r18
    26a4:	73 07       	cpc	r23, r19
    26a6:	84 07       	cpc	r24, r20
    26a8:	38 f0       	brcs	.+14     	; 0x26b8 <__divsf3_pse+0x26>
    26aa:	9f 5f       	subi	r25, 0xFF	; 255
    26ac:	5f 4f       	sbci	r21, 0xFF	; 255
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	44 1f       	adc	r20, r20
    26b4:	aa 1f       	adc	r26, r26
    26b6:	a9 f3       	breq	.-22     	; 0x26a2 <__divsf3_pse+0x10>
    26b8:	33 d0       	rcall	.+102    	; 0x2720 <__divsf3_pse+0x8e>
    26ba:	0e 2e       	mov	r0, r30
    26bc:	3a f0       	brmi	.+14     	; 0x26cc <__divsf3_pse+0x3a>
    26be:	e0 e8       	ldi	r30, 0x80	; 128
    26c0:	30 d0       	rcall	.+96     	; 0x2722 <__divsf3_pse+0x90>
    26c2:	91 50       	subi	r25, 0x01	; 1
    26c4:	50 40       	sbci	r21, 0x00	; 0
    26c6:	e6 95       	lsr	r30
    26c8:	00 1c       	adc	r0, r0
    26ca:	ca f7       	brpl	.-14     	; 0x26be <__divsf3_pse+0x2c>
    26cc:	29 d0       	rcall	.+82     	; 0x2720 <__divsf3_pse+0x8e>
    26ce:	fe 2f       	mov	r31, r30
    26d0:	27 d0       	rcall	.+78     	; 0x2720 <__divsf3_pse+0x8e>
    26d2:	66 0f       	add	r22, r22
    26d4:	77 1f       	adc	r23, r23
    26d6:	88 1f       	adc	r24, r24
    26d8:	bb 1f       	adc	r27, r27
    26da:	26 17       	cp	r18, r22
    26dc:	37 07       	cpc	r19, r23
    26de:	48 07       	cpc	r20, r24
    26e0:	ab 07       	cpc	r26, r27
    26e2:	b0 e8       	ldi	r27, 0x80	; 128
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <__divsf3_pse+0x56>
    26e6:	bb 0b       	sbc	r27, r27
    26e8:	80 2d       	mov	r24, r0
    26ea:	bf 01       	movw	r22, r30
    26ec:	ff 27       	eor	r31, r31
    26ee:	93 58       	subi	r25, 0x83	; 131
    26f0:	5f 4f       	sbci	r21, 0xFF	; 255
    26f2:	2a f0       	brmi	.+10     	; 0x26fe <__divsf3_pse+0x6c>
    26f4:	9e 3f       	cpi	r25, 0xFE	; 254
    26f6:	51 05       	cpc	r21, r1
    26f8:	68 f0       	brcs	.+26     	; 0x2714 <__divsf3_pse+0x82>
    26fa:	8d c0       	rjmp	.+282    	; 0x2816 <__fp_inf>
    26fc:	d7 c0       	rjmp	.+430    	; 0x28ac <__fp_szero>
    26fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2700:	ec f3       	brlt	.-6      	; 0x26fc <__divsf3_pse+0x6a>
    2702:	98 3e       	cpi	r25, 0xE8	; 232
    2704:	dc f3       	brlt	.-10     	; 0x26fc <__divsf3_pse+0x6a>
    2706:	86 95       	lsr	r24
    2708:	77 95       	ror	r23
    270a:	67 95       	ror	r22
    270c:	b7 95       	ror	r27
    270e:	f7 95       	ror	r31
    2710:	9f 5f       	subi	r25, 0xFF	; 255
    2712:	c9 f7       	brne	.-14     	; 0x2706 <__divsf3_pse+0x74>
    2714:	88 0f       	add	r24, r24
    2716:	91 1d       	adc	r25, r1
    2718:	96 95       	lsr	r25
    271a:	87 95       	ror	r24
    271c:	97 f9       	bld	r25, 7
    271e:	08 95       	ret
    2720:	e1 e0       	ldi	r30, 0x01	; 1
    2722:	66 0f       	add	r22, r22
    2724:	77 1f       	adc	r23, r23
    2726:	88 1f       	adc	r24, r24
    2728:	bb 1f       	adc	r27, r27
    272a:	62 17       	cp	r22, r18
    272c:	73 07       	cpc	r23, r19
    272e:	84 07       	cpc	r24, r20
    2730:	ba 07       	cpc	r27, r26
    2732:	20 f0       	brcs	.+8      	; 0x273c <__divsf3_pse+0xaa>
    2734:	62 1b       	sub	r22, r18
    2736:	73 0b       	sbc	r23, r19
    2738:	84 0b       	sbc	r24, r20
    273a:	ba 0b       	sbc	r27, r26
    273c:	ee 1f       	adc	r30, r30
    273e:	88 f7       	brcc	.-30     	; 0x2722 <__divsf3_pse+0x90>
    2740:	e0 95       	com	r30
    2742:	08 95       	ret

00002744 <__fixunssfsi>:
    2744:	98 d0       	rcall	.+304    	; 0x2876 <__fp_splitA>
    2746:	88 f0       	brcs	.+34     	; 0x276a <__fixunssfsi+0x26>
    2748:	9f 57       	subi	r25, 0x7F	; 127
    274a:	90 f0       	brcs	.+36     	; 0x2770 <__fixunssfsi+0x2c>
    274c:	b9 2f       	mov	r27, r25
    274e:	99 27       	eor	r25, r25
    2750:	b7 51       	subi	r27, 0x17	; 23
    2752:	a0 f0       	brcs	.+40     	; 0x277c <__fixunssfsi+0x38>
    2754:	d1 f0       	breq	.+52     	; 0x278a <__fixunssfsi+0x46>
    2756:	66 0f       	add	r22, r22
    2758:	77 1f       	adc	r23, r23
    275a:	88 1f       	adc	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	1a f0       	brmi	.+6      	; 0x2766 <__fixunssfsi+0x22>
    2760:	ba 95       	dec	r27
    2762:	c9 f7       	brne	.-14     	; 0x2756 <__fixunssfsi+0x12>
    2764:	12 c0       	rjmp	.+36     	; 0x278a <__fixunssfsi+0x46>
    2766:	b1 30       	cpi	r27, 0x01	; 1
    2768:	81 f0       	breq	.+32     	; 0x278a <__fixunssfsi+0x46>
    276a:	9f d0       	rcall	.+318    	; 0x28aa <__fp_zero>
    276c:	b1 e0       	ldi	r27, 0x01	; 1
    276e:	08 95       	ret
    2770:	9c c0       	rjmp	.+312    	; 0x28aa <__fp_zero>
    2772:	67 2f       	mov	r22, r23
    2774:	78 2f       	mov	r23, r24
    2776:	88 27       	eor	r24, r24
    2778:	b8 5f       	subi	r27, 0xF8	; 248
    277a:	39 f0       	breq	.+14     	; 0x278a <__fixunssfsi+0x46>
    277c:	b9 3f       	cpi	r27, 0xF9	; 249
    277e:	cc f3       	brlt	.-14     	; 0x2772 <__fixunssfsi+0x2e>
    2780:	86 95       	lsr	r24
    2782:	77 95       	ror	r23
    2784:	67 95       	ror	r22
    2786:	b3 95       	inc	r27
    2788:	d9 f7       	brne	.-10     	; 0x2780 <__fixunssfsi+0x3c>
    278a:	3e f4       	brtc	.+14     	; 0x279a <__fixunssfsi+0x56>
    278c:	90 95       	com	r25
    278e:	80 95       	com	r24
    2790:	70 95       	com	r23
    2792:	61 95       	neg	r22
    2794:	7f 4f       	sbci	r23, 0xFF	; 255
    2796:	8f 4f       	sbci	r24, 0xFF	; 255
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	08 95       	ret

0000279c <__floatunsisf>:
    279c:	e8 94       	clt
    279e:	09 c0       	rjmp	.+18     	; 0x27b2 <__floatsisf+0x12>

000027a0 <__floatsisf>:
    27a0:	97 fb       	bst	r25, 7
    27a2:	3e f4       	brtc	.+14     	; 0x27b2 <__floatsisf+0x12>
    27a4:	90 95       	com	r25
    27a6:	80 95       	com	r24
    27a8:	70 95       	com	r23
    27aa:	61 95       	neg	r22
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	8f 4f       	sbci	r24, 0xFF	; 255
    27b0:	9f 4f       	sbci	r25, 0xFF	; 255
    27b2:	99 23       	and	r25, r25
    27b4:	a9 f0       	breq	.+42     	; 0x27e0 <__floatsisf+0x40>
    27b6:	f9 2f       	mov	r31, r25
    27b8:	96 e9       	ldi	r25, 0x96	; 150
    27ba:	bb 27       	eor	r27, r27
    27bc:	93 95       	inc	r25
    27be:	f6 95       	lsr	r31
    27c0:	87 95       	ror	r24
    27c2:	77 95       	ror	r23
    27c4:	67 95       	ror	r22
    27c6:	b7 95       	ror	r27
    27c8:	f1 11       	cpse	r31, r1
    27ca:	f8 cf       	rjmp	.-16     	; 0x27bc <__floatsisf+0x1c>
    27cc:	fa f4       	brpl	.+62     	; 0x280c <__floatsisf+0x6c>
    27ce:	bb 0f       	add	r27, r27
    27d0:	11 f4       	brne	.+4      	; 0x27d6 <__floatsisf+0x36>
    27d2:	60 ff       	sbrs	r22, 0
    27d4:	1b c0       	rjmp	.+54     	; 0x280c <__floatsisf+0x6c>
    27d6:	6f 5f       	subi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	8f 4f       	sbci	r24, 0xFF	; 255
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	16 c0       	rjmp	.+44     	; 0x280c <__floatsisf+0x6c>
    27e0:	88 23       	and	r24, r24
    27e2:	11 f0       	breq	.+4      	; 0x27e8 <__floatsisf+0x48>
    27e4:	96 e9       	ldi	r25, 0x96	; 150
    27e6:	11 c0       	rjmp	.+34     	; 0x280a <__floatsisf+0x6a>
    27e8:	77 23       	and	r23, r23
    27ea:	21 f0       	breq	.+8      	; 0x27f4 <__floatsisf+0x54>
    27ec:	9e e8       	ldi	r25, 0x8E	; 142
    27ee:	87 2f       	mov	r24, r23
    27f0:	76 2f       	mov	r23, r22
    27f2:	05 c0       	rjmp	.+10     	; 0x27fe <__floatsisf+0x5e>
    27f4:	66 23       	and	r22, r22
    27f6:	71 f0       	breq	.+28     	; 0x2814 <__floatsisf+0x74>
    27f8:	96 e8       	ldi	r25, 0x86	; 134
    27fa:	86 2f       	mov	r24, r22
    27fc:	70 e0       	ldi	r23, 0x00	; 0
    27fe:	60 e0       	ldi	r22, 0x00	; 0
    2800:	2a f0       	brmi	.+10     	; 0x280c <__floatsisf+0x6c>
    2802:	9a 95       	dec	r25
    2804:	66 0f       	add	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	da f7       	brpl	.-10     	; 0x2802 <__floatsisf+0x62>
    280c:	88 0f       	add	r24, r24
    280e:	96 95       	lsr	r25
    2810:	87 95       	ror	r24
    2812:	97 f9       	bld	r25, 7
    2814:	08 95       	ret

00002816 <__fp_inf>:
    2816:	97 f9       	bld	r25, 7
    2818:	9f 67       	ori	r25, 0x7F	; 127
    281a:	80 e8       	ldi	r24, 0x80	; 128
    281c:	70 e0       	ldi	r23, 0x00	; 0
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	08 95       	ret

00002822 <__fp_nan>:
    2822:	9f ef       	ldi	r25, 0xFF	; 255
    2824:	80 ec       	ldi	r24, 0xC0	; 192
    2826:	08 95       	ret

00002828 <__fp_pscA>:
    2828:	00 24       	eor	r0, r0
    282a:	0a 94       	dec	r0
    282c:	16 16       	cp	r1, r22
    282e:	17 06       	cpc	r1, r23
    2830:	18 06       	cpc	r1, r24
    2832:	09 06       	cpc	r0, r25
    2834:	08 95       	ret

00002836 <__fp_pscB>:
    2836:	00 24       	eor	r0, r0
    2838:	0a 94       	dec	r0
    283a:	12 16       	cp	r1, r18
    283c:	13 06       	cpc	r1, r19
    283e:	14 06       	cpc	r1, r20
    2840:	05 06       	cpc	r0, r21
    2842:	08 95       	ret

00002844 <__fp_round>:
    2844:	09 2e       	mov	r0, r25
    2846:	03 94       	inc	r0
    2848:	00 0c       	add	r0, r0
    284a:	11 f4       	brne	.+4      	; 0x2850 <__fp_round+0xc>
    284c:	88 23       	and	r24, r24
    284e:	52 f0       	brmi	.+20     	; 0x2864 <__fp_round+0x20>
    2850:	bb 0f       	add	r27, r27
    2852:	40 f4       	brcc	.+16     	; 0x2864 <__fp_round+0x20>
    2854:	bf 2b       	or	r27, r31
    2856:	11 f4       	brne	.+4      	; 0x285c <__fp_round+0x18>
    2858:	60 ff       	sbrs	r22, 0
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <__fp_round+0x20>
    285c:	6f 5f       	subi	r22, 0xFF	; 255
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	8f 4f       	sbci	r24, 0xFF	; 255
    2862:	9f 4f       	sbci	r25, 0xFF	; 255
    2864:	08 95       	ret

00002866 <__fp_split3>:
    2866:	57 fd       	sbrc	r21, 7
    2868:	90 58       	subi	r25, 0x80	; 128
    286a:	44 0f       	add	r20, r20
    286c:	55 1f       	adc	r21, r21
    286e:	59 f0       	breq	.+22     	; 0x2886 <__fp_splitA+0x10>
    2870:	5f 3f       	cpi	r21, 0xFF	; 255
    2872:	71 f0       	breq	.+28     	; 0x2890 <__fp_splitA+0x1a>
    2874:	47 95       	ror	r20

00002876 <__fp_splitA>:
    2876:	88 0f       	add	r24, r24
    2878:	97 fb       	bst	r25, 7
    287a:	99 1f       	adc	r25, r25
    287c:	61 f0       	breq	.+24     	; 0x2896 <__fp_splitA+0x20>
    287e:	9f 3f       	cpi	r25, 0xFF	; 255
    2880:	79 f0       	breq	.+30     	; 0x28a0 <__fp_splitA+0x2a>
    2882:	87 95       	ror	r24
    2884:	08 95       	ret
    2886:	12 16       	cp	r1, r18
    2888:	13 06       	cpc	r1, r19
    288a:	14 06       	cpc	r1, r20
    288c:	55 1f       	adc	r21, r21
    288e:	f2 cf       	rjmp	.-28     	; 0x2874 <__fp_split3+0xe>
    2890:	46 95       	lsr	r20
    2892:	f1 df       	rcall	.-30     	; 0x2876 <__fp_splitA>
    2894:	08 c0       	rjmp	.+16     	; 0x28a6 <__fp_splitA+0x30>
    2896:	16 16       	cp	r1, r22
    2898:	17 06       	cpc	r1, r23
    289a:	18 06       	cpc	r1, r24
    289c:	99 1f       	adc	r25, r25
    289e:	f1 cf       	rjmp	.-30     	; 0x2882 <__fp_splitA+0xc>
    28a0:	86 95       	lsr	r24
    28a2:	71 05       	cpc	r23, r1
    28a4:	61 05       	cpc	r22, r1
    28a6:	08 94       	sec
    28a8:	08 95       	ret

000028aa <__fp_zero>:
    28aa:	e8 94       	clt

000028ac <__fp_szero>:
    28ac:	bb 27       	eor	r27, r27
    28ae:	66 27       	eor	r22, r22
    28b0:	77 27       	eor	r23, r23
    28b2:	cb 01       	movw	r24, r22
    28b4:	97 f9       	bld	r25, 7
    28b6:	08 95       	ret

000028b8 <__mulsf3>:
    28b8:	0b d0       	rcall	.+22     	; 0x28d0 <__mulsf3x>
    28ba:	c4 cf       	rjmp	.-120    	; 0x2844 <__fp_round>
    28bc:	b5 df       	rcall	.-150    	; 0x2828 <__fp_pscA>
    28be:	28 f0       	brcs	.+10     	; 0x28ca <__mulsf3+0x12>
    28c0:	ba df       	rcall	.-140    	; 0x2836 <__fp_pscB>
    28c2:	18 f0       	brcs	.+6      	; 0x28ca <__mulsf3+0x12>
    28c4:	95 23       	and	r25, r21
    28c6:	09 f0       	breq	.+2      	; 0x28ca <__mulsf3+0x12>
    28c8:	a6 cf       	rjmp	.-180    	; 0x2816 <__fp_inf>
    28ca:	ab cf       	rjmp	.-170    	; 0x2822 <__fp_nan>
    28cc:	11 24       	eor	r1, r1
    28ce:	ee cf       	rjmp	.-36     	; 0x28ac <__fp_szero>

000028d0 <__mulsf3x>:
    28d0:	ca df       	rcall	.-108    	; 0x2866 <__fp_split3>
    28d2:	a0 f3       	brcs	.-24     	; 0x28bc <__mulsf3+0x4>

000028d4 <__mulsf3_pse>:
    28d4:	95 9f       	mul	r25, r21
    28d6:	d1 f3       	breq	.-12     	; 0x28cc <__mulsf3+0x14>
    28d8:	95 0f       	add	r25, r21
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	55 1f       	adc	r21, r21
    28de:	62 9f       	mul	r22, r18
    28e0:	f0 01       	movw	r30, r0
    28e2:	72 9f       	mul	r23, r18
    28e4:	bb 27       	eor	r27, r27
    28e6:	f0 0d       	add	r31, r0
    28e8:	b1 1d       	adc	r27, r1
    28ea:	63 9f       	mul	r22, r19
    28ec:	aa 27       	eor	r26, r26
    28ee:	f0 0d       	add	r31, r0
    28f0:	b1 1d       	adc	r27, r1
    28f2:	aa 1f       	adc	r26, r26
    28f4:	64 9f       	mul	r22, r20
    28f6:	66 27       	eor	r22, r22
    28f8:	b0 0d       	add	r27, r0
    28fa:	a1 1d       	adc	r26, r1
    28fc:	66 1f       	adc	r22, r22
    28fe:	82 9f       	mul	r24, r18
    2900:	22 27       	eor	r18, r18
    2902:	b0 0d       	add	r27, r0
    2904:	a1 1d       	adc	r26, r1
    2906:	62 1f       	adc	r22, r18
    2908:	73 9f       	mul	r23, r19
    290a:	b0 0d       	add	r27, r0
    290c:	a1 1d       	adc	r26, r1
    290e:	62 1f       	adc	r22, r18
    2910:	83 9f       	mul	r24, r19
    2912:	a0 0d       	add	r26, r0
    2914:	61 1d       	adc	r22, r1
    2916:	22 1f       	adc	r18, r18
    2918:	74 9f       	mul	r23, r20
    291a:	33 27       	eor	r19, r19
    291c:	a0 0d       	add	r26, r0
    291e:	61 1d       	adc	r22, r1
    2920:	23 1f       	adc	r18, r19
    2922:	84 9f       	mul	r24, r20
    2924:	60 0d       	add	r22, r0
    2926:	21 1d       	adc	r18, r1
    2928:	82 2f       	mov	r24, r18
    292a:	76 2f       	mov	r23, r22
    292c:	6a 2f       	mov	r22, r26
    292e:	11 24       	eor	r1, r1
    2930:	9f 57       	subi	r25, 0x7F	; 127
    2932:	50 40       	sbci	r21, 0x00	; 0
    2934:	8a f0       	brmi	.+34     	; 0x2958 <__mulsf3_pse+0x84>
    2936:	e1 f0       	breq	.+56     	; 0x2970 <__mulsf3_pse+0x9c>
    2938:	88 23       	and	r24, r24
    293a:	4a f0       	brmi	.+18     	; 0x294e <__mulsf3_pse+0x7a>
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	bb 1f       	adc	r27, r27
    2942:	66 1f       	adc	r22, r22
    2944:	77 1f       	adc	r23, r23
    2946:	88 1f       	adc	r24, r24
    2948:	91 50       	subi	r25, 0x01	; 1
    294a:	50 40       	sbci	r21, 0x00	; 0
    294c:	a9 f7       	brne	.-22     	; 0x2938 <__mulsf3_pse+0x64>
    294e:	9e 3f       	cpi	r25, 0xFE	; 254
    2950:	51 05       	cpc	r21, r1
    2952:	70 f0       	brcs	.+28     	; 0x2970 <__mulsf3_pse+0x9c>
    2954:	60 cf       	rjmp	.-320    	; 0x2816 <__fp_inf>
    2956:	aa cf       	rjmp	.-172    	; 0x28ac <__fp_szero>
    2958:	5f 3f       	cpi	r21, 0xFF	; 255
    295a:	ec f3       	brlt	.-6      	; 0x2956 <__mulsf3_pse+0x82>
    295c:	98 3e       	cpi	r25, 0xE8	; 232
    295e:	dc f3       	brlt	.-10     	; 0x2956 <__mulsf3_pse+0x82>
    2960:	86 95       	lsr	r24
    2962:	77 95       	ror	r23
    2964:	67 95       	ror	r22
    2966:	b7 95       	ror	r27
    2968:	f7 95       	ror	r31
    296a:	e7 95       	ror	r30
    296c:	9f 5f       	subi	r25, 0xFF	; 255
    296e:	c1 f7       	brne	.-16     	; 0x2960 <__mulsf3_pse+0x8c>
    2970:	fe 2b       	or	r31, r30
    2972:	88 0f       	add	r24, r24
    2974:	91 1d       	adc	r25, r1
    2976:	96 95       	lsr	r25
    2978:	87 95       	ror	r24
    297a:	97 f9       	bld	r25, 7
    297c:	08 95       	ret

0000297e <__udivmodhi4>:
    297e:	aa 1b       	sub	r26, r26
    2980:	bb 1b       	sub	r27, r27
    2982:	51 e1       	ldi	r21, 0x11	; 17
    2984:	07 c0       	rjmp	.+14     	; 0x2994 <__udivmodhi4_ep>

00002986 <__udivmodhi4_loop>:
    2986:	aa 1f       	adc	r26, r26
    2988:	bb 1f       	adc	r27, r27
    298a:	a6 17       	cp	r26, r22
    298c:	b7 07       	cpc	r27, r23
    298e:	10 f0       	brcs	.+4      	; 0x2994 <__udivmodhi4_ep>
    2990:	a6 1b       	sub	r26, r22
    2992:	b7 0b       	sbc	r27, r23

00002994 <__udivmodhi4_ep>:
    2994:	88 1f       	adc	r24, r24
    2996:	99 1f       	adc	r25, r25
    2998:	5a 95       	dec	r21
    299a:	a9 f7       	brne	.-22     	; 0x2986 <__udivmodhi4_loop>
    299c:	80 95       	com	r24
    299e:	90 95       	com	r25
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	08 95       	ret

000029a6 <__divmodhi4>:
    29a6:	97 fb       	bst	r25, 7
    29a8:	07 2e       	mov	r0, r23
    29aa:	16 f4       	brtc	.+4      	; 0x29b0 <__divmodhi4+0xa>
    29ac:	00 94       	com	r0
    29ae:	06 d0       	rcall	.+12     	; 0x29bc <__divmodhi4_neg1>
    29b0:	77 fd       	sbrc	r23, 7
    29b2:	08 d0       	rcall	.+16     	; 0x29c4 <__divmodhi4_neg2>
    29b4:	e4 df       	rcall	.-56     	; 0x297e <__udivmodhi4>
    29b6:	07 fc       	sbrc	r0, 7
    29b8:	05 d0       	rcall	.+10     	; 0x29c4 <__divmodhi4_neg2>
    29ba:	3e f4       	brtc	.+14     	; 0x29ca <__divmodhi4_exit>

000029bc <__divmodhi4_neg1>:
    29bc:	90 95       	com	r25
    29be:	81 95       	neg	r24
    29c0:	9f 4f       	sbci	r25, 0xFF	; 255
    29c2:	08 95       	ret

000029c4 <__divmodhi4_neg2>:
    29c4:	70 95       	com	r23
    29c6:	61 95       	neg	r22
    29c8:	7f 4f       	sbci	r23, 0xFF	; 255

000029ca <__divmodhi4_exit>:
    29ca:	08 95       	ret

000029cc <__udivmodsi4>:
    29cc:	a1 e2       	ldi	r26, 0x21	; 33
    29ce:	1a 2e       	mov	r1, r26
    29d0:	aa 1b       	sub	r26, r26
    29d2:	bb 1b       	sub	r27, r27
    29d4:	fd 01       	movw	r30, r26
    29d6:	0d c0       	rjmp	.+26     	; 0x29f2 <__udivmodsi4_ep>

000029d8 <__udivmodsi4_loop>:
    29d8:	aa 1f       	adc	r26, r26
    29da:	bb 1f       	adc	r27, r27
    29dc:	ee 1f       	adc	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	a2 17       	cp	r26, r18
    29e2:	b3 07       	cpc	r27, r19
    29e4:	e4 07       	cpc	r30, r20
    29e6:	f5 07       	cpc	r31, r21
    29e8:	20 f0       	brcs	.+8      	; 0x29f2 <__udivmodsi4_ep>
    29ea:	a2 1b       	sub	r26, r18
    29ec:	b3 0b       	sbc	r27, r19
    29ee:	e4 0b       	sbc	r30, r20
    29f0:	f5 0b       	sbc	r31, r21

000029f2 <__udivmodsi4_ep>:
    29f2:	66 1f       	adc	r22, r22
    29f4:	77 1f       	adc	r23, r23
    29f6:	88 1f       	adc	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	1a 94       	dec	r1
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <__udivmodsi4_loop>
    29fe:	60 95       	com	r22
    2a00:	70 95       	com	r23
    2a02:	80 95       	com	r24
    2a04:	90 95       	com	r25
    2a06:	9b 01       	movw	r18, r22
    2a08:	ac 01       	movw	r20, r24
    2a0a:	bd 01       	movw	r22, r26
    2a0c:	cf 01       	movw	r24, r30
    2a0e:	08 95       	ret

00002a10 <__umulhisi3>:
    2a10:	a2 9f       	mul	r26, r18
    2a12:	b0 01       	movw	r22, r0
    2a14:	b3 9f       	mul	r27, r19
    2a16:	c0 01       	movw	r24, r0
    2a18:	a3 9f       	mul	r26, r19
    2a1a:	70 0d       	add	r23, r0
    2a1c:	81 1d       	adc	r24, r1
    2a1e:	11 24       	eor	r1, r1
    2a20:	91 1d       	adc	r25, r1
    2a22:	b2 9f       	mul	r27, r18
    2a24:	70 0d       	add	r23, r0
    2a26:	81 1d       	adc	r24, r1
    2a28:	11 24       	eor	r1, r1
    2a2a:	91 1d       	adc	r25, r1
    2a2c:	08 95       	ret

00002a2e <strlen>:
    2a2e:	fc 01       	movw	r30, r24
    2a30:	01 90       	ld	r0, Z+
    2a32:	00 20       	and	r0, r0
    2a34:	e9 f7       	brne	.-6      	; 0x2a30 <strlen+0x2>
    2a36:	80 95       	com	r24
    2a38:	90 95       	com	r25
    2a3a:	8e 0f       	add	r24, r30
    2a3c:	9f 1f       	adc	r25, r31
    2a3e:	08 95       	ret

00002a40 <_exit>:
    2a40:	f8 94       	cli

00002a42 <__stop_program>:
    2a42:	ff cf       	rjmp	.-2      	; 0x2a42 <__stop_program>
