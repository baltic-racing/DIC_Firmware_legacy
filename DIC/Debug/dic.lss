
dic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00002a68  00002afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000280  008001d2  008001d2  00002bce  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ad  00000000  00000000  00002e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  00005135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d78  00000000  00000000  000062db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00008054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f33  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3d  00000000  00000000  00009653  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000a390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
       6:	00 00       	nop
       8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
       a:	00 00       	nop
       c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
       e:	00 00       	nop
      10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
      12:	00 00       	nop
      14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
      16:	00 00       	nop
      18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
      22:	00 00       	nop
      24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
      26:	00 00       	nop
      28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
      32:	00 00       	nop
      34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
      36:	00 00       	nop
      38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 16 13 	jmp	0x262c	; 0x262c <__vector_16>
      44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
      46:	00 00       	nop
      48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 2e 12 	jmp	0x245c	; 0x245c <__vector_20>
      54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
      56:	00 00       	nop
      58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
      62:	00 00       	nop
      64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
      66:	00 00       	nop
      68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
      72:	00 00       	nop
      74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
      76:	00 00       	nop
      78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
      82:	00 00       	nop
      84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
      86:	00 00       	nop
      88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 e6       	ldi	r30, 0x68	; 104
      a8:	fa e2       	ldi	r31, 0x2A	; 42
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a2 3d       	cpi	r26, 0xD2	; 210
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	24 e0       	ldi	r18, 0x04	; 4
      bc:	a2 ed       	ldi	r26, 0xD2	; 210
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a2 35       	cpi	r26, 0x52	; 82
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <main>
      ce:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <_exit>

000000d2 <__bad_interrupt>:
      d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <can_check_free>:
#include "canlib.h"
#include <avr/io.h>



uint8_t can_check_free(uint8_t mobnum){
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	00 d0       	rcall	.+0      	; 0xda <can_check_free+0x6>
      da:	cd b7       	in	r28, 0x3d	; 61
      dc:	de b7       	in	r29, 0x3e	; 62
      de:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t mob_status = 0;
      e0:	19 82       	std	Y+1, r1	; 0x01
	
	if(mobnum >= 8){
      e2:	8a 81       	ldd	r24, Y+2	; 0x02
      e4:	88 30       	cpi	r24, 0x08	; 8
      e6:	c0 f0       	brcs	.+48     	; 0x118 <can_check_free+0x44>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
      e8:	8d ed       	ldi	r24, 0xDD	; 221
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	fc 01       	movw	r30, r24
      ee:	80 81       	ld	r24, Z
      f0:	88 2f       	mov	r24, r24
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2a 81       	ldd	r18, Y+2	; 0x02
      f6:	22 2f       	mov	r18, r18
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	28 50       	subi	r18, 0x08	; 8
      fc:	31 09       	sbc	r19, r1
      fe:	02 c0       	rjmp	.+4      	; 0x104 <can_check_free+0x30>
     100:	95 95       	asr	r25
     102:	87 95       	ror	r24
     104:	2a 95       	dec	r18
     106:	e2 f7       	brpl	.-8      	; 0x100 <can_check_free+0x2c>
     108:	81 70       	andi	r24, 0x01	; 1
     10a:	99 27       	eor	r25, r25
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	89 2b       	or	r24, r25
     110:	09 f0       	breq	.+2      	; 0x114 <can_check_free+0x40>
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	29 83       	std	Y+1, r18	; 0x01
     116:	15 c0       	rjmp	.+42     	; 0x142 <can_check_free+0x6e>


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
     118:	8c ed       	ldi	r24, 0xDC	; 220
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	80 81       	ld	r24, Z
     120:	88 2f       	mov	r24, r24
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	2a 81       	ldd	r18, Y+2	; 0x02
     126:	22 2f       	mov	r18, r18
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <can_check_free+0x5c>
     12c:	95 95       	asr	r25
     12e:	87 95       	ror	r24
     130:	2a 95       	dec	r18
     132:	e2 f7       	brpl	.-8      	; 0x12c <can_check_free+0x58>
     134:	81 70       	andi	r24, 0x01	; 1
     136:	99 27       	eor	r25, r25
     138:	21 e0       	ldi	r18, 0x01	; 1
     13a:	89 2b       	or	r24, r25
     13c:	09 f0       	breq	.+2      	; 0x140 <can_check_free+0x6c>
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	29 83       	std	Y+1, r18	; 0x01
	}

	return mob_status;
     142:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <can_cfg>:
void can_cfg(){
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	00 d0       	rcall	.+0      	; 0x154 <can_cfg+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	
	CANGCON = 0; // Disable CAN
     158:	88 ed       	ldi	r24, 0xD8	; 216
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	10 82       	st	Z, r1
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     160:	19 82       	std	Y+1, r1	; 0x01
     162:	56 c0       	rjmp	.+172    	; 0x210 <can_cfg+0xc2>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     164:	8d ee       	ldi	r24, 0xED	; 237
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	29 81       	ldd	r18, Y+1	; 0x01
     16a:	22 2f       	mov	r18, r18
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	22 95       	swap	r18
     170:	32 95       	swap	r19
     172:	30 7f       	andi	r19, 0xF0	; 240
     174:	32 27       	eor	r19, r18
     176:	20 7f       	andi	r18, 0xF0	; 240
     178:	32 27       	eor	r19, r18
     17a:	28 60       	ori	r18, 0x08	; 8
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
		CANSTMOB = 0;
     180:	8e ee       	ldi	r24, 0xEE	; 238
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	10 82       	st	Z, r1
		CANCDMOB = 0;
     188:	8f ee       	ldi	r24, 0xEF	; 239
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	fc 01       	movw	r30, r24
     18e:	10 82       	st	Z, r1
		CANIDT4 = 0;
     190:	80 ef       	ldi	r24, 0xF0	; 240
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fc 01       	movw	r30, r24
     196:	10 82       	st	Z, r1
		CANIDT3 = 0;
     198:	81 ef       	ldi	r24, 0xF1	; 241
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	10 82       	st	Z, r1
		CANIDT2 = 0;
     1a0:	82 ef       	ldi	r24, 0xF2	; 242
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	fc 01       	movw	r30, r24
     1a6:	10 82       	st	Z, r1
		CANIDT1 = 0;
     1a8:	83 ef       	ldi	r24, 0xF3	; 243
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	10 82       	st	Z, r1
		CANIDM4 = 0;
     1b0:	84 ef       	ldi	r24, 0xF4	; 244
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	fc 01       	movw	r30, r24
     1b6:	10 82       	st	Z, r1
		CANIDM3 = 0;
     1b8:	85 ef       	ldi	r24, 0xF5	; 245
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	10 82       	st	Z, r1
		CANIDM2 = 0;
     1c0:	86 ef       	ldi	r24, 0xF6	; 246
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	fc 01       	movw	r30, r24
     1c6:	10 82       	st	Z, r1
		CANIDM1 = 0;
     1c8:	87 ef       	ldi	r24, 0xF7	; 247
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	10 82       	st	Z, r1
		for (uint8_t byte = 0; byte < 8; byte++){
     1d0:	1a 82       	std	Y+2, r1	; 0x02
     1d2:	18 c0       	rjmp	.+48     	; 0x204 <can_cfg+0xb6>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
     1d4:	8d ee       	ldi	r24, 0xED	; 237
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	29 81       	ldd	r18, Y+1	; 0x01
     1da:	22 2f       	mov	r18, r18
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	22 95       	swap	r18
     1e0:	32 95       	swap	r19
     1e2:	30 7f       	andi	r19, 0xF0	; 240
     1e4:	32 27       	eor	r19, r18
     1e6:	20 7f       	andi	r18, 0xF0	; 240
     1e8:	32 27       	eor	r19, r18
     1ea:	32 2f       	mov	r19, r18
     1ec:	2a 81       	ldd	r18, Y+2	; 0x02
     1ee:	23 2b       	or	r18, r19
     1f0:	28 60       	ori	r18, 0x08	; 8
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 83       	st	Z, r18
			CANMSG = 0;
     1f6:	8a ef       	ldi	r24, 0xFA	; 250
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	10 82       	st	Z, r1
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
     1fe:	8a 81       	ldd	r24, Y+2	; 0x02
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	8a 83       	std	Y+2, r24	; 0x02
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 30       	cpi	r24, 0x08	; 8
     208:	28 f3       	brcs	.-54     	; 0x1d4 <can_cfg+0x86>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	8f 5f       	subi	r24, 0xFF	; 255
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	89 81       	ldd	r24, Y+1	; 0x01
     212:	8f 30       	cpi	r24, 0x0F	; 15
     214:	08 f4       	brcc	.+2      	; 0x218 <can_cfg+0xca>
     216:	a6 cf       	rjmp	.-180    	; 0x164 <can_cfg+0x16>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
     218:	82 ee       	ldi	r24, 0xE2	; 226
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	10 82       	st	Z, r1
	CANBT2 = 0x0C;// 500kBaud according
     220:	83 ee       	ldi	r24, 0xE3	; 227
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	2c e0       	ldi	r18, 0x0C	; 12
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
	CANBT3 = 0x36;// to Datasheet S. 267
     22a:	84 ee       	ldi	r24, 0xE4	; 228
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	26 e3       	ldi	r18, 0x36	; 54
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18

	CANGIE = 0;
     234:	8b ed       	ldi	r24, 0xDB	; 219
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	10 82       	st	Z, r1

	CANGCON |= (1<<ENASTB); // Enable CAN
     23c:	88 ed       	ldi	r24, 0xD8	; 216
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	28 ed       	ldi	r18, 0xD8	; 216
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	f9 01       	movw	r30, r18
     246:	20 81       	ld	r18, Z
     248:	22 60       	ori	r18, 0x02	; 2
     24a:	fc 01       	movw	r30, r24
     24c:	20 83       	st	Z, r18
	
	
	
}
     24e:	00 00       	nop
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <can_rx>:
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	00 d0       	rcall	.+0      	; 0x260 <can_rx+0x6>
     260:	00 d0       	rcall	.+0      	; 0x262 <can_rx+0x8>
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	9b 83       	std	Y+3, r25	; 0x03
     26a:	8a 83       	std	Y+2, r24	; 0x02
     26c:	7d 83       	std	Y+5, r23	; 0x05
     26e:	6c 83       	std	Y+4, r22	; 0x04
	
	CANPAGE = to_receive->mob_number << MOBNB0;
     270:	8d ee       	ldi	r24, 0xED	; 237
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	2a 81       	ldd	r18, Y+2	; 0x02
     276:	3b 81       	ldd	r19, Y+3	; 0x03
     278:	f9 01       	movw	r30, r18
     27a:	24 81       	ldd	r18, Z+4	; 0x04
     27c:	22 95       	swap	r18
     27e:	20 7f       	andi	r18, 0xF0	; 240
     280:	fc 01       	movw	r30, r24
     282:	20 83       	st	Z, r18
	if (can_check_free(to_receive->mob_number)){
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	84 81       	ldd	r24, Z+4	; 0x04
     28c:	23 df       	rcall	.-442    	; 0xd4 <can_check_free>
     28e:	88 23       	and	r24, r24
     290:	09 f4       	brne	.+2      	; 0x294 <can_rx+0x3a>
     292:	50 c0       	rjmp	.+160    	; 0x334 <can_rx+0xda>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
     294:	83 ef       	ldi	r24, 0xF3	; 243
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	2a 81       	ldd	r18, Y+2	; 0x02
     29a:	3b 81       	ldd	r19, Y+3	; 0x03
     29c:	f9 01       	movw	r30, r18
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	36 95       	lsr	r19
     2a4:	27 95       	ror	r18
     2a6:	36 95       	lsr	r19
     2a8:	27 95       	ror	r18
     2aa:	36 95       	lsr	r19
     2ac:	27 95       	ror	r18
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
     2b2:	82 ef       	ldi	r24, 0xF2	; 242
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	2a 81       	ldd	r18, Y+2	; 0x02
     2b8:	3b 81       	ldd	r19, Y+3	; 0x03
     2ba:	f9 01       	movw	r30, r18
     2bc:	20 81       	ld	r18, Z
     2be:	31 81       	ldd	r19, Z+1	; 0x01
     2c0:	22 95       	swap	r18
     2c2:	22 0f       	add	r18, r18
     2c4:	20 7e       	andi	r18, 0xE0	; 224
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
		CANIDT3 = 0;
     2ca:	81 ef       	ldi	r24, 0xF1	; 241
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	fc 01       	movw	r30, r24
     2d0:	10 82       	st	Z, r1
		CANIDT4 = 1<<RTRTAG;
     2d2:	80 ef       	ldi	r24, 0xF0	; 240
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	24 e0       	ldi	r18, 0x04	; 4
     2d8:	fc 01       	movw	r30, r24
     2da:	20 83       	st	Z, r18
		CANIDM1 = to_receive->mob_idmask >>3;
     2dc:	87 ef       	ldi	r24, 0xF7	; 247
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	2a 81       	ldd	r18, Y+2	; 0x02
     2e2:	3b 81       	ldd	r19, Y+3	; 0x03
     2e4:	f9 01       	movw	r30, r18
     2e6:	22 81       	ldd	r18, Z+2	; 0x02
     2e8:	33 81       	ldd	r19, Z+3	; 0x03
     2ea:	36 95       	lsr	r19
     2ec:	27 95       	ror	r18
     2ee:	36 95       	lsr	r19
     2f0:	27 95       	ror	r18
     2f2:	36 95       	lsr	r19
     2f4:	27 95       	ror	r18
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
     2fa:	86 ef       	ldi	r24, 0xF6	; 246
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	2a 81       	ldd	r18, Y+2	; 0x02
     300:	3b 81       	ldd	r19, Y+3	; 0x03
     302:	f9 01       	movw	r30, r18
     304:	22 81       	ldd	r18, Z+2	; 0x02
     306:	33 81       	ldd	r19, Z+3	; 0x03
     308:	22 95       	swap	r18
     30a:	22 0f       	add	r18, r18
     30c:	20 7e       	andi	r18, 0xE0	; 224
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
		CANIDM3 = 0;
     312:	85 ef       	ldi	r24, 0xF5	; 245
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	10 82       	st	Z, r1
		CANIDM4 = 0;
     31a:	84 ef       	ldi	r24, 0xF4	; 244
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	fc 01       	movw	r30, r24
     320:	10 82       	st	Z, r1
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
     322:	8f ee       	ldi	r24, 0xEF	; 239
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	28 ec       	ldi	r18, 0xC8	; 200
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
		CANSTMOB = 0;
     32c:	8e ee       	ldi	r24, 0xEE	; 238
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	fc 01       	movw	r30, r24
     332:	10 82       	st	Z, r1
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     334:	19 82       	std	Y+1, r1	; 0x01
     336:	24 c0       	rjmp	.+72     	; 0x380 <can_rx+0x126>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
     338:	8d ee       	ldi	r24, 0xED	; 237
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	f9 01       	movw	r30, r18
     342:	24 81       	ldd	r18, Z+4	; 0x04
     344:	22 2f       	mov	r18, r18
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	22 95       	swap	r18
     34a:	32 95       	swap	r19
     34c:	30 7f       	andi	r19, 0xF0	; 240
     34e:	32 27       	eor	r19, r18
     350:	20 7f       	andi	r18, 0xF0	; 240
     352:	32 27       	eor	r19, r18
     354:	32 2f       	mov	r19, r18
     356:	29 81       	ldd	r18, Y+1	; 0x01
     358:	23 2b       	or	r18, r19
     35a:	28 60       	ori	r18, 0x08	; 8
     35c:	fc 01       	movw	r30, r24
     35e:	20 83       	st	Z, r18
		data[byte] = CANMSG;
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	88 2f       	mov	r24, r24
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c 81       	ldd	r18, Y+4	; 0x04
     368:	3d 81       	ldd	r19, Y+5	; 0x05
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	2a ef       	ldi	r18, 0xFA	; 250
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	f9 01       	movw	r30, r18
     374:	20 81       	ld	r18, Z
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	8f 5f       	subi	r24, 0xFF	; 255
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	88 30       	cpi	r24, 0x08	; 8
     384:	c8 f2       	brcs	.-78     	; 0x338 <can_rx+0xde>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
     386:	00 00       	nop
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	00 d0       	rcall	.+0      	; 0x39e <can_tx+0x6>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <can_tx+0x8>
     3a0:	1f 92       	push	r1
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
     3a6:	9b 83       	std	Y+3, r25	; 0x03
     3a8:	8a 83       	std	Y+2, r24	; 0x02
     3aa:	7d 83       	std	Y+5, r23	; 0x05
     3ac:	6c 83       	std	Y+4, r22	; 0x04
	
	for(uint8_t byte = 0; byte <8; byte++){
     3ae:	19 82       	std	Y+1, r1	; 0x01
     3b0:	24 c0       	rjmp	.+72     	; 0x3fa <can_tx+0x62>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
     3b2:	8d ee       	ldi	r24, 0xED	; 237
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	2a 81       	ldd	r18, Y+2	; 0x02
     3b8:	3b 81       	ldd	r19, Y+3	; 0x03
     3ba:	f9 01       	movw	r30, r18
     3bc:	24 81       	ldd	r18, Z+4	; 0x04
     3be:	22 2f       	mov	r18, r18
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	22 95       	swap	r18
     3c4:	32 95       	swap	r19
     3c6:	30 7f       	andi	r19, 0xF0	; 240
     3c8:	32 27       	eor	r19, r18
     3ca:	20 7f       	andi	r18, 0xF0	; 240
     3cc:	32 27       	eor	r19, r18
     3ce:	32 2f       	mov	r19, r18
     3d0:	29 81       	ldd	r18, Y+1	; 0x01
     3d2:	23 2b       	or	r18, r19
     3d4:	28 60       	ori	r18, 0x08	; 8
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
		CANMSG = data[byte];
     3da:	8a ef       	ldi	r24, 0xFA	; 250
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	29 81       	ldd	r18, Y+1	; 0x01
     3e0:	22 2f       	mov	r18, r18
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	4c 81       	ldd	r20, Y+4	; 0x04
     3e6:	5d 81       	ldd	r21, Y+5	; 0x05
     3e8:	24 0f       	add	r18, r20
     3ea:	35 1f       	adc	r19, r21
     3ec:	f9 01       	movw	r30, r18
     3ee:	20 81       	ld	r18, Z
     3f0:	fc 01       	movw	r30, r24
     3f2:	20 83       	st	Z, r18
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	8f 5f       	subi	r24, 0xFF	; 255
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	88 30       	cpi	r24, 0x08	; 8
     3fe:	c8 f2       	brcs	.-78     	; 0x3b2 <can_tx+0x1a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
     400:	8d ee       	ldi	r24, 0xED	; 237
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	2a 81       	ldd	r18, Y+2	; 0x02
     406:	3b 81       	ldd	r19, Y+3	; 0x03
     408:	f9 01       	movw	r30, r18
     40a:	24 81       	ldd	r18, Z+4	; 0x04
     40c:	22 95       	swap	r18
     40e:	20 7f       	andi	r18, 0xF0	; 240
     410:	fc 01       	movw	r30, r24
     412:	20 83       	st	Z, r18
	if (can_check_free(to_send->mob_number)){
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	fc 01       	movw	r30, r24
     41a:	84 81       	ldd	r24, Z+4	; 0x04
     41c:	5b de       	rcall	.-842    	; 0xd4 <can_check_free>
     41e:	88 23       	and	r24, r24
     420:	09 f4       	brne	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     422:	44 c0       	rjmp	.+136    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		CANSTMOB = 0;
     424:	8e ee       	ldi	r24, 0xEE	; 238
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	fc 01       	movw	r30, r24
     42a:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
     42c:	83 ef       	ldi	r24, 0xF3	; 243
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	3b 81       	ldd	r19, Y+3	; 0x03
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	31 81       	ldd	r19, Z+1	; 0x01
     43a:	36 95       	lsr	r19
     43c:	27 95       	ror	r18
     43e:	36 95       	lsr	r19
     440:	27 95       	ror	r18
     442:	36 95       	lsr	r19
     444:	27 95       	ror	r18
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
     44a:	82 ef       	ldi	r24, 0xF2	; 242
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	2a 81       	ldd	r18, Y+2	; 0x02
     450:	3b 81       	ldd	r19, Y+3	; 0x03
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	31 81       	ldd	r19, Z+1	; 0x01
     458:	22 95       	swap	r18
     45a:	22 0f       	add	r18, r18
     45c:	20 7e       	andi	r18, 0xE0	; 224
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
		CANIDT3 = 0;
     462:	81 ef       	ldi	r24, 0xF1	; 241
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	fc 01       	movw	r30, r24
     468:	10 82       	st	Z, r1
		CANIDT4 = 0;
     46a:	80 ef       	ldi	r24, 0xF0	; 240
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	10 82       	st	Z, r1
		CANIDM1 = 0; //0b11111111;
     472:	87 ef       	ldi	r24, 0xF7	; 247
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	fc 01       	movw	r30, r24
     478:	10 82       	st	Z, r1
		CANIDM2 = 0; //0b11100000;
     47a:	86 ef       	ldi	r24, 0xF6	; 246
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	fc 01       	movw	r30, r24
     480:	10 82       	st	Z, r1
		CANIDM3 = 0;
     482:	85 ef       	ldi	r24, 0xF5	; 245
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	10 82       	st	Z, r1
		CANIDM4 = 0;
     48a:	84 ef       	ldi	r24, 0xF4	; 244
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	10 82       	st	Z, r1
		CANSTMOB = 0;
     492:	8e ee       	ldi	r24, 0xEE	; 238
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	fc 01       	movw	r30, r24
     498:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
     49a:	8f ee       	ldi	r24, 0xEF	; 239
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	28 e4       	ldi	r18, 0x48	; 72
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
		CANSTMOB = 0;
     4a4:	8e ee       	ldi	r24, 0xEE	; 238
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	10 82       	st	Z, r1
	}
	
}
     4ac:	00 00       	nop
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <can_init_messages>:
struct CAN_MOB can_AMS2_mob;
	uint8_t AMS2_databytes[8];
struct CAN_MOB can_AMS3_mob;
	uint8_t AMS3_databytes[8];

void can_init_messages(){
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
	
	can_SWC_mob.mob_id = 0x800;
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	98 e0       	ldi	r25, 0x08	; 8
     4ca:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <can_SWC_mob+0x1>
     4ce:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <can_SWC_mob>
	can_SWC_mob.mob_idmask = 0xffff;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <can_SWC_mob+0x3>
     4da:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <can_SWC_mob+0x2>
	can_SWC_mob.mob_number = 0;
     4de:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <can_SWC_mob+0x4>
	
	can_Fusebox0_mob.mob_id = 0x600;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	96 e0       	ldi	r25, 0x06	; 6
     4e6:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <can_Fusebox0_mob+0x1>
     4ea:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     4ee:	8f ef       	ldi	r24, 0xFF	; 255
     4f0:	9f ef       	ldi	r25, 0xFF	; 255
     4f2:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <can_Fusebox0_mob+0x3>
     4f6:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <can_Fusebox0_mob+0x4>
	
	can_Fusebox0_mob.mob_id = 0x601;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	96 e0       	ldi	r25, 0x06	; 6
     504:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <can_Fusebox0_mob+0x1>
     508:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <can_Fusebox0_mob>
	can_Fusebox0_mob.mob_idmask = 0xffff;
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <can_Fusebox0_mob+0x3>
     514:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <can_Fusebox0_mob+0x2>
	can_Fusebox0_mob.mob_number = 2;
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <can_Fusebox0_mob+0x4>
	
	can_SHR0_mob.mob_id = 0x400;
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	94 e0       	ldi	r25, 0x04	; 4
     522:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <can_SHR0_mob+0x1>
     526:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <can_SHR0_mob>
	can_SHR0_mob.mob_idmask = 0xffff;
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	9f ef       	ldi	r25, 0xFF	; 255
     52e:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <can_SHR0_mob+0x3>
     532:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <can_SHR0_mob+0x2>
	can_SHR0_mob.mob_number = 3;
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <can_SHR0_mob+0x4>
	
	can_SHL0_mob.mob_id = 0x410;
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <can_SHL0_mob+0x1>
     544:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <can_SHL0_mob>
	can_SHL0_mob.mob_idmask = 0xffff;
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	9f ef       	ldi	r25, 0xFF	; 255
     54c:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <can_SHL0_mob+0x3>
     550:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <can_SHL0_mob+0x2>
	can_SHL0_mob.mob_number = 4;
     554:	84 e0       	ldi	r24, 0x04	; 4
     556:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <can_SHL0_mob+0x4>
	
	can_SHB0_mob.mob_id = 0x420;
     55a:	80 e2       	ldi	r24, 0x20	; 32
     55c:	94 e0       	ldi	r25, 0x04	; 4
     55e:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <can_SHB0_mob+0x1>
     562:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <can_SHB0_mob>
	can_SHB0_mob.mob_idmask = 0xffff;
     566:	8f ef       	ldi	r24, 0xFF	; 255
     568:	9f ef       	ldi	r25, 0xFF	; 255
     56a:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <can_SHB0_mob+0x3>
     56e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <can_SHB0_mob+0x2>
	can_SHB0_mob.mob_number = 5;
     572:	85 e0       	ldi	r24, 0x05	; 5
     574:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <can_SHB0_mob+0x4>
	
	can_Logger0_mob.mob_id = 0x799;
     578:	89 e9       	ldi	r24, 0x99	; 153
     57a:	97 e0       	ldi	r25, 0x07	; 7
     57c:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <can_Logger0_mob+0x1>
     580:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <can_Logger0_mob>
	can_Logger0_mob.mob_idmask = 0xffff;
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <can_Logger0_mob+0x3>
     58c:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <can_Logger0_mob+0x2>
	can_Logger0_mob.mob_number = 6;
     590:	86 e0       	ldi	r24, 0x06	; 6
     592:	80 93 c7 02 	sts	0x02C7, r24	; 0x8002c7 <can_Logger0_mob+0x4>
	
	can_Logger1_mob.mob_id = 0x798;
     596:	88 e9       	ldi	r24, 0x98	; 152
     598:	97 e0       	ldi	r25, 0x07	; 7
     59a:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <can_Logger1_mob+0x1>
     59e:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <can_Logger1_mob>
	can_Logger1_mob.mob_idmask = 0xffff;
     5a2:	8f ef       	ldi	r24, 0xFF	; 255
     5a4:	9f ef       	ldi	r25, 0xFF	; 255
     5a6:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <can_Logger1_mob+0x3>
     5aa:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <can_Logger1_mob+0x2>
	can_Logger1_mob.mob_number = 7;
     5ae:	87 e0       	ldi	r24, 0x07	; 7
     5b0:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <can_Logger1_mob+0x4>
		
	can_Logger2_mob.mob_id = 0x797;
     5b4:	87 e9       	ldi	r24, 0x97	; 151
     5b6:	97 e0       	ldi	r25, 0x07	; 7
     5b8:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <can_Logger2_mob+0x1>
     5bc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <can_Logger2_mob>
	can_Logger2_mob.mob_idmask = 0xffff;
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f ef       	ldi	r25, 0xFF	; 255
     5c4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <can_Logger2_mob+0x3>
     5c8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <can_Logger2_mob+0x2>
	can_Logger2_mob.mob_number = 10;
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <can_Logger2_mob+0x4>
	
	can_DIC0_mob.mob_id = 0x500;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	95 e0       	ldi	r25, 0x05	; 5
     5d6:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <can_DIC0_mob+0x1>
     5da:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <can_DIC0_mob>
	can_DIC0_mob.mob_idmask = 0xffff;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	9f ef       	ldi	r25, 0xFF	; 255
     5e2:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <can_DIC0_mob+0x3>
     5e6:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <can_DIC0_mob+0x2>
	can_DIC0_mob.mob_number = 11;
     5ea:	8b e0       	ldi	r24, 0x0B	; 11
     5ec:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <can_DIC0_mob+0x4>
	
	can_AMS0_mob.mob_id = 0x200;
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <can_AMS0_mob+0x1>
     5f8:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <can_AMS0_mob>
	can_AMS0_mob.mob_idmask = 0xffff;
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	9f ef       	ldi	r25, 0xFF	; 255
     600:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <can_AMS0_mob+0x3>
     604:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <can_AMS0_mob+0x2>
	can_AMS0_mob.mob_number = 12;
     608:	8c e0       	ldi	r24, 0x0C	; 12
     60a:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <can_AMS0_mob+0x4>
	
	can_AMS1_mob.mob_id = 0x201;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <can_AMS1_mob+0x1>
     616:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <can_AMS1_mob>
	can_AMS1_mob.mob_idmask = 0xffff;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <can_AMS1_mob+0x3>
     622:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <can_AMS1_mob+0x2>
	can_AMS1_mob.mob_number = 13;
     626:	8d e0       	ldi	r24, 0x0D	; 13
     628:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <can_AMS1_mob+0x4>
	
	can_AMS2_mob.mob_id = 0x202;
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <can_AMS2_mob+0x1>
     634:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <can_AMS2_mob>
	can_AMS2_mob.mob_idmask = 0xffff;
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	9f ef       	ldi	r25, 0xFF	; 255
     63c:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <can_AMS2_mob+0x3>
     640:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <can_AMS2_mob+0x2>
	can_AMS2_mob.mob_number = 14;
     644:	8e e0       	ldi	r24, 0x0E	; 14
     646:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <can_AMS2_mob+0x4>
	
	can_AMS3_mob.mob_id = 0x203;
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <can_AMS3_mob+0x1>
     652:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <can_AMS3_mob>
	can_AMS3_mob.mob_idmask = 0xffff;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	9f ef       	ldi	r25, 0xFF	; 255
     65a:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <can_AMS3_mob+0x3>
     65e:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <can_AMS3_mob+0x2>
	can_AMS3_mob.mob_number = 15;	
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <can_AMS3_mob+0x4>
	
}	
     668:	00 00       	nop
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <CAN_recieve>:

void CAN_recieve(){
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
	
	can_rx(&can_SWC_mob, SWC_databytes);
     678:	67 ef       	ldi	r22, 0xF7	; 247
     67a:	72 e0       	ldi	r23, 0x02	; 2
     67c:	8d ee       	ldi	r24, 0xED	; 237
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	ec dd       	rcall	.-1064   	; 0x25a <can_rx>
	can_rx(&can_Fusebox0_mob, Fusebox0_databytes);
     682:	6d ed       	ldi	r22, 0xDD	; 221
     684:	72 e0       	ldi	r23, 0x02	; 2
     686:	8d e7       	ldi	r24, 0x7D	; 125
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	e7 dd       	rcall	.-1074   	; 0x25a <can_rx>
	can_rx(&can_Fusebox1_mob, Fusebox1_databytes);
     68c:	65 ed       	ldi	r22, 0xD5	; 213
     68e:	72 e0       	ldi	r23, 0x02	; 2
     690:	86 eb       	ldi	r24, 0xB6	; 182
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	e2 dd       	rcall	.-1084   	; 0x25a <can_rx>
	can_rx(&can_SHR0_mob, SHR0_databytes);
     696:	61 ea       	ldi	r22, 0xA1	; 161
     698:	72 e0       	ldi	r23, 0x02	; 2
     69a:	8a e8       	ldi	r24, 0x8A	; 138
     69c:	92 e0       	ldi	r25, 0x02	; 2
     69e:	dd dd       	rcall	.-1094   	; 0x25a <can_rx>
	can_rx(&can_SHL0_mob, SHL0_databytes);
     6a0:	6e ea       	ldi	r22, 0xAE	; 174
     6a2:	72 e0       	ldi	r23, 0x02	; 2
     6a4:	8c e9       	ldi	r24, 0x9C	; 156
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	d8 dd       	rcall	.-1104   	; 0x25a <can_rx>
	can_rx(&can_SHB0_mob, SHB0_databytes);
     6aa:	6b eb       	ldi	r22, 0xBB	; 187
     6ac:	72 e0       	ldi	r23, 0x02	; 2
     6ae:	82 ef       	ldi	r24, 0xF2	; 242
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	d3 dd       	rcall	.-1114   	; 0x25a <can_rx>
	can_rx(&can_Logger0_mob, Logger0_databytes);
     6b4:	65 ee       	ldi	r22, 0xE5	; 229
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	83 ec       	ldi	r24, 0xC3	; 195
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	ce dd       	rcall	.-1124   	; 0x25a <can_rx>
	can_rx(&can_Logger1_mob, Logger1_databytes);
     6be:	68 e5       	ldi	r22, 0x58	; 88
     6c0:	72 e0       	ldi	r23, 0x02	; 2
     6c2:	89 ea       	ldi	r24, 0xA9	; 169
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	c9 dd       	rcall	.-1134   	; 0x25a <can_rx>
	can_rx(&can_Logger2_mob, Logger2_databytes);
     6c8:	65 e6       	ldi	r22, 0x65	; 101
     6ca:	72 e0       	ldi	r23, 0x02	; 2
     6cc:	80 e6       	ldi	r24, 0x60	; 96
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	c4 dd       	rcall	.-1144   	; 0x25a <can_rx>
	can_rx(&can_AMS0_mob, AMS0_databytes);
     6d2:	64 e9       	ldi	r22, 0x94	; 148
     6d4:	72 e0       	ldi	r23, 0x02	; 2
     6d6:	89 e0       	ldi	r24, 0x09	; 9
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	bf dd       	rcall	.-1154   	; 0x25a <can_rx>
	can_rx(&can_AMS1_mob, AMS1_databytes);
     6dc:	65 e7       	ldi	r22, 0x75	; 117
     6de:	72 e0       	ldi	r23, 0x02	; 2
     6e0:	88 ec       	ldi	r24, 0xC8	; 200
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	ba dd       	rcall	.-1164   	; 0x25a <can_rx>
	can_rx(&can_AMS2_mob, AMS2_databytes);
     6e6:	62 e8       	ldi	r22, 0x82	; 130
     6e8:	72 e0       	ldi	r23, 0x02	; 2
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	b5 dd       	rcall	.-1174   	; 0x25a <can_rx>
     6f0:	6d ec       	ldi	r22, 0xCD	; 205
	can_rx(&can_AMS3_mob, AMS3_databytes);
     6f2:	72 e0       	ldi	r23, 0x02	; 2
     6f4:	8f e8       	ldi	r24, 0x8F	; 143
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	b0 dd       	rcall	.-1184   	; 0x25a <can_rx>
     6fa:	8a ea       	ldi	r24, 0xAA	; 170
     6fc:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <DIC0_databytes>
	
	//	For Testing
	
	DIC0_databytes[0] = 0b10101010;
     700:	85 e5       	ldi	r24, 0x55	; 85
     702:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <DIC0_databytes+0x1>
	DIC0_databytes[1] = 0b01010101;
     706:	8c ec       	ldi	r24, 0xCC	; 204
     708:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <DIC0_databytes+0x2>
	DIC0_databytes[2] = 0b11001100;
     70c:	83 e3       	ldi	r24, 0x33	; 51
     70e:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <DIC0_databytes+0x3>
	DIC0_databytes[3] = 0b00110011;
     712:	80 ef       	ldi	r24, 0xF0	; 240
     714:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <DIC0_databytes+0x4>
	DIC0_databytes[4] = 0b11110000;
     718:	8f e0       	ldi	r24, 0x0F	; 15
     71a:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <DIC0_databytes+0x5>
	DIC0_databytes[5] = 0b00001111;
     71e:	8f ec       	ldi	r24, 0xCF	; 207
	DIC0_databytes[6] = 0b11001111;
     720:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <DIC0_databytes+0x6>
     724:	80 e3       	ldi	r24, 0x30	; 48
	DIC0_databytes[7] = 0b00110000;
     726:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <DIC0_databytes+0x7>
     72a:	6d e6       	ldi	r22, 0x6D	; 109
	
	//	For Testing
	
	can_tx(&can_DIC0_mob, DIC0_databytes);
     72c:	72 e0       	ldi	r23, 0x02	; 2
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	32 de       	rcall	.-924    	; 0x398 <can_tx>
     734:	00 00       	nop
     736:	df 91       	pop	r29
	
}
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <CAN_put_data>:
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29

void CAN_put_data(){
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
		Logger2_databytes[7] = 96<<8;
		
		Logger0_databytes[0] = 42;
*/
		
	Rotary_Encoder_Right = SWC_databytes[0];
     744:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <SWC_databytes>
     748:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <__data_end>
	Rotary_Encoder_Left = SWC_databytes[1];
     74c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <SWC_databytes+0x1>
     750:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <Rotary_Encoder_Left>
	dsp_mde = Rotary_Encoder_Right%4;
     754:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <__data_end>
     758:	83 70       	andi	r24, 0x03	; 3
     75a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <dsp_mde>
	BrakeBias = 0;
     75e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <BrakeBias>

	APPS1 = (SHR0_databytes[1] << 8 | SHR0_databytes[0])/10;
     762:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <SHR0_databytes+0x1>
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	38 2f       	mov	r19, r24
     76c:	22 27       	eor	r18, r18
     76e:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <SHR0_databytes>
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	82 2b       	or	r24, r18
     778:	93 2b       	or	r25, r19
     77a:	2a e0       	ldi	r18, 0x0A	; 10
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	b9 01       	movw	r22, r18
     780:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     784:	cb 01       	movw	r24, r22
     786:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <APPS1>
	APPS2 = (SHR0_databytes[3] << 8 | SHR0_databytes[2])/10;
     78a:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <SHR0_databytes+0x3>
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	38 2f       	mov	r19, r24
     794:	22 27       	eor	r18, r18
     796:	80 91 a3 02 	lds	r24, 0x02A3	; 0x8002a3 <SHR0_databytes+0x2>
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	82 2b       	or	r24, r18
     7a0:	93 2b       	or	r25, r19
     7a2:	2a e0       	ldi	r18, 0x0A	; 10
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	b9 01       	movw	r22, r18
     7a8:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     7ac:	cb 01       	movw	r24, r22
     7ae:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <APPS2>
	
	BPF = (SHL0_databytes[1] << 8 | SHL0_databytes[0])/10;
     7b2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <SHL0_databytes+0x1>
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	38 2f       	mov	r19, r24
     7bc:	22 27       	eor	r18, r18
     7be:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <SHL0_databytes>
     7c2:	88 2f       	mov	r24, r24
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	82 2b       	or	r24, r18
     7c8:	93 2b       	or	r25, r19
     7ca:	2a e0       	ldi	r18, 0x0A	; 10
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	b9 01       	movw	r22, r18
     7d0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     7d4:	cb 01       	movw	r24, r22
     7d6:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <BPF>
	BPR = (SHL0_databytes[3] << 8 | SHL0_databytes[2])/10;
     7da:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <SHL0_databytes+0x3>
     7de:	88 2f       	mov	r24, r24
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	38 2f       	mov	r19, r24
     7e4:	22 27       	eor	r18, r18
     7e6:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SHL0_databytes+0x2>
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	82 2b       	or	r24, r18
     7f0:	93 2b       	or	r25, r19
     7f2:	2a e0       	ldi	r18, 0x0A	; 10
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	b9 01       	movw	r22, r18
     7f8:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     7fc:	cb 01       	movw	r24, r22
     7fe:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <BPR>
	CLT = (SHB0_databytes[1] << 8 | SHB0_databytes[0])/10;
     802:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <SHB0_databytes+0x1>
     806:	88 2f       	mov	r24, r24
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	38 2f       	mov	r19, r24
     80c:	22 27       	eor	r18, r18
     80e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <SHB0_databytes>
     812:	88 2f       	mov	r24, r24
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	82 2b       	or	r24, r18
     818:	93 2b       	or	r25, r19
     81a:	2a e0       	ldi	r18, 0x0A	; 10
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	b9 01       	movw	r22, r18
     820:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     824:	cb 01       	movw	r24, r22
     826:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <CLT+0x1>
     82a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <CLT>

	LVSVoltage = (Fusebox0_databytes[1] << 8 | Fusebox0_databytes[0])/40;
     82e:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <Fusebox0_databytes+0x1>
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	38 2f       	mov	r19, r24
     838:	22 27       	eor	r18, r18
     83a:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <Fusebox0_databytes>
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	82 2b       	or	r24, r18
     844:	93 2b       	or	r25, r19
     846:	28 e2       	ldi	r18, 0x28	; 40
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     850:	cb 01       	movw	r24, r22
     852:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <LVSVoltage+0x1>
     856:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <LVSVoltage>
	SDCIFB = (Fusebox1_databytes[1] << 8 | Fusebox1_databytes[0]);
     85a:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <Fusebox1_databytes+0x1>
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	98 2f       	mov	r25, r24
     864:	88 27       	eor	r24, r24
     866:	98 2f       	mov	r25, r24
     868:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <Fusebox1_databytes>
     86c:	89 2b       	or	r24, r25
     86e:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <SDCIFB>
	FRO = (Fusebox1_databytes[3] << 8 | Fusebox1_databytes[2]);
     872:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <Fusebox1_databytes+0x3>
     876:	88 2f       	mov	r24, r24
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	38 2f       	mov	r19, r24
     87c:	22 27       	eor	r18, r18
     87e:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <Fusebox1_databytes+0x2>
     882:	88 2f       	mov	r24, r24
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	82 2b       	or	r24, r18
     888:	93 2b       	or	r25, r19
     88a:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <FRO+0x1>
     88e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <FRO>
	
	AMS_ERR = AMS0_databytes[0];
     892:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <AMS0_databytes>
     896:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <AMS_ERR>
	ERR_info = (AMS0_databytes[2] << 8 | AMS0_databytes[1]);
     89a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <AMS0_databytes+0x2>
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	38 2f       	mov	r19, r24
     8a4:	22 27       	eor	r18, r18
     8a6:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <AMS0_databytes+0x1>
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	82 2b       	or	r24, r18
     8b0:	93 2b       	or	r25, r19
     8b2:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <ERR_info+0x1>
     8b6:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <ERR_info>
	IMD_ERR = AMS0_databytes[4];
     8ba:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <AMS0_databytes+0x4>
     8be:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <IMD_ERR>
	TSVoltage = (AMS1_databytes[1] << 8 | AMS1_databytes[0])/6;
     8c2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <AMS1_databytes+0x1>
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	38 2f       	mov	r19, r24
     8cc:	22 27       	eor	r18, r18
     8ce:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <AMS1_databytes>
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	82 2b       	or	r24, r18
     8d8:	93 2b       	or	r25, r19
     8da:	26 e0       	ldi	r18, 0x06	; 6
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	b9 01       	movw	r22, r18
     8e0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__divmodhi4>
     8e4:	cb 01       	movw	r24, r22
     8e6:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <TSVoltage+0x1>
     8ea:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <TSVoltage>
	SOC = (AMS1_databytes[5] << 8 | AMS1_databytes[4]);
     8ee:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <AMS1_databytes+0x5>
     8f2:	88 2f       	mov	r24, r24
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	38 2f       	mov	r19, r24
     8f8:	22 27       	eor	r18, r18
     8fa:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <AMS1_databytes+0x4>
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	82 2b       	or	r24, r18
     904:	93 2b       	or	r25, r19
     906:	90 93 d9 01 	sts	0x01D9, r25	; 0x8001d9 <SOC+0x1>
     90a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <SOC>
	AccumulatorTemperature = (AMS2_databytes[7] << 8 | AMS2_databytes[6]);
     90e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <AMS2_databytes+0x7>
     912:	88 2f       	mov	r24, r24
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	38 2f       	mov	r19, r24
     918:	22 27       	eor	r18, r18
     91a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <AMS2_databytes+0x6>
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	82 2b       	or	r24, r18
     924:	93 2b       	or	r25, r19
     926:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <AccumulatorTemperature+0x1>
     92a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <AccumulatorTemperature>
	TS_RDY = AMS3_databytes[0];
     92e:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <AMS3_databytes>
     932:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <TS_RDY>

	//For some weird reason the length of the variable that gets shifted seems to matter, atleast in this usecase, with for e.g BPF etc it works fine which may be becouse we are actually only transmitting an 8 bit value
	//what happens is we shift an 8bit uint by 8 to the left and want to save it in an 32bit uint, we put for e.g 135 in and should get 34560. instead we are getting 4294965720 which is definitly also not an 8bit value
	//i do not know what is happening here but shifting a variable beyond its own limit seems to do weird stuff. therefore this stupid hacky fix with putting the 8bit integers into 32bit integer and than whacking it together
	
	Laptime_1 = Logger0_databytes[1];
     936:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <Logger0_databytes+0x1>
     93a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <Laptime_1>
	Laptime_2 = Logger0_databytes[2];
     93e:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <Logger0_databytes+0x2>
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <Laptime_2+0x1>
     94a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <Laptime_2>
	Laptime_3 = Logger0_databytes[3];
     94e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <Logger0_databytes+0x3>
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <Laptime_3>
     95e:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <Laptime_3+0x1>
     962:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <Laptime_3+0x2>
     966:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <Laptime_3+0x3>
	Laptime_4 = Logger0_databytes[4];
     96a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <Logger0_databytes+0x4>
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e0       	ldi	r26, 0x00	; 0
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <Laptime_4>
     97a:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <Laptime_4+0x1>
     97e:	a0 93 f9 01 	sts	0x01F9, r26	; 0x8001f9 <Laptime_4+0x2>
     982:	b0 93 fa 01 	sts	0x01FA, r27	; 0x8001fa <Laptime_4+0x3>
	
	Laptime = Laptime_1 | Laptime_2 << 8 | Laptime_3 << 16 | Laptime_4 << 24;
     986:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <Laptime_1>
     98a:	28 2f       	mov	r18, r24
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <Laptime_2>
     992:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <Laptime_2+0x1>
     996:	98 2f       	mov	r25, r24
     998:	88 27       	eor	r24, r24
     99a:	82 2b       	or	r24, r18
     99c:	93 2b       	or	r25, r19
     99e:	9c 01       	movw	r18, r24
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <Laptime_3>
     9a8:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <Laptime_3+0x1>
     9ac:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <Laptime_3+0x2>
     9b0:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <Laptime_3+0x3>
     9b4:	dc 01       	movw	r26, r24
     9b6:	99 27       	eor	r25, r25
     9b8:	88 27       	eor	r24, r24
     9ba:	28 2b       	or	r18, r24
     9bc:	39 2b       	or	r19, r25
     9be:	4a 2b       	or	r20, r26
     9c0:	5b 2b       	or	r21, r27
     9c2:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <Laptime_4>
     9c6:	90 91 f8 01 	lds	r25, 0x01F8	; 0x8001f8 <Laptime_4+0x1>
     9ca:	a0 91 f9 01 	lds	r26, 0x01F9	; 0x8001f9 <Laptime_4+0x2>
     9ce:	b0 91 fa 01 	lds	r27, 0x01FA	; 0x8001fa <Laptime_4+0x3>
     9d2:	b8 2f       	mov	r27, r24
     9d4:	aa 27       	eor	r26, r26
     9d6:	99 27       	eor	r25, r25
     9d8:	88 27       	eor	r24, r24
     9da:	82 2b       	or	r24, r18
     9dc:	93 2b       	or	r25, r19
     9de:	a4 2b       	or	r26, r20
     9e0:	b5 2b       	or	r27, r21
     9e2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <Laptime>
     9e6:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <Laptime+0x1>
     9ea:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <Laptime+0x2>
     9ee:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <Laptime+0x3>
	
	Besttime_1 = Logger1_databytes[0];
     9f2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <Logger1_databytes>
     9f6:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <Besttime_1>
	Besttime_2 = Logger1_databytes[1];
     9fa:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <Logger1_databytes+0x1>
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Besttime_2+0x1>
     a06:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Besttime_2>
	Besttime_3 = Logger1_databytes[2];
     a0a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <Logger1_databytes+0x2>
     a0e:	88 2f       	mov	r24, r24
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Besttime_3>
     a1a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Besttime_3+0x1>
     a1e:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <Besttime_3+0x2>
     a22:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <Besttime_3+0x3>
	Besttime_4 = Logger1_databytes[3];
     a26:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <Logger1_databytes+0x3>
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a0 e0       	ldi	r26, 0x00	; 0
     a30:	b0 e0       	ldi	r27, 0x00	; 0
     a32:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Besttime_4>
     a36:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <Besttime_4+0x1>
     a3a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <Besttime_4+0x2>
     a3e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <Besttime_4+0x3>
	
	Besttime = Besttime_1 | Besttime_2 << 8 | Besttime_3 << 16 | Besttime_4 << 24;
     a42:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <Besttime_1>
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Besttime_2>
     a4e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Besttime_2+0x1>
     a52:	98 2f       	mov	r25, r24
     a54:	88 27       	eor	r24, r24
     a56:	82 2b       	or	r24, r18
     a58:	93 2b       	or	r25, r19
     a5a:	9c 01       	movw	r18, r24
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <Besttime_3>
     a64:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <Besttime_3+0x1>
     a68:	a0 91 04 02 	lds	r26, 0x0204	; 0x800204 <Besttime_3+0x2>
     a6c:	b0 91 05 02 	lds	r27, 0x0205	; 0x800205 <Besttime_3+0x3>
     a70:	dc 01       	movw	r26, r24
     a72:	99 27       	eor	r25, r25
     a74:	88 27       	eor	r24, r24
     a76:	28 2b       	or	r18, r24
     a78:	39 2b       	or	r19, r25
     a7a:	4a 2b       	or	r20, r26
     a7c:	5b 2b       	or	r21, r27
     a7e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Besttime_4>
     a82:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Besttime_4+0x1>
     a86:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <Besttime_4+0x2>
     a8a:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <Besttime_4+0x3>
     a8e:	b8 2f       	mov	r27, r24
     a90:	aa 27       	eor	r26, r26
     a92:	99 27       	eor	r25, r25
     a94:	88 27       	eor	r24, r24
     a96:	82 2b       	or	r24, r18
     a98:	93 2b       	or	r25, r19
     a9a:	a4 2b       	or	r26, r20
     a9c:	b5 2b       	or	r27, r21
     a9e:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Besttime>
     aa2:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Besttime+0x1>
     aa6:	a0 93 fd 01 	sts	0x01FD, r26	; 0x8001fd <Besttime+0x2>
     aaa:	b0 93 fe 01 	sts	0x01FE, r27	; 0x8001fe <Besttime+0x3>
	
	Pred_time_1 = Logger1_databytes[4];
     aae:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <Logger1_databytes+0x4>
     ab2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Pred_time_1>
	Pred_time_2 = Logger1_databytes[5];
     ab6:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <Logger1_databytes+0x5>
     aba:	88 2f       	mov	r24, r24
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <Pred_time_2+0x1>
     ac2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Pred_time_2>
	Pred_time_3 = Logger1_databytes[6];
     ac6:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <Logger1_databytes+0x6>
     aca:	88 2f       	mov	r24, r24
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Pred_time_3>
     ad6:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Pred_time_3+0x1>
     ada:	a0 93 13 02 	sts	0x0213, r26	; 0x800213 <Pred_time_3+0x2>
     ade:	b0 93 14 02 	sts	0x0214, r27	; 0x800214 <Pred_time_3+0x3>
	Pred_time_4 = Logger1_databytes[7];
     ae2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <Logger1_databytes+0x7>
     ae6:	88 2f       	mov	r24, r24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Pred_time_4>
     af2:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Pred_time_4+0x1>
     af6:	a0 93 17 02 	sts	0x0217, r26	; 0x800217 <Pred_time_4+0x2>
     afa:	b0 93 18 02 	sts	0x0218, r27	; 0x800218 <Pred_time_4+0x3>
	
	Pred_time = Pred_time_1 | Pred_time_2 << 8 | Pred_time_3 << 16 | Pred_time_4 << 24;
     afe:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Pred_time_1>
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Pred_time_2>
     b0a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <Pred_time_2+0x1>
     b0e:	98 2f       	mov	r25, r24
     b10:	88 27       	eor	r24, r24
     b12:	82 2b       	or	r24, r18
     b14:	93 2b       	or	r25, r19
     b16:	9c 01       	movw	r18, r24
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Pred_time_3>
     b20:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Pred_time_3+0x1>
     b24:	a0 91 13 02 	lds	r26, 0x0213	; 0x800213 <Pred_time_3+0x2>
     b28:	b0 91 14 02 	lds	r27, 0x0214	; 0x800214 <Pred_time_3+0x3>
     b2c:	dc 01       	movw	r26, r24
     b2e:	99 27       	eor	r25, r25
     b30:	88 27       	eor	r24, r24
     b32:	28 2b       	or	r18, r24
     b34:	39 2b       	or	r19, r25
     b36:	4a 2b       	or	r20, r26
     b38:	5b 2b       	or	r21, r27
     b3a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Pred_time_4>
     b3e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Pred_time_4+0x1>
     b42:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <Pred_time_4+0x2>
     b46:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <Pred_time_4+0x3>
     b4a:	b8 2f       	mov	r27, r24
     b4c:	aa 27       	eor	r26, r26
     b4e:	99 27       	eor	r25, r25
     b50:	88 27       	eor	r24, r24
     b52:	82 2b       	or	r24, r18
     b54:	93 2b       	or	r25, r19
     b56:	a4 2b       	or	r26, r20
     b58:	b5 2b       	or	r27, r21
     b5a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Pred_time>
     b5e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Pred_time+0x1>
     b62:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <Pred_time+0x2>
     b66:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <Pred_time+0x3>
	
	ODO = Logger0_databytes[6] << 8 | Logger0_databytes[5];
     b6a:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <Logger0_databytes+0x6>
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	38 2f       	mov	r19, r24
     b74:	22 27       	eor	r18, r18
     b76:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <Logger0_databytes+0x5>
     b7a:	88 2f       	mov	r24, r24
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	82 2b       	or	r24, r18
     b80:	93 2b       	or	r25, r19
     b82:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <ODO+0x1>
     b86:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <ODO>
	GPS_Speed = Logger2_databytes[7] << 8 | Logger2_databytes[6];
     b8a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <Logger2_databytes+0x7>
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	38 2f       	mov	r19, r24
     b94:	22 27       	eor	r18, r18
     b96:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <Logger2_databytes+0x6>
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	82 2b       	or	r24, r18
     ba0:	93 2b       	or	r25, r19
     ba2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <GPS_Speed+0x1>
     ba6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <GPS_Speed>
	LapNumber = Logger0_databytes[0];	
     baa:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <Logger0_databytes>
     bae:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <LapNumber>
	
	DIC0_databytes[0] = LC_Active;
     bb2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <LC_Active>
     bb6:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <difftime>
     bba:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <DIC0_databytes>
     bbe:	00 00       	nop
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <calc_BB>:
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <calc_BB+0xe>
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	6a 83       	std	Y+2, r22	; 0x02
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	8a 30       	cpi	r24, 0x0A	; 10
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <calc_BB+0x1e>
     be2:	59 c0       	rjmp	.+178    	; 0xc96 <calc_BB+0xd0>
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	88 2f       	mov	r24, r24
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	09 2e       	mov	r0, r25
     bf6:	00 0c       	add	r0, r0
     bf8:	aa 0b       	sbc	r26, r26
     bfa:	bb 0b       	sbc	r27, r27
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__floatsisf>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c0c:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c10:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c14:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	09 2e       	mov	r0, r25
     c20:	00 0c       	add	r0, r0
     c22:	aa 0b       	sbc	r26, r26
     c24:	bb 0b       	sbc	r27, r27
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <__floatsisf>
     c2e:	7b 01       	movw	r14, r22
     c30:	8c 01       	movw	r16, r24
     c32:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c36:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c3a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c3e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c42:	9c 01       	movw	r18, r24
     c44:	ad 01       	movw	r20, r26
     c46:	c8 01       	movw	r24, r16
     c48:	b7 01       	movw	r22, r14
     c4a:	0e 94 4c 13 	call	0x2698	; 0x2698 <__divsf3>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c56:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c5a:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c5e:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c62:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c66:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c6a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     c6e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	48 ec       	ldi	r20, 0xC8	; 200
     c78:	52 e4       	ldi	r21, 0x42	; 66
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <__mulsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <BB>
     c8a:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <BB+0x1>
     c8e:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <BB+0x2>
     c92:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <BB+0x3>
     c96:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <BB>
     c9a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <BB+0x1>
     c9e:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <BB+0x2>
     ca2:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <BB+0x3>
     ca6:	bc 01       	movw	r22, r24
     ca8:	cd 01       	movw	r24, r26
     caa:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fixunssfsi>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	08 95       	ret

00000cc4 <string_to_digit>:
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	27 97       	sbiw	r28, 0x07	; 7
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	8b 83       	std	Y+3, r24	; 0x03
     cda:	7d 83       	std	Y+5, r23	; 0x05
     cdc:	6c 83       	std	Y+4, r22	; 0x04
     cde:	4e 83       	std	Y+6, r20	; 0x06
     ce0:	2f 83       	std	Y+7, r18	; 0x07
     ce2:	1a 82       	std	Y+2, r1	; 0x02
     ce4:	19 82       	std	Y+1, r1	; 0x01
     ce6:	2e c0       	rjmp	.+92     	; 0xd44 <string_to_digit+0x80>
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	68 2f       	mov	r22, r24
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	8f 81       	ldd	r24, Y+7	; 0x07
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	48 2f       	mov	r20, r24
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	84 0f       	add	r24, r20
     d00:	95 1f       	adc	r25, r21
     d02:	ec 81       	ldd	r30, Y+4	; 0x04
     d04:	fd 81       	ldd	r31, Y+5	; 0x05
     d06:	49 81       	ldd	r20, Y+1	; 0x01
     d08:	5a 81       	ldd	r21, Y+2	; 0x02
     d0a:	4e 0f       	add	r20, r30
     d0c:	5f 1f       	adc	r21, r31
     d0e:	da 01       	movw	r26, r20
     d10:	ec 91       	ld	r30, X
     d12:	f4 e1       	ldi	r31, 0x14	; 20
     d14:	f2 9f       	mul	r31, r18
     d16:	a0 01       	movw	r20, r0
     d18:	f3 9f       	mul	r31, r19
     d1a:	50 0d       	add	r21, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	f0 e5       	ldi	r31, 0x50	; 80
     d20:	f6 9f       	mul	r31, r22
     d22:	90 01       	movw	r18, r0
     d24:	f7 9f       	mul	r31, r23
     d26:	30 0d       	add	r19, r0
     d28:	11 24       	eor	r1, r1
     d2a:	24 0f       	add	r18, r20
     d2c:	35 1f       	adc	r19, r21
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	82 5f       	subi	r24, 0xF2	; 242
     d34:	9c 4f       	sbci	r25, 0xFC	; 252
     d36:	dc 01       	movw	r26, r24
     d38:	ec 93       	st	X, r30
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	9d 81       	ldd	r25, Y+5	; 0x05
     d48:	0e 94 29 15 	call	0x2a52	; 0x2a52 <strlen>
     d4c:	9c 01       	movw	r18, r24
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	82 17       	cp	r24, r18
     d54:	93 07       	cpc	r25, r19
     d56:	40 f2       	brcs	.-112    	; 0xce8 <string_to_digit+0x24>
     d58:	00 00       	nop
     d5a:	27 96       	adiw	r28, 0x07	; 7
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <num_to_digit>:
     d6c:	ef 92       	push	r14
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	62 97       	sbiw	r28, 0x12	; 18
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	8a 87       	std	Y+10, r24	; 0x0a
     d88:	7c 87       	std	Y+12, r23	; 0x0c
     d8a:	6b 87       	std	Y+11, r22	; 0x0b
     d8c:	4d 87       	std	Y+13, r20	; 0x0d
     d8e:	2e 87       	std	Y+14, r18	; 0x0e
     d90:	0f 87       	std	Y+15, r16	; 0x0f
     d92:	e8 8a       	std	Y+16, r14	; 0x10
     d94:	4d b7       	in	r20, 0x3d	; 61
     d96:	5e b7       	in	r21, 0x3e	; 62
     d98:	5a 8b       	std	Y+18, r21	; 0x12
     d9a:	49 8b       	std	Y+17, r20	; 0x11
     d9c:	8d b7       	in	r24, 0x3d	; 61
     d9e:	9e b7       	in	r25, 0x3e	; 62
     da0:	8c 01       	movw	r16, r24
     da2:	2e 85       	ldd	r18, Y+14	; 0x0e
     da4:	82 2f       	mov	r24, r18
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	8d 83       	std	Y+5, r24	; 0x05
     dae:	82 2f       	mov	r24, r18
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	6d b7       	in	r22, 0x3d	; 61
     db4:	7e b7       	in	r23, 0x3e	; 62
     db6:	68 1b       	sub	r22, r24
     db8:	79 0b       	sbc	r23, r25
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	7e bf       	out	0x3e, r23	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	6d bf       	out	0x3d, r22	; 61
     dc4:	8d b7       	in	r24, 0x3d	; 61
     dc6:	9e b7       	in	r25, 0x3e	; 62
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	98 87       	std	Y+8, r25	; 0x08
     dcc:	8f 83       	std	Y+7, r24	; 0x07
     dce:	19 82       	std	Y+1, r1	; 0x01
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	40 c0       	rjmp	.+128    	; 0xe56 <num_to_digit+0xea>
     dd6:	4b 85       	ldd	r20, Y+11	; 0x0b
     dd8:	5c 85       	ldd	r21, Y+12	; 0x0c
     dda:	9a 01       	movw	r18, r20
     ddc:	ad ec       	ldi	r26, 0xCD	; 205
     dde:	bc ec       	ldi	r27, 0xCC	; 204
     de0:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
     de4:	96 95       	lsr	r25
     de6:	87 95       	ror	r24
     de8:	96 95       	lsr	r25
     dea:	87 95       	ror	r24
     dec:	96 95       	lsr	r25
     dee:	87 95       	ror	r24
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	9c 01       	movw	r18, r24
     df6:	22 0f       	add	r18, r18
     df8:	33 1f       	adc	r19, r19
     dfa:	22 0f       	add	r18, r18
     dfc:	33 1f       	adc	r19, r19
     dfe:	82 0f       	add	r24, r18
     e00:	93 1f       	adc	r25, r19
     e02:	da 01       	movw	r26, r20
     e04:	a8 1b       	sub	r26, r24
     e06:	b9 0b       	sbc	r27, r25
     e08:	cd 01       	movw	r24, r26
     e0a:	89 87       	std	Y+9, r24	; 0x09
     e0c:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	e8 1b       	sub	r30, r24
     e1c:	f9 0b       	sbc	r31, r25
     e1e:	cf 01       	movw	r24, r30
     e20:	29 85       	ldd	r18, Y+9	; 0x09
     e22:	40 e3       	ldi	r20, 0x30	; 48
     e24:	42 0f       	add	r20, r18
     e26:	2f 81       	ldd	r18, Y+7	; 0x07
     e28:	38 85       	ldd	r19, Y+8	; 0x08
     e2a:	82 0f       	add	r24, r18
     e2c:	93 1f       	adc	r25, r19
     e2e:	dc 01       	movw	r26, r24
     e30:	4c 93       	st	X, r20
     e32:	8b 85       	ldd	r24, Y+11	; 0x0b
     e34:	9c 85       	ldd	r25, Y+12	; 0x0c
     e36:	9c 01       	movw	r18, r24
     e38:	ad ec       	ldi	r26, 0xCD	; 205
     e3a:	bc ec       	ldi	r27, 0xCC	; 204
     e3c:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
     e40:	96 95       	lsr	r25
     e42:	87 95       	ror	r24
     e44:	96 95       	lsr	r25
     e46:	87 95       	ror	r24
     e48:	96 95       	lsr	r25
     e4a:	87 95       	ror	r24
     e4c:	9c 87       	std	Y+12, r25	; 0x0c
     e4e:	8b 87       	std	Y+11, r24	; 0x0b
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	8e 85       	ldd	r24, Y+14	; 0x0e
     e5a:	89 17       	cp	r24, r25
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <num_to_digit+0xf4>
     e5e:	bb cf       	rjmp	.-138    	; 0xdd6 <num_to_digit+0x6a>
     e60:	1b 82       	std	Y+3, r1	; 0x03
     e62:	1c 82       	std	Y+4, r1	; 0x04
     e64:	c8 c0       	rjmp	.+400    	; 0xff6 <num_to_digit+0x28a>
     e66:	8c 81       	ldd	r24, Y+4	; 0x04
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	2f 81       	ldd	r18, Y+7	; 0x07
     e6e:	38 85       	ldd	r19, Y+8	; 0x08
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	80 33       	cpi	r24, 0x30	; 48
     e7a:	11 f0       	breq	.+4      	; 0xe80 <num_to_digit+0x114>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	8b 83       	std	Y+3, r24	; 0x03
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	88 23       	and	r24, r24
     e86:	09 f0       	breq	.+2      	; 0xe8a <num_to_digit+0x11e>
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	8e 85       	ldd	r24, Y+14	; 0x0e
     e92:	48 2f       	mov	r20, r24
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	88 2f       	mov	r24, r24
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	da 01       	movw	r26, r20
     e9e:	a8 1b       	sub	r26, r24
     ea0:	b9 0b       	sbc	r27, r25
     ea2:	cd 01       	movw	r24, r26
     ea4:	02 97       	sbiw	r24, 0x02	; 2
     ea6:	41 e0       	ldi	r20, 0x01	; 1
     ea8:	28 17       	cp	r18, r24
     eaa:	39 07       	cpc	r19, r25
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <num_to_digit+0x144>
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	86 2f       	mov	r24, r22
     eb2:	84 23       	and	r24, r20
     eb4:	88 23       	and	r24, r24
     eb6:	51 f0       	breq	.+20     	; 0xecc <num_to_digit+0x160>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	2f 81       	ldd	r18, Y+7	; 0x07
     ec0:	38 85       	ldd	r19, Y+8	; 0x08
     ec2:	82 0f       	add	r24, r18
     ec4:	93 1f       	adc	r25, r19
     ec6:	20 e1       	ldi	r18, 0x10	; 16
     ec8:	fc 01       	movw	r30, r24
     eca:	20 83       	st	Z, r18
     ecc:	8c 81       	ldd	r24, Y+4	; 0x04
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ed4:	48 2f       	mov	r20, r24
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	ba 01       	movw	r22, r20
     ee0:	68 1b       	sub	r22, r24
     ee2:	79 0b       	sbc	r23, r25
     ee4:	cb 01       	movw	r24, r22
     ee6:	28 17       	cp	r18, r24
     ee8:	39 07       	cpc	r19, r25
     eea:	64 f5       	brge	.+88     	; 0xf44 <num_to_digit+0x1d8>
     eec:	8a 85       	ldd	r24, Y+10	; 0x0a
     eee:	68 2f       	mov	r22, r24
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	88 89       	ldd	r24, Y+16	; 0x10
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
     efa:	48 2f       	mov	r20, r24
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	84 0f       	add	r24, r20
     f06:	95 1f       	adc	r25, r21
     f08:	4c 81       	ldd	r20, Y+4	; 0x04
     f0a:	44 2f       	mov	r20, r20
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	af 81       	ldd	r26, Y+7	; 0x07
     f10:	b8 85       	ldd	r27, Y+8	; 0x08
     f12:	4a 0f       	add	r20, r26
     f14:	5b 1f       	adc	r21, r27
     f16:	fa 01       	movw	r30, r20
     f18:	a0 81       	ld	r26, Z
     f1a:	b4 e1       	ldi	r27, 0x14	; 20
     f1c:	b2 9f       	mul	r27, r18
     f1e:	a0 01       	movw	r20, r0
     f20:	b3 9f       	mul	r27, r19
     f22:	50 0d       	add	r21, r0
     f24:	11 24       	eor	r1, r1
     f26:	b0 e5       	ldi	r27, 0x50	; 80
     f28:	b6 9f       	mul	r27, r22
     f2a:	90 01       	movw	r18, r0
     f2c:	b7 9f       	mul	r27, r23
     f2e:	30 0d       	add	r19, r0
     f30:	11 24       	eor	r1, r1
     f32:	24 0f       	add	r18, r20
     f34:	35 1f       	adc	r19, r21
     f36:	82 0f       	add	r24, r18
     f38:	93 1f       	adc	r25, r19
     f3a:	82 5f       	subi	r24, 0xF2	; 242
     f3c:	9c 4f       	sbci	r25, 0xFC	; 252
     f3e:	fc 01       	movw	r30, r24
     f40:	a0 83       	st	Z, r26
     f42:	56 c0       	rjmp	.+172    	; 0xff0 <num_to_digit+0x284>
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 23       	and	r24, r24
     f48:	29 f5       	brne	.+74     	; 0xf94 <num_to_digit+0x228>
     f4a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f4c:	68 2f       	mov	r22, r24
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	88 89       	ldd	r24, Y+16	; 0x10
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	8f 85       	ldd	r24, Y+15	; 0x0f
     f58:	48 2f       	mov	r20, r24
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	84 0f       	add	r24, r20
     f64:	95 1f       	adc	r25, r21
     f66:	a4 e1       	ldi	r26, 0x14	; 20
     f68:	a2 9f       	mul	r26, r18
     f6a:	a0 01       	movw	r20, r0
     f6c:	a3 9f       	mul	r26, r19
     f6e:	50 0d       	add	r21, r0
     f70:	11 24       	eor	r1, r1
     f72:	a0 e5       	ldi	r26, 0x50	; 80
     f74:	a6 9f       	mul	r26, r22
     f76:	90 01       	movw	r18, r0
     f78:	a7 9f       	mul	r26, r23
     f7a:	30 0d       	add	r19, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	24 0f       	add	r18, r20
     f80:	35 1f       	adc	r19, r21
     f82:	82 0f       	add	r24, r18
     f84:	93 1f       	adc	r25, r19
     f86:	82 5f       	subi	r24, 0xF2	; 242
     f88:	9c 4f       	sbci	r25, 0xFC	; 252
     f8a:	2e e2       	ldi	r18, 0x2E	; 46
     f8c:	dc 01       	movw	r26, r24
     f8e:	2c 93       	st	X, r18
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	8a 85       	ldd	r24, Y+10	; 0x0a
     f96:	68 2f       	mov	r22, r24
     f98:	70 e0       	ldi	r23, 0x00	; 0
     f9a:	88 89       	ldd	r24, Y+16	; 0x10
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8f 85       	ldd	r24, Y+15	; 0x0f
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	ac 01       	movw	r20, r24
     fa8:	4f 5f       	subi	r20, 0xFF	; 255
     faa:	5f 4f       	sbci	r21, 0xFF	; 255
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	84 0f       	add	r24, r20
     fb4:	95 1f       	adc	r25, r21
     fb6:	4c 81       	ldd	r20, Y+4	; 0x04
     fb8:	44 2f       	mov	r20, r20
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	af 81       	ldd	r26, Y+7	; 0x07
     fbe:	b8 85       	ldd	r27, Y+8	; 0x08
     fc0:	4a 0f       	add	r20, r26
     fc2:	5b 1f       	adc	r21, r27
     fc4:	fa 01       	movw	r30, r20
     fc6:	a0 81       	ld	r26, Z
     fc8:	b4 e1       	ldi	r27, 0x14	; 20
     fca:	b2 9f       	mul	r27, r18
     fcc:	a0 01       	movw	r20, r0
     fce:	b3 9f       	mul	r27, r19
     fd0:	50 0d       	add	r21, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	b0 e5       	ldi	r27, 0x50	; 80
     fd6:	b6 9f       	mul	r27, r22
     fd8:	90 01       	movw	r18, r0
     fda:	b7 9f       	mul	r27, r23
     fdc:	30 0d       	add	r19, r0
     fde:	11 24       	eor	r1, r1
     fe0:	24 0f       	add	r18, r20
     fe2:	35 1f       	adc	r19, r21
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	82 5f       	subi	r24, 0xF2	; 242
     fea:	9c 4f       	sbci	r25, 0xFC	; 252
     fec:	fc 01       	movw	r30, r24
     fee:	a0 83       	st	Z, r26
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	8c 83       	std	Y+4, r24	; 0x04
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	8e 85       	ldd	r24, Y+14	; 0x0e
     ffa:	98 17       	cp	r25, r24
     ffc:	08 f4       	brcc	.+2      	; 0x1000 <num_to_digit+0x294>
     ffe:	33 cf       	rjmp	.-410    	; 0xe66 <num_to_digit+0xfa>
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	1e bf       	out	0x3e, r17	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0d bf       	out	0x3d, r16	; 61
    100a:	00 00       	nop
    100c:	49 89       	ldd	r20, Y+17	; 0x11
    100e:	5a 89       	ldd	r21, Y+18	; 0x12
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	5e bf       	out	0x3e, r21	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	4d bf       	out	0x3d, r20	; 61
    101a:	62 96       	adiw	r28, 0x12	; 18
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <time_to_digit>:
    1032:	0f 93       	push	r16
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	63 97       	sbiw	r28, 0x13	; 19
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	8d 87       	std	Y+13, r24	; 0x0d
    104a:	4e 87       	std	Y+14, r20	; 0x0e
    104c:	5f 87       	std	Y+15, r21	; 0x0f
    104e:	68 8b       	std	Y+16, r22	; 0x10
    1050:	79 8b       	std	Y+17, r23	; 0x11
    1052:	2a 8b       	std	Y+18, r18	; 0x12
    1054:	0b 8b       	std	Y+19, r16	; 0x13
    1056:	8e 85       	ldd	r24, Y+14	; 0x0e
    1058:	9f 85       	ldd	r25, Y+15	; 0x0f
    105a:	a8 89       	ldd	r26, Y+16	; 0x10
    105c:	b9 89       	ldd	r27, Y+17	; 0x11
    105e:	28 ee       	ldi	r18, 0xE8	; 232
    1060:	33 e0       	ldi	r19, 0x03	; 3
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__udivmodsi4>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	8e 85       	ldd	r24, Y+14	; 0x0e
    1078:	9f 85       	ldd	r25, Y+15	; 0x0f
    107a:	a8 89       	ldd	r26, Y+16	; 0x10
    107c:	b9 89       	ldd	r27, Y+17	; 0x11
    107e:	28 ee       	ldi	r18, 0xE8	; 232
    1080:	33 e0       	ldi	r19, 0x03	; 3
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__udivmodsi4>
    108e:	da 01       	movw	r26, r20
    1090:	c9 01       	movw	r24, r18
    1092:	9c 83       	std	Y+4, r25	; 0x04
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	9c 01       	movw	r18, r24
    109c:	a9 e8       	ldi	r26, 0x89	; 137
    109e:	b8 e8       	ldi	r27, 0x88	; 136
    10a0:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	92 95       	swap	r25
    10aa:	82 95       	swap	r24
    10ac:	8f 70       	andi	r24, 0x0F	; 15
    10ae:	89 27       	eor	r24, r25
    10b0:	9f 70       	andi	r25, 0x0F	; 15
    10b2:	89 27       	eor	r24, r25
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    10ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    10bc:	a8 89       	ldd	r26, Y+16	; 0x10
    10be:	b9 89       	ldd	r27, Y+17	; 0x11
    10c0:	28 ee       	ldi	r18, 0xE8	; 232
    10c2:	33 e0       	ldi	r19, 0x03	; 3
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	bc 01       	movw	r22, r24
    10ca:	cd 01       	movw	r24, r26
    10cc:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__udivmodsi4>
    10d0:	da 01       	movw	r26, r20
    10d2:	c9 01       	movw	r24, r18
    10d4:	9e 83       	std	Y+6, r25	; 0x06
    10d6:	8d 83       	std	Y+5, r24	; 0x05
    10d8:	4d 81       	ldd	r20, Y+5	; 0x05
    10da:	5e 81       	ldd	r21, Y+6	; 0x06
    10dc:	9a 01       	movw	r18, r20
    10de:	a9 e8       	ldi	r26, 0x89	; 137
    10e0:	b8 e8       	ldi	r27, 0x88	; 136
    10e2:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    10e6:	9c 01       	movw	r18, r24
    10e8:	36 95       	lsr	r19
    10ea:	27 95       	ror	r18
    10ec:	32 95       	swap	r19
    10ee:	22 95       	swap	r18
    10f0:	2f 70       	andi	r18, 0x0F	; 15
    10f2:	23 27       	eor	r18, r19
    10f4:	3f 70       	andi	r19, 0x0F	; 15
    10f6:	23 27       	eor	r18, r19
    10f8:	6c e3       	ldi	r22, 0x3C	; 60
    10fa:	62 9f       	mul	r22, r18
    10fc:	c0 01       	movw	r24, r0
    10fe:	63 9f       	mul	r22, r19
    1100:	90 0d       	add	r25, r0
    1102:	11 24       	eor	r1, r1
    1104:	9a 01       	movw	r18, r20
    1106:	28 1b       	sub	r18, r24
    1108:	39 0b       	sbc	r19, r25
    110a:	c9 01       	movw	r24, r18
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	1f 82       	std	Y+7, r1	; 0x07
    1112:	58 c0       	rjmp	.+176    	; 0x11c4 <__stack+0xc5>
    1114:	49 81       	ldd	r20, Y+1	; 0x01
    1116:	5a 81       	ldd	r21, Y+2	; 0x02
    1118:	9a 01       	movw	r18, r20
    111a:	ad ec       	ldi	r26, 0xCD	; 205
    111c:	bc ec       	ldi	r27, 0xCC	; 204
    111e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    1122:	96 95       	lsr	r25
    1124:	87 95       	ror	r24
    1126:	96 95       	lsr	r25
    1128:	87 95       	ror	r24
    112a:	96 95       	lsr	r25
    112c:	87 95       	ror	r24
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	9c 01       	movw	r18, r24
    1134:	22 0f       	add	r18, r18
    1136:	33 1f       	adc	r19, r19
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	fa 01       	movw	r30, r20
    1142:	e8 1b       	sub	r30, r24
    1144:	f9 0b       	sbc	r31, r25
    1146:	cf 01       	movw	r24, r30
    1148:	8b 87       	std	Y+11, r24	; 0x0b
    114a:	8b 85       	ldd	r24, Y+11	; 0x0b
    114c:	80 5d       	subi	r24, 0xD0	; 208
    114e:	8b 87       	std	Y+11, r24	; 0x0b
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	9c 01       	movw	r18, r24
    1156:	ad ec       	ldi	r26, 0xCD	; 205
    1158:	bc ec       	ldi	r27, 0xCC	; 204
    115a:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    115e:	96 95       	lsr	r25
    1160:	87 95       	ror	r24
    1162:	96 95       	lsr	r25
    1164:	87 95       	ror	r24
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1170:	68 2f       	mov	r22, r24
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	8b 89       	ldd	r24, Y+19	; 0x13
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8a 89       	ldd	r24, Y+18	; 0x12
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	ac 01       	movw	r20, r24
    1182:	49 5f       	subi	r20, 0xF9	; 249
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	8f 81       	ldd	r24, Y+7	; 0x07
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	fa 01       	movw	r30, r20
    118e:	e8 1b       	sub	r30, r24
    1190:	f9 0b       	sbc	r31, r25
    1192:	cf 01       	movw	r24, r30
    1194:	e4 e1       	ldi	r30, 0x14	; 20
    1196:	e2 9f       	mul	r30, r18
    1198:	a0 01       	movw	r20, r0
    119a:	e3 9f       	mul	r30, r19
    119c:	50 0d       	add	r21, r0
    119e:	11 24       	eor	r1, r1
    11a0:	e0 e5       	ldi	r30, 0x50	; 80
    11a2:	e6 9f       	mul	r30, r22
    11a4:	90 01       	movw	r18, r0
    11a6:	e7 9f       	mul	r30, r23
    11a8:	30 0d       	add	r19, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	24 0f       	add	r18, r20
    11ae:	35 1f       	adc	r19, r21
    11b0:	82 0f       	add	r24, r18
    11b2:	93 1f       	adc	r25, r19
    11b4:	82 5f       	subi	r24, 0xF2	; 242
    11b6:	9c 4f       	sbci	r25, 0xFC	; 252
    11b8:	2b 85       	ldd	r18, Y+11	; 0x0b
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
    11be:	8f 81       	ldd	r24, Y+7	; 0x07
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	8f 83       	std	Y+7, r24	; 0x07
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <__stack+0xcd>
    11ca:	a4 cf       	rjmp	.-184    	; 0x1114 <__stack+0x15>
    11cc:	18 86       	std	Y+8, r1	; 0x08
    11ce:	58 c0       	rjmp	.+176    	; 0x1280 <__stack+0x181>
    11d0:	4d 81       	ldd	r20, Y+5	; 0x05
    11d2:	5e 81       	ldd	r21, Y+6	; 0x06
    11d4:	9a 01       	movw	r18, r20
    11d6:	ad ec       	ldi	r26, 0xCD	; 205
    11d8:	bc ec       	ldi	r27, 0xCC	; 204
    11da:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	96 95       	lsr	r25
    11e4:	87 95       	ror	r24
    11e6:	96 95       	lsr	r25
    11e8:	87 95       	ror	r24
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	9c 01       	movw	r18, r24
    11f0:	22 0f       	add	r18, r18
    11f2:	33 1f       	adc	r19, r19
    11f4:	22 0f       	add	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	9a 01       	movw	r18, r20
    11fe:	28 1b       	sub	r18, r24
    1200:	39 0b       	sbc	r19, r25
    1202:	c9 01       	movw	r24, r18
    1204:	8c 87       	std	Y+12, r24	; 0x0c
    1206:	8c 85       	ldd	r24, Y+12	; 0x0c
    1208:	80 5d       	subi	r24, 0xD0	; 208
    120a:	8c 87       	std	Y+12, r24	; 0x0c
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	9c 01       	movw	r18, r24
    1212:	ad ec       	ldi	r26, 0xCD	; 205
    1214:	bc ec       	ldi	r27, 0xCC	; 204
    1216:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    121a:	96 95       	lsr	r25
    121c:	87 95       	ror	r24
    121e:	96 95       	lsr	r25
    1220:	87 95       	ror	r24
    1222:	96 95       	lsr	r25
    1224:	87 95       	ror	r24
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	68 2f       	mov	r22, r24
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	8b 89       	ldd	r24, Y+19	; 0x13
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	8a 89       	ldd	r24, Y+18	; 0x12
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	ac 01       	movw	r20, r24
    123e:	4d 5f       	subi	r20, 0xFD	; 253
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	88 85       	ldd	r24, Y+8	; 0x08
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	fa 01       	movw	r30, r20
    124a:	e8 1b       	sub	r30, r24
    124c:	f9 0b       	sbc	r31, r25
    124e:	cf 01       	movw	r24, r30
    1250:	e4 e1       	ldi	r30, 0x14	; 20
    1252:	e2 9f       	mul	r30, r18
    1254:	a0 01       	movw	r20, r0
    1256:	e3 9f       	mul	r30, r19
    1258:	50 0d       	add	r21, r0
    125a:	11 24       	eor	r1, r1
    125c:	e0 e5       	ldi	r30, 0x50	; 80
    125e:	e6 9f       	mul	r30, r22
    1260:	90 01       	movw	r18, r0
    1262:	e7 9f       	mul	r30, r23
    1264:	30 0d       	add	r19, r0
    1266:	11 24       	eor	r1, r1
    1268:	24 0f       	add	r18, r20
    126a:	35 1f       	adc	r19, r21
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	82 5f       	subi	r24, 0xF2	; 242
    1272:	9c 4f       	sbci	r25, 0xFC	; 252
    1274:	2c 85       	ldd	r18, Y+12	; 0x0c
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
    127a:	88 85       	ldd	r24, Y+8	; 0x08
    127c:	8f 5f       	subi	r24, 0xFF	; 255
    127e:	88 87       	std	Y+8, r24	; 0x08
    1280:	88 85       	ldd	r24, Y+8	; 0x08
    1282:	82 30       	cpi	r24, 0x02	; 2
    1284:	08 f4       	brcc	.+2      	; 0x1288 <__stack+0x189>
    1286:	a4 cf       	rjmp	.-184    	; 0x11d0 <__stack+0xd1>
    1288:	19 86       	std	Y+9, r1	; 0x09
    128a:	66 c0       	rjmp	.+204    	; 0x1358 <__stack+0x259>
    128c:	4b 81       	ldd	r20, Y+3	; 0x03
    128e:	5c 81       	ldd	r21, Y+4	; 0x04
    1290:	9a 01       	movw	r18, r20
    1292:	ad ec       	ldi	r26, 0xCD	; 205
    1294:	bc ec       	ldi	r27, 0xCC	; 204
    1296:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    129a:	96 95       	lsr	r25
    129c:	87 95       	ror	r24
    129e:	96 95       	lsr	r25
    12a0:	87 95       	ror	r24
    12a2:	96 95       	lsr	r25
    12a4:	87 95       	ror	r24
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	9c 01       	movw	r18, r24
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	82 0f       	add	r24, r18
    12b6:	93 1f       	adc	r25, r19
    12b8:	9a 01       	movw	r18, r20
    12ba:	28 1b       	sub	r18, r24
    12bc:	39 0b       	sbc	r19, r25
    12be:	c9 01       	movw	r24, r18
    12c0:	8a 87       	std	Y+10, r24	; 0x0a
    12c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12c4:	80 5d       	subi	r24, 0xD0	; 208
    12c6:	8a 87       	std	Y+10, r24	; 0x0a
    12c8:	31 e0       	ldi	r19, 0x01	; 1
    12ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    12cc:	80 33       	cpi	r24, 0x30	; 48
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <__stack+0x1d3>
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	21 e0       	ldi	r18, 0x01	; 1
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	0a 97       	sbiw	r24, 0x0a	; 10
    12da:	08 f0       	brcs	.+2      	; 0x12de <__stack+0x1df>
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	83 2f       	mov	r24, r19
    12e0:	82 23       	and	r24, r18
    12e2:	88 23       	and	r24, r24
    12e4:	11 f0       	breq	.+4      	; 0x12ea <__stack+0x1eb>
    12e6:	80 e1       	ldi	r24, 0x10	; 16
    12e8:	8a 87       	std	Y+10, r24	; 0x0a
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	9c 01       	movw	r18, r24
    12f0:	ad ec       	ldi	r26, 0xCD	; 205
    12f2:	bc ec       	ldi	r27, 0xCC	; 204
    12f4:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <__umulhisi3>
    12f8:	96 95       	lsr	r25
    12fa:	87 95       	ror	r24
    12fc:	96 95       	lsr	r25
    12fe:	87 95       	ror	r24
    1300:	96 95       	lsr	r25
    1302:	87 95       	ror	r24
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8d 85       	ldd	r24, Y+13	; 0x0d
    130a:	68 2f       	mov	r22, r24
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	8b 89       	ldd	r24, Y+19	; 0x13
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8a 89       	ldd	r24, Y+18	; 0x12
    1316:	48 2f       	mov	r20, r24
    1318:	50 e0       	ldi	r21, 0x00	; 0
    131a:	89 85       	ldd	r24, Y+9	; 0x09
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	fa 01       	movw	r30, r20
    1322:	e8 1b       	sub	r30, r24
    1324:	f9 0b       	sbc	r31, r25
    1326:	cf 01       	movw	r24, r30
    1328:	e4 e1       	ldi	r30, 0x14	; 20
    132a:	e2 9f       	mul	r30, r18
    132c:	a0 01       	movw	r20, r0
    132e:	e3 9f       	mul	r30, r19
    1330:	50 0d       	add	r21, r0
    1332:	11 24       	eor	r1, r1
    1334:	e0 e5       	ldi	r30, 0x50	; 80
    1336:	e6 9f       	mul	r30, r22
    1338:	90 01       	movw	r18, r0
    133a:	e7 9f       	mul	r30, r23
    133c:	30 0d       	add	r19, r0
    133e:	11 24       	eor	r1, r1
    1340:	24 0f       	add	r18, r20
    1342:	35 1f       	adc	r19, r21
    1344:	82 0f       	add	r24, r18
    1346:	93 1f       	adc	r25, r19
    1348:	82 5f       	subi	r24, 0xF2	; 242
    134a:	9c 4f       	sbci	r25, 0xFC	; 252
    134c:	2a 85       	ldd	r18, Y+10	; 0x0a
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	8f 5f       	subi	r24, 0xFF	; 255
    1356:	89 87       	std	Y+9, r24	; 0x09
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	08 f4       	brcc	.+2      	; 0x1360 <__stack+0x261>
    135e:	96 cf       	rjmp	.-212    	; 0x128c <__stack+0x18d>
    1360:	00 00       	nop
    1362:	63 96       	adiw	r28, 0x13	; 19
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <dsp_clear>:
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	00 d0       	rcall	.+0      	; 0x137c <dsp_clear+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <dsp_clear+0x8>
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	1a 82       	std	Y+2, r1	; 0x02
    1384:	19 82       	std	Y+1, r1	; 0x01
    1386:	56 c0       	rjmp	.+172    	; 0x1434 <dsp_clear+0xbe>
    1388:	1c 82       	std	Y+4, r1	; 0x04
    138a:	1b 82       	std	Y+3, r1	; 0x03
    138c:	49 c0       	rjmp	.+146    	; 0x1420 <dsp_clear+0xaa>
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	9a 81       	ldd	r25, Y+2	; 0x02
    1392:	44 e1       	ldi	r20, 0x14	; 20
    1394:	48 9f       	mul	r20, r24
    1396:	90 01       	movw	r18, r0
    1398:	49 9f       	mul	r20, r25
    139a:	30 0d       	add	r19, r0
    139c:	11 24       	eor	r1, r1
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	82 0f       	add	r24, r18
    13a4:	93 1f       	adc	r25, r19
    13a6:	82 5f       	subi	r24, 0xF2	; 242
    13a8:	9c 4f       	sbci	r25, 0xFC	; 252
    13aa:	20 e1       	ldi	r18, 0x10	; 16
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	44 e1       	ldi	r20, 0x14	; 20
    13b6:	48 9f       	mul	r20, r24
    13b8:	90 01       	movw	r18, r0
    13ba:	49 9f       	mul	r20, r25
    13bc:	30 0d       	add	r19, r0
    13be:	11 24       	eor	r1, r1
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	82 5a       	subi	r24, 0xA2	; 162
    13ca:	9c 4f       	sbci	r25, 0xFC	; 252
    13cc:	20 e1       	ldi	r18, 0x10	; 16
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	9a 81       	ldd	r25, Y+2	; 0x02
    13d6:	44 e1       	ldi	r20, 0x14	; 20
    13d8:	48 9f       	mul	r20, r24
    13da:	90 01       	movw	r18, r0
    13dc:	49 9f       	mul	r20, r25
    13de:	30 0d       	add	r19, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	82 55       	subi	r24, 0x52	; 82
    13ec:	9c 4f       	sbci	r25, 0xFC	; 252
    13ee:	20 e1       	ldi	r18, 0x10	; 16
    13f0:	fc 01       	movw	r30, r24
    13f2:	20 83       	st	Z, r18
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	9a 81       	ldd	r25, Y+2	; 0x02
    13f8:	44 e1       	ldi	r20, 0x14	; 20
    13fa:	48 9f       	mul	r20, r24
    13fc:	90 01       	movw	r18, r0
    13fe:	49 9f       	mul	r20, r25
    1400:	30 0d       	add	r19, r0
    1402:	11 24       	eor	r1, r1
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	82 50       	subi	r24, 0x02	; 2
    140e:	9c 4f       	sbci	r25, 0xFC	; 252
    1410:	20 e1       	ldi	r18, 0x10	; 16
    1412:	fc 01       	movw	r30, r24
    1414:	20 83       	st	Z, r18
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	8b 83       	std	Y+3, r24	; 0x03
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	44 97       	sbiw	r24, 0x14	; 20
    1426:	0c f4       	brge	.+2      	; 0x142a <dsp_clear+0xb4>
    1428:	b2 cf       	rjmp	.-156    	; 0x138e <dsp_clear+0x18>
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	04 97       	sbiw	r24, 0x04	; 4
    143a:	0c f4       	brge	.+2      	; 0x143e <dsp_clear+0xc8>
    143c:	a5 cf       	rjmp	.-182    	; 0x1388 <dsp_clear+0x12>
    143e:	00 00       	nop
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <dsp_arrayinit_static>:
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	84 e5       	ldi	r24, 0x54	; 84
    1458:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <dsp_data>
    145c:	83 e5       	ldi	r24, 0x53	; 83
    145e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <dsp_data+0x1>
    1462:	86 e5       	ldi	r24, 0x56	; 86
    1464:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <dsp_data+0x2>
    1468:	83 e5       	ldi	r24, 0x53	; 83
    146a:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <dsp_data+0xa>
    146e:	80 e5       	ldi	r24, 0x50	; 80
    1470:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <dsp_data+0xb>
    1474:	84 e4       	ldi	r24, 0x44	; 68
    1476:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <dsp_data+0xc>
    147a:	83 e4       	ldi	r24, 0x43	; 67
    147c:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <dsp_data+0x14>
    1480:	8f e4       	ldi	r24, 0x4F	; 79
    1482:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <dsp_data+0x15>
    1486:	8f e4       	ldi	r24, 0x4F	; 79
    1488:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <dsp_data+0x16>
    148c:	8c e4       	ldi	r24, 0x4C	; 76
    148e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <dsp_data+0x17>
    1492:	81 e4       	ldi	r24, 0x41	; 65
    1494:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <dsp_data+0x1e>
    1498:	83 e4       	ldi	r24, 0x43	; 67
    149a:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <dsp_data+0x1f>
    149e:	84 e5       	ldi	r24, 0x54	; 84
    14a0:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <dsp_data+0x20>
    14a4:	82 e4       	ldi	r24, 0x42	; 66
    14a6:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <dsp_data+0x28>
    14aa:	82 e4       	ldi	r24, 0x42	; 66
    14ac:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <dsp_data+0x29>
    14b0:	83 e5       	ldi	r24, 0x53	; 83
    14b2:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <dsp_data+0x32>
    14b6:	8f e4       	ldi	r24, 0x4F	; 79
    14b8:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <dsp_data+0x33>
    14bc:	83 e4       	ldi	r24, 0x43	; 67
    14be:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <dsp_data+0x34>
    14c2:	8c e4       	ldi	r24, 0x4C	; 76
    14c4:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <dsp_data+0x46>
    14c8:	86 e5       	ldi	r24, 0x56	; 86
    14ca:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <dsp_data+0x47>
    14ce:	83 e5       	ldi	r24, 0x53	; 83
    14d0:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <dsp_data+0x48>
    14d4:	86 e5       	ldi	r24, 0x56	; 86
    14d6:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <dsp_data+0x8>
    14da:	8b e4       	ldi	r24, 0x4B	; 75
    14dc:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <dsp_data+0x11>
    14e0:	8d e4       	ldi	r24, 0x4D	; 77
    14e2:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <dsp_data+0x12>
    14e6:	88 e4       	ldi	r24, 0x48	; 72
    14e8:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <dsp_data+0x13>
    14ec:	83 e4       	ldi	r24, 0x43	; 67
    14ee:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <dsp_data+0x1c>
    14f2:	83 e4       	ldi	r24, 0x43	; 67
    14f4:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <dsp_data+0x25>
    14f8:	8d e2       	ldi	r24, 0x2D	; 45
    14fa:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <dsp_data+0x30>
    14fe:	85 e2       	ldi	r24, 0x25	; 37
    1500:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <dsp_data+0x39>
    1504:	86 e5       	ldi	r24, 0x56	; 86
    1506:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <dsp_data+0x4d>
    150a:	84 e5       	ldi	r24, 0x54	; 84
    150c:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <dsp_data+0x50>
    1510:	80 e5       	ldi	r24, 0x50	; 80
    1512:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <dsp_data+0x51>
    1516:	83 e5       	ldi	r24, 0x53	; 83
    1518:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <dsp_data+0x52>
    151c:	81 e3       	ldi	r24, 0x31	; 49
    151e:	80 93 61 03 	sts	0x0361, r24	; 0x800361 <dsp_data+0x53>
    1522:	82 e3       	ldi	r24, 0x32	; 50
    1524:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <dsp_data+0x5a>
    1528:	81 e4       	ldi	r24, 0x41	; 65
    152a:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <dsp_data+0x64>
    152e:	80 e5       	ldi	r24, 0x50	; 80
    1530:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <dsp_data+0x65>
    1534:	83 e5       	ldi	r24, 0x53	; 83
    1536:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <dsp_data+0x66>
    153a:	81 e3       	ldi	r24, 0x31	; 49
    153c:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <dsp_data+0x67>
    1540:	82 e3       	ldi	r24, 0x32	; 50
    1542:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <dsp_data+0x6e>
    1546:	84 e5       	ldi	r24, 0x54	; 84
    1548:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <dsp_data+0x78>
    154c:	80 e5       	ldi	r24, 0x50	; 80
    154e:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <dsp_data+0x79>
    1552:	83 e5       	ldi	r24, 0x53	; 83
    1554:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <dsp_data+0x7a>
    1558:	85 e4       	ldi	r24, 0x45	; 69
    155a:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <dsp_data+0x7b>
    155e:	82 e4       	ldi	r24, 0x42	; 66
    1560:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <dsp_data+0x8c>
    1564:	80 e5       	ldi	r24, 0x50	; 80
    1566:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <dsp_data+0x8d>
    156a:	86 e4       	ldi	r24, 0x46	; 70
    156c:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <dsp_data+0x8e>
    1570:	82 e5       	ldi	r24, 0x52	; 82
    1572:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <dsp_data+0x94>
    1576:	85 e2       	ldi	r24, 0x25	; 37
    1578:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <dsp_data+0x58>
    157c:	85 e2       	ldi	r24, 0x25	; 37
    157e:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <dsp_data+0x6c>
    1582:	85 e2       	ldi	r24, 0x25	; 37
    1584:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <dsp_data+0x80>
    1588:	85 e2       	ldi	r24, 0x25	; 37
    158a:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <dsp_data+0x5f>
    158e:	85 e2       	ldi	r24, 0x25	; 37
    1590:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <dsp_data+0x73>
    1594:	82 e4       	ldi	r24, 0x42	; 66
    1596:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <dsp_data+0x92>
    159a:	82 e4       	ldi	r24, 0x42	; 66
    159c:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <dsp_data+0x98>
    15a0:	84 e5       	ldi	r24, 0x54	; 84
    15a2:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <dsp_data+0xa0>
    15a6:	83 e4       	ldi	r24, 0x43	; 67
    15a8:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <dsp_data+0xa1>
    15ac:	82 e4       	ldi	r24, 0x42	; 66
    15ae:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <dsp_data+0xb4>
    15b2:	85 e4       	ldi	r24, 0x45	; 69
    15b4:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <dsp_data+0xb5>
    15b8:	83 e5       	ldi	r24, 0x53	; 83
    15ba:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <dsp_data+0xb6>
    15be:	80 e5       	ldi	r24, 0x50	; 80
    15c0:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <dsp_data+0xc8>
    15c4:	82 e5       	ldi	r24, 0x52	; 82
    15c6:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <dsp_data+0xc9>
    15ca:	85 e4       	ldi	r24, 0x45	; 69
    15cc:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <dsp_data+0xca>
    15d0:	8c e4       	ldi	r24, 0x4C	; 76
    15d2:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <dsp_data+0xdc>
    15d6:	8e e4       	ldi	r24, 0x4E	; 78
    15d8:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <dsp_data+0xdd>
    15dc:	83 e5       	ldi	r24, 0x53	; 83
    15de:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <dsp_data+0xa5>
    15e2:	80 e5       	ldi	r24, 0x50	; 80
    15e4:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <dsp_data+0xa6>
    15e8:	85 e4       	ldi	r24, 0x45	; 69
    15ea:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <dsp_data+0xa7>
    15ee:	84 e4       	ldi	r24, 0x44	; 68
    15f0:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <dsp_data+0xa8>
    15f4:	8b e4       	ldi	r24, 0x4B	; 75
    15f6:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <dsp_data+0xad>
    15fa:	8d e4       	ldi	r24, 0x4D	; 77
    15fc:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <dsp_data+0xae>
    1600:	88 e4       	ldi	r24, 0x48	; 72
    1602:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <dsp_data+0xaf>
    1606:	8f e4       	ldi	r24, 0x4F	; 79
    1608:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <dsp_data+0xe2>
    160c:	84 e4       	ldi	r24, 0x44	; 68
    160e:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <dsp_data+0xe3>
    1612:	8f e4       	ldi	r24, 0x4F	; 79
    1614:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <dsp_data+0xe4>
    1618:	8b e4       	ldi	r24, 0x4B	; 75
    161a:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <dsp_data+0xe9>
    161e:	8d e4       	ldi	r24, 0x4D	; 77
    1620:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <dsp_data+0xea>
    1624:	8a e3       	ldi	r24, 0x3A	; 58
    1626:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <dsp_data+0xb9>
    162a:	8a e3       	ldi	r24, 0x3A	; 58
    162c:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <dsp_data+0xbc>
    1630:	8a e3       	ldi	r24, 0x3A	; 58
    1632:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <dsp_data+0xcd>
    1636:	8a e3       	ldi	r24, 0x3A	; 58
    1638:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <dsp_data+0xd0>
    163c:	00 00       	nop
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <invert_binary_number>:
	clear_top_right_bar();
	uint16_t Top_Right_Bar_Divider = (max_value_r - min_value_r) / (LED_COUNT_TOP_RIGHT - 1);
	int8_t amount_r = (current_value_r - min_value_r + Top_Right_Bar_Divider) / Top_Right_Bar_Divider;
	if (amount_r > 0) {led_right_top_bar_select(amount_r);}
	else {led_right_top_bar_select(0);}
}
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	00 d0       	rcall	.+0      	; 0x164a <invert_binary_number+0x6>
    164a:	1f 92       	push	r1
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	19 82       	std	Y+1, r1	; 0x01
    1654:	1a 82       	std	Y+2, r1	; 0x02
    1656:	22 c0       	rjmp	.+68     	; 0x169c <invert_binary_number+0x58>
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	2a 81       	ldd	r18, Y+2	; 0x02
    1660:	22 2f       	mov	r18, r18
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	02 c0       	rjmp	.+4      	; 0x166a <invert_binary_number+0x26>
    1666:	95 95       	asr	r25
    1668:	87 95       	ror	r24
    166a:	2a 95       	dec	r18
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <invert_binary_number+0x22>
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	99 27       	eor	r25, r25
    1672:	2a 81       	ldd	r18, Y+2	; 0x02
    1674:	22 2f       	mov	r18, r18
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	47 e0       	ldi	r20, 0x07	; 7
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	ba 01       	movw	r22, r20
    167e:	62 1b       	sub	r22, r18
    1680:	73 0b       	sbc	r23, r19
    1682:	9b 01       	movw	r18, r22
    1684:	02 c0       	rjmp	.+4      	; 0x168a <invert_binary_number+0x46>
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	2a 95       	dec	r18
    168c:	e2 f7       	brpl	.-8      	; 0x1686 <invert_binary_number+0x42>
    168e:	98 2f       	mov	r25, r24
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	89 2b       	or	r24, r25
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	8a 83       	std	Y+2, r24	; 0x02
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	88 30       	cpi	r24, 0x08	; 8
    16a0:	d8 f2       	brcs	.-74     	; 0x1658 <invert_binary_number+0x14>
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <clear_top_left_bar>:
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	82 e2       	ldi	r24, 0x22	; 34
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	22 e2       	ldi	r18, 0x22	; 34
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	f9 01       	movw	r30, r18
    16c2:	20 81       	ld	r18, Z
    16c4:	2f 70       	andi	r18, 0x0F	; 15
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
    16ca:	84 e3       	ldi	r24, 0x34	; 52
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	24 e3       	ldi	r18, 0x34	; 52
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	f9 01       	movw	r30, r18
    16d4:	20 81       	ld	r18, Z
    16d6:	2b 7f       	andi	r18, 0xFB	; 251
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18
    16dc:	00 00       	nop
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <clear_top_right_bar>:
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	88 e2       	ldi	r24, 0x28	; 40
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	fc 01       	movw	r30, r24
    16f2:	10 82       	st	Z, r1
    16f4:	84 e3       	ldi	r24, 0x34	; 52
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	24 e3       	ldi	r18, 0x34	; 52
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	f9 01       	movw	r30, r18
    16fe:	20 81       	ld	r18, Z
    1700:	2c 7f       	andi	r18, 0xFC	; 252
    1702:	fc 01       	movw	r30, r24
    1704:	20 83       	st	Z, r18
    1706:	00 00       	nop
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <led_left_top_bar_select>:

//This Function turns on the desired amount of LEDs of the left Top Bar
void led_left_top_bar_select(uint8_t select_l)
{
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	1f 92       	push	r1
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	89 83       	std	Y+1, r24	; 0x01
	PORTA |= ~(0xFF << select_l) << PA4;
    171a:	82 e2       	ldi	r24, 0x22	; 34
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	22 e2       	ldi	r18, 0x22	; 34
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	f9 01       	movw	r30, r18
    1724:	20 81       	ld	r18, Z
    1726:	62 2f       	mov	r22, r18
    1728:	29 81       	ldd	r18, Y+1	; 0x01
    172a:	42 2f       	mov	r20, r18
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <led_left_top_bar_select+0x2a>
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	4a 95       	dec	r20
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <led_left_top_bar_select+0x26>
    173c:	20 95       	com	r18
    173e:	30 95       	com	r19
    1740:	22 95       	swap	r18
    1742:	32 95       	swap	r19
    1744:	30 7f       	andi	r19, 0xF0	; 240
    1746:	32 27       	eor	r19, r18
    1748:	20 7f       	andi	r18, 0xF0	; 240
    174a:	32 27       	eor	r19, r18
    174c:	26 2b       	or	r18, r22
    174e:	fc 01       	movw	r30, r24
    1750:	20 83       	st	Z, r18
	PORTG |= (1<<PG2) & ((0x80) >> select_l);
    1752:	84 e3       	ldi	r24, 0x34	; 52
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	24 e3       	ldi	r18, 0x34	; 52
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	f9 01       	movw	r30, r18
    175c:	20 81       	ld	r18, Z
    175e:	62 2f       	mov	r22, r18
    1760:	29 81       	ldd	r18, Y+1	; 0x01
    1762:	42 2f       	mov	r20, r18
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	20 e8       	ldi	r18, 0x80	; 128
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <led_left_top_bar_select+0x62>
    176c:	35 95       	asr	r19
    176e:	27 95       	ror	r18
    1770:	4a 95       	dec	r20
    1772:	e2 f7       	brpl	.-8      	; 0x176c <led_left_top_bar_select+0x5e>
    1774:	24 70       	andi	r18, 0x04	; 4
    1776:	26 2b       	or	r18, r22
    1778:	fc 01       	movw	r30, r24
    177a:	20 83       	st	Z, r18
}
    177c:	00 00       	nop
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <led_right_top_bar_select>:

//This Function turns on the desired amount of LEDs of the right Top Bar
void led_right_top_bar_select(uint8_t select_r)
{
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	1f 92       	push	r1
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	89 83       	std	Y+1, r24	; 0x01
	PORTC |= ~(0xFF >> select_r);
    1792:	88 e2       	ldi	r24, 0x28	; 40
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	28 e2       	ldi	r18, 0x28	; 40
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	f9 01       	movw	r30, r18
    179c:	20 81       	ld	r18, Z
    179e:	62 2f       	mov	r22, r18
    17a0:	29 81       	ldd	r18, Y+1	; 0x01
    17a2:	42 2f       	mov	r20, r18
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	2f ef       	ldi	r18, 0xFF	; 255
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <led_right_top_bar_select+0x2a>
    17ac:	35 95       	asr	r19
    17ae:	27 95       	ror	r18
    17b0:	4a 95       	dec	r20
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <led_right_top_bar_select+0x26>
    17b4:	20 95       	com	r18
    17b6:	26 2b       	or	r18, r22
    17b8:	fc 01       	movw	r30, r24
    17ba:	20 83       	st	Z, r18
	PORTG |= (~(0xFF << (select_r/9)) << (select_r/9)) + (select_r/10);
    17bc:	84 e3       	ldi	r24, 0x34	; 52
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	24 e3       	ldi	r18, 0x34	; 52
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	f9 01       	movw	r30, r18
    17c6:	20 81       	ld	r18, Z
    17c8:	62 2f       	mov	r22, r18
    17ca:	39 81       	ldd	r19, Y+1	; 0x01
    17cc:	29 e3       	ldi	r18, 0x39	; 57
    17ce:	32 9f       	mul	r19, r18
    17d0:	21 2d       	mov	r18, r1
    17d2:	11 24       	eor	r1, r1
    17d4:	26 95       	lsr	r18
    17d6:	42 2f       	mov	r20, r18
    17d8:	50 e0       	ldi	r21, 0x00	; 0
    17da:	2f ef       	ldi	r18, 0xFF	; 255
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <led_right_top_bar_select+0x5e>
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	4a 95       	dec	r20
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <led_right_top_bar_select+0x5a>
    17e8:	20 95       	com	r18
    17ea:	30 95       	com	r19
    17ec:	59 81       	ldd	r21, Y+1	; 0x01
    17ee:	49 e3       	ldi	r20, 0x39	; 57
    17f0:	54 9f       	mul	r21, r20
    17f2:	41 2d       	mov	r20, r1
    17f4:	11 24       	eor	r1, r1
    17f6:	46 95       	lsr	r20
    17f8:	44 2f       	mov	r20, r20
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <led_right_top_bar_select+0x7c>
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	4a 95       	dec	r20
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <led_right_top_bar_select+0x78>
    1806:	42 2f       	mov	r20, r18
    1808:	39 81       	ldd	r19, Y+1	; 0x01
    180a:	2d ec       	ldi	r18, 0xCD	; 205
    180c:	32 9f       	mul	r19, r18
    180e:	21 2d       	mov	r18, r1
    1810:	11 24       	eor	r1, r1
    1812:	26 95       	lsr	r18
    1814:	26 95       	lsr	r18
    1816:	26 95       	lsr	r18
    1818:	24 0f       	add	r18, r20
    181a:	26 2b       	or	r18, r22
    181c:	fc 01       	movw	r30, r24
    181e:	20 83       	st	Z, r18
}
    1820:	00 00       	nop
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <dsp_writedata>:


//This Function writes data into the Display
void dsp_writedata(uint8_t data,uint8_t rs)
{
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	00 d0       	rcall	.+0      	; 0x1834 <dsp_writedata+0xa>
    1834:	00 d0       	rcall	.+0      	; 0x1836 <dsp_writedata+0xc>
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8b 83       	std	Y+3, r24	; 0x03
    183c:	6c 83       	std	Y+4, r22	; 0x04
	//PORTE as Output
	
	PORTE = invert_binary_number(data);
    183e:	0e e2       	ldi	r16, 0x2E	; 46
    1840:	10 e0       	ldi	r17, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	ff de       	rcall	.-514    	; 0x1644 <invert_binary_number>
    1846:	f8 01       	movw	r30, r16
    1848:	80 83       	st	Z, r24
	
	//SETS THE RS PIN
	if (rs==1) {PORTB |= (1<<PB6);}
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	51 f4       	brne	.+20     	; 0x1864 <dsp_writedata+0x3a>
    1850:	85 e2       	ldi	r24, 0x25	; 37
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	25 e2       	ldi	r18, 0x25	; 37
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	f9 01       	movw	r30, r18
    185a:	20 81       	ld	r18, Z
    185c:	20 64       	ori	r18, 0x40	; 64
    185e:	fc 01       	movw	r30, r24
    1860:	20 83       	st	Z, r18
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <dsp_writedata+0x4c>
	else {PORTB &= ~(1<<PB6);}
    1864:	85 e2       	ldi	r24, 0x25	; 37
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	25 e2       	ldi	r18, 0x25	; 37
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	f9 01       	movw	r30, r18
    186e:	20 81       	ld	r18, Z
    1870:	2f 7b       	andi	r18, 0xBF	; 191
    1872:	fc 01       	movw	r30, r24
    1874:	20 83       	st	Z, r18

	//Sets enable high
	PORTB |= (1<<PB4);
    1876:	85 e2       	ldi	r24, 0x25	; 37
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	25 e2       	ldi	r18, 0x25	; 37
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	f9 01       	movw	r30, r18
    1880:	20 81       	ld	r18, Z
    1882:	20 61       	ori	r18, 0x10	; 16
    1884:	fc 01       	movw	r30, r24
    1886:	20 83       	st	Z, r18
	//Sets enable low
	for(int wait = 0; wait<100; wait++){}
    1888:	1a 82       	std	Y+2, r1	; 0x02
    188a:	19 82       	std	Y+1, r1	; 0x01
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <dsp_writedata+0x6e>
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	84 36       	cpi	r24, 0x64	; 100
    189e:	91 05       	cpc	r25, r1
    18a0:	b4 f3       	brlt	.-20     	; 0x188e <dsp_writedata+0x64>
	PORTB &= ~(1<<PB4);
    18a2:	85 e2       	ldi	r24, 0x25	; 37
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	25 e2       	ldi	r18, 0x25	; 37
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	f9 01       	movw	r30, r18
    18ac:	20 81       	ld	r18, Z
    18ae:	2f 7e       	andi	r18, 0xEF	; 239
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
	//This is done so that the display will read the data pins and process them
}
    18b4:	00 00       	nop
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	08 95       	ret

000018c8 <dsp_customchar>:
//Function to set customchars
//charpos = position in cgram
//line 1-8 lines of the char

void dsp_customchar(uint8_t charpos, uint8_t line1, uint8_t line2, uint8_t line3, uint8_t line4, uint8_t line5, uint8_t line6, uint8_t line7, uint8_t line8)
{	
    18c8:	8f 92       	push	r8
    18ca:	af 92       	push	r10
    18cc:	cf 92       	push	r12
    18ce:	ef 92       	push	r14
    18d0:	0f 93       	push	r16
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	29 97       	sbiw	r28, 0x09	; 9
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	6a 83       	std	Y+2, r22	; 0x02
    18ea:	4b 83       	std	Y+3, r20	; 0x03
    18ec:	2c 83       	std	Y+4, r18	; 0x04
    18ee:	0d 83       	std	Y+5, r16	; 0x05
    18f0:	ee 82       	std	Y+6, r14	; 0x06
    18f2:	cf 82       	std	Y+7, r12	; 0x07
    18f4:	a8 86       	std	Y+8, r10	; 0x08
    18f6:	89 86       	std	Y+9, r8	; 0x09
	//where to write in cgram
	dsp_writedata(0x40+8*charpos,0);
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	08 96       	adiw	r24, 0x08	; 8
    1900:	88 0f       	add	r24, r24
    1902:	88 0f       	add	r24, r24
    1904:	88 0f       	add	r24, r24
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	90 df       	rcall	.-224    	; 0x182a <dsp_writedata>

	//write each line
	dsp_writedata(line1,1);
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	8d df       	rcall	.-230    	; 0x182a <dsp_writedata>
	dsp_writedata(line2,1);
    1910:	61 e0       	ldi	r22, 0x01	; 1
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	8a df       	rcall	.-236    	; 0x182a <dsp_writedata>
	dsp_writedata(line3,1);
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	8c 81       	ldd	r24, Y+4	; 0x04
    191a:	87 df       	rcall	.-242    	; 0x182a <dsp_writedata>
	dsp_writedata(line4,1);
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	84 df       	rcall	.-248    	; 0x182a <dsp_writedata>
	dsp_writedata(line5,1);
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	8e 81       	ldd	r24, Y+6	; 0x06
    1926:	81 df       	rcall	.-254    	; 0x182a <dsp_writedata>
	dsp_writedata(line6,1);
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	8f 81       	ldd	r24, Y+7	; 0x07
    192c:	7e df       	rcall	.-260    	; 0x182a <dsp_writedata>
	dsp_writedata(line7,1);
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	88 85       	ldd	r24, Y+8	; 0x08
    1932:	7b df       	rcall	.-266    	; 0x182a <dsp_writedata>
	dsp_writedata(line8,1);
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	89 85       	ldd	r24, Y+9	; 0x09
    1938:	78 df       	rcall	.-272    	; 0x182a <dsp_writedata>
    193a:	60 e0       	ldi	r22, 0x00	; 0

	//dsiplay return home
	dsp_writedata(0x02,0);
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	75 df       	rcall	.-278    	; 0x182a <dsp_writedata>
    1940:	00 00       	nop
    1942:	29 96       	adiw	r28, 0x09	; 9
}
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	de bf       	out	0x3e, r29	; 62
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	cd bf       	out	0x3d, r28	; 61
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	0f 91       	pop	r16
    1954:	ef 90       	pop	r14
    1956:	cf 90       	pop	r12
    1958:	af 90       	pop	r10
    195a:	8f 90       	pop	r8
    195c:	08 95       	ret

0000195e <dsp_write>:
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29


void dsp_write(uint8_t dsp_mode)
{	
    1962:	1f 92       	push	r1
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	89 83       	std	Y+1, r24	; 0x01
	if (counter<20)
    196a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    196e:	84 31       	cpi	r24, 0x14	; 20
    1970:	28 f5       	brcc	.+74     	; 0x19bc <dsp_write+0x5e>
	dsp_writedata(dsp_data[dsp_mode][dsp_linecounter][counter++],1);
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	68 2f       	mov	r22, r24
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	98 0f       	add	r25, r24
    1988:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <counter>
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	e4 e1       	ldi	r30, 0x14	; 20
    1992:	e2 9f       	mul	r30, r18
    1994:	a0 01       	movw	r20, r0
    1996:	e3 9f       	mul	r30, r19
    1998:	50 0d       	add	r21, r0
    199a:	11 24       	eor	r1, r1
    199c:	e0 e5       	ldi	r30, 0x50	; 80
    199e:	e6 9f       	mul	r30, r22
    19a0:	90 01       	movw	r18, r0
    19a2:	e7 9f       	mul	r30, r23
    19a4:	30 0d       	add	r19, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	24 0f       	add	r18, r20
    19aa:	35 1f       	adc	r19, r21
    19ac:	82 0f       	add	r24, r18
    19ae:	93 1f       	adc	r25, r19
    19b0:	82 5f       	subi	r24, 0xF2	; 242
    19b2:	9c 4f       	sbci	r25, 0xFC	; 252
    19b4:	fc 01       	movw	r30, r24
    19b6:	80 81       	ld	r24, Z
    19b8:	61 e0       	ldi	r22, 0x01	; 1
    19ba:	37 df       	rcall	.-402    	; 0x182a <dsp_writedata>
	if (counter == 20)
    19bc:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <counter>
    19c0:	84 31       	cpi	r24, 0x14	; 20
    19c2:	89 f4       	brne	.+34     	; 0x19e6 <dsp_write+0x88>
	{
		//go into next line
		dsp_writedata(dsp_line[dsp_linecounter],0);
    19c4:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	89 5f       	subi	r24, 0xF9	; 249
    19ce:	9e 4f       	sbci	r25, 0xFE	; 254
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	29 df       	rcall	.-430    	; 0x182a <dsp_writedata>
		counter=0;
    19d8:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <counter>
		dsp_linecounter+=1;
    19dc:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19e0:	8f 5f       	subi	r24, 0xFF	; 255
    19e2:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <dsp_linecounter>
	}
	if (dsp_linecounter == 4)
    19e6:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <dsp_linecounter>
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	11 f4       	brne	.+4      	; 0x19f2 <dsp_write+0x94>
	{
		dsp_linecounter = 0;
    19ee:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <dsp_linecounter>
	}
}
    19f2:	00 00       	nop
    19f4:	0f 90       	pop	r0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <dsp_definechars>:


void dsp_definechars()
{
    19fc:	8f 92       	push	r8
    19fe:	af 92       	push	r10
    1a00:	cf 92       	push	r12
    1a02:	ef 92       	push	r14
    1a04:	0f 93       	push	r16
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	//definition of needed custom chars
	dsp_customchar(0,0,0,0,0,0,0x1F,0x1F,0x1F);
    1a0e:	0f 2e       	mov	r0, r31
    1a10:	ff e1       	ldi	r31, 0x1F	; 31
    1a12:	8f 2e       	mov	r8, r31
    1a14:	f0 2d       	mov	r31, r0
    1a16:	0f 2e       	mov	r0, r31
    1a18:	ff e1       	ldi	r31, 0x1F	; 31
    1a1a:	af 2e       	mov	r10, r31
    1a1c:	f0 2d       	mov	r31, r0
    1a1e:	0f 2e       	mov	r0, r31
    1a20:	ff e1       	ldi	r31, 0x1F	; 31
    1a22:	cf 2e       	mov	r12, r31
    1a24:	f0 2d       	mov	r31, r0
    1a26:	e1 2c       	mov	r14, r1
    1a28:	00 e0       	ldi	r16, 0x00	; 0
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	40 e0       	ldi	r20, 0x00	; 0
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	4a df       	rcall	.-364    	; 0x18c8 <dsp_customchar>
	dsp_customchar(1,0x1F,0x1F,0,0,0,0,0,0);
    1a34:	81 2c       	mov	r8, r1
    1a36:	a1 2c       	mov	r10, r1
    1a38:	c1 2c       	mov	r12, r1
    1a3a:	e1 2c       	mov	r14, r1
    1a3c:	00 e0       	ldi	r16, 0x00	; 0
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	4f e1       	ldi	r20, 0x1F	; 31
    1a42:	6f e1       	ldi	r22, 0x1F	; 31
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	40 df       	rcall	.-384    	; 0x18c8 <dsp_customchar>
	dsp_customchar(2,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF,0xEF);
    1a48:	0f 2e       	mov	r0, r31
    1a4a:	ff ee       	ldi	r31, 0xEF	; 239
    1a4c:	8f 2e       	mov	r8, r31
    1a4e:	f0 2d       	mov	r31, r0
    1a50:	0f 2e       	mov	r0, r31
    1a52:	ff ee       	ldi	r31, 0xEF	; 239
    1a54:	af 2e       	mov	r10, r31
    1a56:	f0 2d       	mov	r31, r0
    1a58:	0f 2e       	mov	r0, r31
    1a5a:	ff ee       	ldi	r31, 0xEF	; 239
    1a5c:	cf 2e       	mov	r12, r31
    1a5e:	f0 2d       	mov	r31, r0
    1a60:	0f 2e       	mov	r0, r31
    1a62:	ff ee       	ldi	r31, 0xEF	; 239
    1a64:	ef 2e       	mov	r14, r31
    1a66:	f0 2d       	mov	r31, r0
    1a68:	0f ee       	ldi	r16, 0xEF	; 239
    1a6a:	2f ee       	ldi	r18, 0xEF	; 239
    1a6c:	4f ee       	ldi	r20, 0xEF	; 239
    1a6e:	6f ee       	ldi	r22, 0xEF	; 239
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	2a df       	rcall	.-428    	; 0x18c8 <dsp_customchar>
	dsp_customchar(3,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E,0x1E);
    1a74:	0f 2e       	mov	r0, r31
    1a76:	fe e1       	ldi	r31, 0x1E	; 30
    1a78:	8f 2e       	mov	r8, r31
    1a7a:	f0 2d       	mov	r31, r0
    1a7c:	0f 2e       	mov	r0, r31
    1a7e:	fe e1       	ldi	r31, 0x1E	; 30
    1a80:	af 2e       	mov	r10, r31
    1a82:	f0 2d       	mov	r31, r0
    1a84:	0f 2e       	mov	r0, r31
    1a86:	fe e1       	ldi	r31, 0x1E	; 30
    1a88:	cf 2e       	mov	r12, r31
    1a8a:	f0 2d       	mov	r31, r0
    1a8c:	0f 2e       	mov	r0, r31
    1a8e:	fe e1       	ldi	r31, 0x1E	; 30
    1a90:	ef 2e       	mov	r14, r31
    1a92:	f0 2d       	mov	r31, r0
    1a94:	0e e1       	ldi	r16, 0x1E	; 30
    1a96:	2e e1       	ldi	r18, 0x1E	; 30
    1a98:	4e e1       	ldi	r20, 0x1E	; 30
    1a9a:	6e e1       	ldi	r22, 0x1E	; 30
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	14 df       	rcall	.-472    	; 0x18c8 <dsp_customchar>
	dsp_customchar(4,0xFF,0xFF,0xFF,0xFF,0,0,0,0);
    1aa0:	81 2c       	mov	r8, r1
    1aa2:	a1 2c       	mov	r10, r1
    1aa4:	c1 2c       	mov	r12, r1
    1aa6:	e1 2c       	mov	r14, r1
    1aa8:	0f ef       	ldi	r16, 0xFF	; 255
    1aaa:	2f ef       	ldi	r18, 0xFF	; 255
    1aac:	4f ef       	ldi	r20, 0xFF	; 255
    1aae:	6f ef       	ldi	r22, 0xFF	; 255
    1ab0:	84 e0       	ldi	r24, 0x04	; 4
    1ab2:	0a df       	rcall	.-492    	; 0x18c8 <dsp_customchar>
	dsp_customchar(5,0xFF,0xFF,0xFF,0xFF,0xEF,0xEF,0xEF,0xEF);
    1ab4:	0f 2e       	mov	r0, r31
    1ab6:	ff ee       	ldi	r31, 0xEF	; 239
    1ab8:	8f 2e       	mov	r8, r31
    1aba:	f0 2d       	mov	r31, r0
    1abc:	0f 2e       	mov	r0, r31
    1abe:	ff ee       	ldi	r31, 0xEF	; 239
    1ac0:	af 2e       	mov	r10, r31
    1ac2:	f0 2d       	mov	r31, r0
    1ac4:	0f 2e       	mov	r0, r31
    1ac6:	ff ee       	ldi	r31, 0xEF	; 239
    1ac8:	cf 2e       	mov	r12, r31
    1aca:	f0 2d       	mov	r31, r0
    1acc:	0f 2e       	mov	r0, r31
    1ace:	ff ee       	ldi	r31, 0xEF	; 239
    1ad0:	ef 2e       	mov	r14, r31
    1ad2:	f0 2d       	mov	r31, r0
    1ad4:	0f ef       	ldi	r16, 0xFF	; 255
    1ad6:	2f ef       	ldi	r18, 0xFF	; 255
    1ad8:	4f ef       	ldi	r20, 0xFF	; 255
    1ada:	6f ef       	ldi	r22, 0xFF	; 255
    1adc:	85 e0       	ldi	r24, 0x05	; 5
    1ade:	f4 de       	rcall	.-536    	; 0x18c8 <dsp_customchar>
	dsp_customchar(6,0x08,0x15,0x0A,0x04,0x0A,0x15,0x02,0x00);
    1ae0:	81 2c       	mov	r8, r1
    1ae2:	68 94       	set
    1ae4:	aa 24       	eor	r10, r10
    1ae6:	a1 f8       	bld	r10, 1
    1ae8:	0f 2e       	mov	r0, r31
    1aea:	f5 e1       	ldi	r31, 0x15	; 21
    1aec:	cf 2e       	mov	r12, r31
    1aee:	f0 2d       	mov	r31, r0
    1af0:	0f 2e       	mov	r0, r31
    1af2:	fa e0       	ldi	r31, 0x0A	; 10
    1af4:	ef 2e       	mov	r14, r31
    1af6:	f0 2d       	mov	r31, r0
    1af8:	04 e0       	ldi	r16, 0x04	; 4
    1afa:	2a e0       	ldi	r18, 0x0A	; 10
    1afc:	45 e1       	ldi	r20, 0x15	; 21
    1afe:	68 e0       	ldi	r22, 0x08	; 8
    1b00:	86 e0       	ldi	r24, 0x06	; 6
    1b02:	e2 de       	rcall	.-572    	; 0x18c8 <dsp_customchar>
};
    1b04:	00 00       	nop
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	0f 91       	pop	r16
    1b0c:	ef 90       	pop	r14
    1b0e:	cf 90       	pop	r12
    1b10:	af 90       	pop	r10
    1b12:	8f 90       	pop	r8
    1b14:	08 95       	ret

00001b16 <dsp_init>:

//runs through the init commands

void dsp_init()
{
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <dsp_init+0x6>
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1b20:	1a 82       	std	Y+2, r1	; 0x02
    1b22:	19 82       	std	Y+1, r1	; 0x01
    1b24:	0d c0       	rjmp	.+26     	; 0x1b40 <dsp_init+0x2a>
	{
		dsp_writedata(dsp_command[i],0);
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	80 50       	subi	r24, 0x00	; 0
    1b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2e:	fc 01       	movw	r30, r24
    1b30:	80 81       	ld	r24, Z
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	7a de       	rcall	.-780    	; 0x182a <dsp_writedata>
//runs through the init commands

void dsp_init()
{
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++)
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	9a 83       	std	Y+2, r25	; 0x02
    1b3e:	89 83       	std	Y+1, r24	; 0x01
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	07 97       	sbiw	r24, 0x07	; 7
    1b46:	7c f3       	brlt	.-34     	; 0x1b26 <dsp_init+0x10>
	{
		dsp_writedata(dsp_command[i],0);
	}
}
    1b48:	00 00       	nop
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <selftest>:
// 			}
// 		}
// 	}
// }

void selftest(){
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	
	if (systime_selftest+selftest_time*2 >= sys_time)
    1b5c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1b60:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1b64:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1b68:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1b6c:	88 54       	subi	r24, 0x48	; 72
    1b6e:	94 4f       	sbci	r25, 0xF4	; 244
    1b70:	af 4f       	sbci	r26, 0xFF	; 255
    1b72:	bf 4f       	sbci	r27, 0xFF	; 255
    1b74:	9c 01       	movw	r18, r24
    1b76:	ad 01       	movw	r20, r26
    1b78:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1b7c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1b80:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1b84:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1b88:	28 17       	cp	r18, r24
    1b8a:	39 07       	cpc	r19, r25
    1b8c:	4a 07       	cpc	r20, r26
    1b8e:	5b 07       	cpc	r21, r27
    1b90:	d8 f0       	brcs	.+54     	; 0x1bc8 <selftest+0x74>
	{
		string_to_digit(0,"      DIC V0.1      ",0,0);
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	6c e0       	ldi	r22, 0x0C	; 12
    1b98:	71 e0       	ldi	r23, 0x01	; 1
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	93 d8       	rcall	.-3802   	; 0xcc4 <string_to_digit>
		string_to_digit(0,"  Software written  ",0,1);
    1b9e:	21 e0       	ldi	r18, 0x01	; 1
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	61 e2       	ldi	r22, 0x21	; 33
    1ba4:	71 e0       	ldi	r23, 0x01	; 1
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	8d d8       	rcall	.-3814   	; 0xcc4 <string_to_digit>
		string_to_digit(0,"         by         ",0,2);
    1baa:	22 e0       	ldi	r18, 0x02	; 2
    1bac:	40 e0       	ldi	r20, 0x00	; 0
    1bae:	66 e3       	ldi	r22, 0x36	; 54
    1bb0:	71 e0       	ldi	r23, 0x01	; 1
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	87 d8       	rcall	.-3826   	; 0xcc4 <string_to_digit>
		string_to_digit(0,"Baltic Racing Alumni",0,3);
    1bb6:	23 e0       	ldi	r18, 0x03	; 3
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	6b e4       	ldi	r22, 0x4B	; 75
    1bbc:	71 e0       	ldi	r23, 0x01	; 1
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);	
    1bc0:	81 d8       	rcall	.-3838   	; 0xcc4 <string_to_digit>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	cc de       	rcall	.-616    	; 0x195e <dsp_write>
    1bc6:	35 c0       	rjmp	.+106    	; 0x1c32 <selftest+0xde>
	}
	else if (systime_selftest+selftest_time*4 >= sys_time)
    1bc8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1bcc:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1bd0:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1bd4:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1bd8:	80 59       	subi	r24, 0x90	; 144
    1bda:	98 4e       	sbci	r25, 0xE8	; 232
    1bdc:	af 4f       	sbci	r26, 0xFF	; 255
    1bde:	bf 4f       	sbci	r27, 0xFF	; 255
    1be0:	9c 01       	movw	r18, r24
    1be2:	ad 01       	movw	r20, r26
    1be4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1be8:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1bec:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1bf0:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1bf4:	28 17       	cp	r18, r24
    1bf6:	39 07       	cpc	r19, r25
    1bf8:	4a 07       	cpc	r20, r26
    1bfa:	5b 07       	cpc	r21, r27
    1bfc:	d0 f0       	brcs	.+52     	; 0x1c32 <selftest+0xde>
	{
		string_to_digit(0,"   And fixed by     ",0,0);
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	40 e0       	ldi	r20, 0x00	; 0
    1c02:	60 e6       	ldi	r22, 0x60	; 96
    1c04:	71 e0       	ldi	r23, 0x01	; 1
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	5d d8       	rcall	.-3910   	; 0xcc4 <string_to_digit>
		string_to_digit(0,"      Deine Mudda   ",0,1);
    1c0a:	21 e0       	ldi	r18, 0x01	; 1
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	65 e7       	ldi	r22, 0x75	; 117
    1c10:	71 e0       	ldi	r23, 0x01	; 1
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	57 d8       	rcall	.-3922   	; 0xcc4 <string_to_digit>
		string_to_digit(0,"--------------------",0,2);
    1c16:	22 e0       	ldi	r18, 0x02	; 2
    1c18:	40 e0       	ldi	r20, 0x00	; 0
    1c1a:	6a e8       	ldi	r22, 0x8A	; 138
    1c1c:	71 e0       	ldi	r23, 0x01	; 1
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	51 d8       	rcall	.-3934   	; 0xcc4 <string_to_digit>
		string_to_digit(0,"  #MOSFET-Barbecue  ",0,3);
    1c22:	23 e0       	ldi	r18, 0x03	; 3
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	6f e9       	ldi	r22, 0x9F	; 159
    1c28:	71 e0       	ldi	r23, 0x01	; 1
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	4b d8       	rcall	.-3946   	; 0xcc4 <string_to_digit>
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
		dsp_write(0);
    1c30:	96 de       	rcall	.-724    	; 0x195e <dsp_write>
    1c32:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	}
		
	if (systime_selftest + LEDS_on * (selftest_time/LED_Count+1)*4 < sys_time )
    1c36:	48 2f       	mov	r20, r24
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	24 e9       	ldi	r18, 0x94	; 148
    1c3c:	31 e0       	ldi	r19, 0x01	; 1
    1c3e:	42 9f       	mul	r20, r18
    1c40:	c0 01       	movw	r24, r0
    1c42:	43 9f       	mul	r20, r19
    1c44:	90 0d       	add	r25, r0
    1c46:	52 9f       	mul	r21, r18
    1c48:	90 0d       	add	r25, r0
    1c4a:	11 24       	eor	r1, r1
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	99 0f       	add	r25, r25
    1c50:	44 0b       	sbc	r20, r20
    1c52:	55 0b       	sbc	r21, r21
    1c54:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
    1c58:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1c5c:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <systime_selftest+0x2>
    1c60:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <systime_selftest+0x3>
    1c64:	82 0f       	add	r24, r18
    1c66:	93 1f       	adc	r25, r19
    1c68:	a4 1f       	adc	r26, r20
    1c6a:	b5 1f       	adc	r27, r21
    1c6c:	9c 01       	movw	r18, r24
    1c6e:	ad 01       	movw	r20, r26
    1c70:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1c74:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1c78:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1c7c:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1c80:	28 17       	cp	r18, r24
    1c82:	39 07       	cpc	r19, r25
    1c84:	4a 07       	cpc	r20, r26
    1c86:	5b 07       	cpc	r21, r27
    1c88:	98 f4       	brcc	.+38     	; 0x1cb0 <selftest+0x15c>
    1c8a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
	{
		if (LEDS_on <= LED_COUNT_TOP_LEFT)
    1c8e:	86 30       	cpi	r24, 0x06	; 6
    1c90:	20 f4       	brcc	.+8      	; 0x1c9a <selftest+0x146>
		{
			led_left_top_bar_select(LEDS_on);
    1c92:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1c96:	3b dd       	rcall	.-1418   	; 0x170e <led_left_top_bar_select>
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <selftest+0x152>
    1c9a:	85 e0       	ldi	r24, 0x05	; 5
		}
		else
		{
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    1c9c:	38 dd       	rcall	.-1424   	; 0x170e <led_left_top_bar_select>
    1c9e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
			led_right_top_bar_select(LEDS_on-LED_COUNT_TOP_LEFT);
    1ca2:	85 50       	subi	r24, 0x05	; 5
    1ca4:	70 dd       	rcall	.-1312   	; 0x1786 <led_right_top_bar_select>
    1ca6:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <LEDS_on>
    1caa:	8f 5f       	subi	r24, 0xFF	; 255
		}
		LEDS_on++;
    1cac:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <LEDS_on>
    1cb0:	00 00       	nop
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
 	}
    1cb6:	08 95       	ret

00001cb8 <error_handling>:
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	1f 92       	push	r1
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	19 82       	std	Y+1, r1	; 0x01
    1cc4:	23 e0       	ldi	r18, 0x03	; 3
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	50 e0       	ldi	r21, 0x00	; 0
    1ccc:	64 eb       	ldi	r22, 0xB4	; 180
    1cce:	71 e0       	ldi	r23, 0x01	; 1
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <string_to_digit>
    1cd8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1cdc:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1ce0:	83 37       	cpi	r24, 0x73	; 115
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	78 f0       	brcs	.+30     	; 0x1d04 <error_handling+0x4c>
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	88 2f       	mov	r24, r24
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	23 e0       	ldi	r18, 0x03	; 3
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	6f eb       	ldi	r22, 0xBF	; 191
    1cf4:	71 e0       	ldi	r23, 0x01	; 1
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 62 06 	call	0xcc4	; 0xcc4 <string_to_digit>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	8c 5f       	subi	r24, 0xFC	; 252
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1d08:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
    1d0c:	31 e0       	ldi	r19, 0x01	; 1
    1d0e:	cc 97       	sbiw	r24, 0x3c	; 60
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <error_handling+0x5c>
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 2f       	mov	r24, r24
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	04 96       	adiw	r24, 0x04	; 4
    1d1c:	21 e0       	ldi	r18, 0x01	; 1
    1d1e:	0b 97       	sbiw	r24, 0x0b	; 11
    1d20:	08 f0       	brcs	.+2      	; 0x1d24 <error_handling+0x6c>
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	83 2f       	mov	r24, r19
    1d26:	82 23       	and	r24, r18
    1d28:	88 23       	and	r24, r24
    1d2a:	79 f0       	breq	.+30     	; 0x1d4a <error_handling+0x92>
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	88 2f       	mov	r24, r24
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	23 e0       	ldi	r18, 0x03	; 3
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	ac 01       	movw	r20, r24
    1d38:	6f eb       	ldi	r22, 0xBF	; 191
    1d3a:	71 e0       	ldi	r23, 0x01	; 1
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 62 06 	call	0xcc4	; 0xcc4 <string_to_digit>
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	8c 5f       	subi	r24, 0xFC	; 252
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	88 23       	and	r24, r24
    1d4e:	51 f4       	brne	.+20     	; 0x1d64 <error_handling+0xac>
    1d50:	23 e0       	ldi	r18, 0x03	; 3
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	64 ec       	ldi	r22, 0xC4	; 196
    1d5a:	71 e0       	ldi	r23, 0x01	; 1
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 62 06 	call	0xcc4	; 0xcc4 <string_to_digit>
    1d64:	00 00       	nop
    1d66:	0f 90       	pop	r0
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <main>:
void LED_Blink_CTRL();


// MAIN FUNCTION
int main(void)
{
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	//Init and config part
	
	port_config();
    1d7e:	c9 d3       	rcall	.+1938   	; 0x2512 <port_config>
	sys_timer_config();
    1d80:	3e d4       	rcall	.+2172   	; 0x25fe <sys_timer_config>
    1d82:	0e 94 5f 02 	call	0x4be	; 0x4be <can_init_messages>
	can_init_messages();
	dsp_init();
    1d86:	c7 de       	rcall	.-626    	; 0x1b16 <dsp_init>
    1d88:	39 de       	rcall	.-910    	; 0x19fc <dsp_definechars>
	dsp_definechars();
    1d8a:	0e 94 a7 00 	call	0x14e	; 0x14e <can_cfg>
	can_cfg();
    1d8e:	f3 da       	rcall	.-2586   	; 0x1376 <dsp_clear>
	
	dsp_clear();
    1d90:	78 94       	sei
    1d92:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
	sei();
	systime_selftest = sys_time;
    1d96:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1d9a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1d9e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1da2:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <systime_selftest+0x1>
    1da6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <systime_selftest>
    1daa:	01 c0       	rjmp	.+2      	; 0x1dae <main+0x40>
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1dac:	d3 de       	rcall	.-602    	; 0x1b54 <selftest>
	{
		selftest();
    1dae:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <systime_selftest>
	
	dsp_clear();
	sei();
	systime_selftest = sys_time;
	
	while (systime_selftest+selftest_time*4 >= sys_time)
    1db2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <systime_selftest+0x1>
    1db6:	80 59       	subi	r24, 0x90	; 144
    1db8:	98 4e       	sbci	r25, 0xE8	; 232
    1dba:	9c 01       	movw	r18, r24
    1dbc:	99 0f       	add	r25, r25
    1dbe:	44 0b       	sbc	r20, r20
    1dc0:	55 0b       	sbc	r21, r21
    1dc2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1dc6:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    1dca:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1dce:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1dd2:	28 17       	cp	r18, r24
    1dd4:	39 07       	cpc	r19, r25
    1dd6:	4a 07       	cpc	r20, r26
    1dd8:	5b 07       	cpc	r21, r27
    1dda:	40 f7       	brcc	.-48     	; 0x1dac <main+0x3e>
	{
		selftest();
	}
	LED_Blink(10,3000);
    1ddc:	68 eb       	ldi	r22, 0xB8	; 184
    1dde:	7b e0       	ldi	r23, 0x0B	; 11
    1de0:	8a e0       	ldi	r24, 0x0A	; 10
    1de2:	52 d2       	rcall	.+1188   	; 0x2288 <LED_Blink>
    1de4:	c8 da       	rcall	.-2672   	; 0x1376 <dsp_clear>
	
	dsp_clear();
    1de6:	33 db       	rcall	.-2458   	; 0x144e <dsp_arrayinit_static>
    1de8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
	
	dsp_arrayinit_static();
    1dec:	81 32       	cpi	r24, 0x21	; 33

	
	//Loop
	while(1){

		if(update_data>=33){ //refresh rate for display about 30Hz
    1dee:	08 f4       	brcc	.+2      	; 0x1df2 <main+0x84>
    1df0:	d8 c1       	rjmp	.+944    	; 0x21a2 <main+0x434>
    1df2:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <update_data>
    1df6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			update_data = 0;
    1dfa:	88 23       	and	r24, r24
			
			if (dsp_mde == 0){ //DiSPlay Mode 0 = Home
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <main+0x92>
    1dfe:	3f c1       	rjmp	.+638    	; 0x207e <main+0x310>
    1e00:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <TSVoltage>
    1e04:	90 91 d5 01 	lds	r25, 0x01D5	; 0x8001d5 <TSVoltage+0x1>
				num_to_digit(0,TSVoltage,0,3,5,0);
    1e08:	e1 2c       	mov	r14, r1
    1e0a:	05 e0       	ldi	r16, 0x05	; 5
    1e0c:	23 e0       	ldi	r18, 0x03	; 3
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	bc 01       	movw	r22, r24
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    1e18:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    1e1c:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(0,GPS_Speed,0,3,14,0);
    1e20:	e1 2c       	mov	r14, r1
    1e22:	0e e0       	ldi	r16, 0x0E	; 14
    1e24:	23 e0       	ldi	r18, 0x03	; 3
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	bc 01       	movw	r22, r24
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    1e30:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <CLT>
    1e34:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <CLT+0x1>
				num_to_digit(0,CLT,0,2,6,1);//writes the number 121 for clt TEST ONLY!!!
    1e38:	ee 24       	eor	r14, r14
    1e3a:	e3 94       	inc	r14
    1e3c:	06 e0       	ldi	r16, 0x06	; 6
    1e3e:	22 e0       	ldi	r18, 0x02	; 2
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	bc 01       	movw	r22, r24
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    1e4a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <AccumulatorTemperature>
    1e4e:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <AccumulatorTemperature+0x1>
				num_to_digit(0,AccumulatorTemperature,0,2,15,1);
    1e52:	ee 24       	eor	r14, r14
    1e54:	e3 94       	inc	r14
    1e56:	0f e0       	ldi	r16, 0x0F	; 15
    1e58:	22 e0       	ldi	r18, 0x02	; 2
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    1e64:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <SOC>
    1e68:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <SOC+0x1>
				num_to_digit(0,SOC,0,3,14,2);
    1e6c:	68 94       	set
    1e6e:	ee 24       	eor	r14, r14
    1e70:	e1 f8       	bld	r14, 1
    1e72:	0e e0       	ldi	r16, 0x0E	; 14
    1e74:	23 e0       	ldi	r18, 0x03	; 3
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	bc 01       	movw	r22, r24
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    1e80:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <LVSVoltage>
    1e84:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <LVSVoltage+0x1>
				num_to_digit(0,LVSVoltage,0,2,15,3);
    1e88:	0f 2e       	mov	r0, r31
    1e8a:	f3 e0       	ldi	r31, 0x03	; 3
    1e8c:	ef 2e       	mov	r14, r31
    1e8e:	f0 2d       	mov	r31, r0
    1e90:	0f e0       	ldi	r16, 0x0F	; 15
    1e92:	22 e0       	ldi	r18, 0x02	; 2
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	bc 01       	movw	r22, r24
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    1e9e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <Rotary_Encoder_Left>
    1ea2:	88 23       	and	r24, r24

//-------------------------- Sitching between brake bias or LC Active------------------------------
					if (Rotary_Encoder_Left == 0){
    1ea4:	71 f4       	brne	.+28     	; 0x1ec2 <main+0x154>
    1ea6:	22 e0       	ldi	r18, 0x02	; 2
    1ea8:	40 e0       	ldi	r20, 0x00	; 0
    1eaa:	67 ec       	ldi	r22, 0xC7	; 199
						string_to_digit(0,"LC ACTIVE",0,2);
    1eac:	71 e0       	ldi	r23, 0x01	; 1
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <string_to_digit>
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
						LC_change = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <LC_Active>
						LC_Active =TRUE;
    1ec0:	2b c0       	rjmp	.+86     	; 0x1f18 <main+0x1aa>
    1ec2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <LC_Active>
    1ec6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
					}
					else{
						LC_Active = FALSE;
    1eca:	88 23       	and	r24, r24
						//on first iteration clear the window
						if ( LC_change > 0){
    1ecc:	91 f0       	breq	.+36     	; 0x1ef2 <main+0x184>
    1ece:	80 e1       	ldi	r24, 0x10	; 16
    1ed0:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <dsp_data+0x2a>
							dsp_data[0][2][2] = 0x10;
    1ed4:	80 e1       	ldi	r24, 0x10	; 16
    1ed6:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <dsp_data+0x2b>
							dsp_data[0][2][3] = 0x10;
    1eda:	80 e1       	ldi	r24, 0x10	; 16
    1edc:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <dsp_data+0x2c>
							dsp_data[0][2][4] = 0x10;
    1ee0:	80 e1       	ldi	r24, 0x10	; 16
    1ee2:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <dsp_data+0x2d>
							dsp_data[0][2][5] = 0x10;
    1ee6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LC_change>
							LC_change--;
    1eea:	81 50       	subi	r24, 0x01	; 1
    1eec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LC_change>
    1ef0:	ae da       	rcall	.-2724   	; 0x144e <dsp_arrayinit_static>
    1ef2:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <BPR>
							dsp_arrayinit_static();
    1ef6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
						}
						num_to_digit(0,calc_BB(BPF,BPR),0,2,6,2);//writes the number 55 for BB  TEST ONLY!!!
    1efa:	69 2f       	mov	r22, r25
    1efc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <calc_BB>
    1f00:	88 2f       	mov	r24, r24
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	68 94       	set
    1f06:	ee 24       	eor	r14, r14
    1f08:	e1 f8       	bld	r14, 1
    1f0a:	06 e0       	ldi	r16, 0x06	; 6
    1f0c:	22 e0       	ldi	r18, 0x02	; 2
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	bc 01       	movw	r22, r24
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    1f18:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <Laptime>
    1f1c:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <Laptime+0x1>
					}
//--------------------------------Switching between error indicator and diff time ---------------------------------------
				difftime = Laptime-Besttime;//calculate the differenz from your best time from your last
    1f20:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <Laptime+0x2>
    1f24:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <Laptime+0x3>
    1f28:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    1f2c:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
    1f30:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    1f34:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    1f38:	79 01       	movw	r14, r18
    1f3a:	8a 01       	movw	r16, r20
    1f3c:	e8 1a       	sub	r14, r24
    1f3e:	f9 0a       	sbc	r15, r25
    1f40:	0a 0b       	sbc	r16, r26
    1f42:	1b 0b       	sbc	r17, r27
    1f44:	d8 01       	movw	r26, r16
    1f46:	c7 01       	movw	r24, r14
    1f48:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <difftime>
    1f4c:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <difftime+0x1>
    1f50:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <difftime+0x2>
    1f54:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <difftime+0x3>
    1f58:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <difftime_old>
    1f5c:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <difftime_old+0x1>
				
				if (difftime_old != difftime){//If your diff time has been updated (new Lap) we want to show your diff on the homescreen
    1f60:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <difftime_old+0x2>
    1f64:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <difftime_old+0x3>
    1f68:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1f6c:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
    1f70:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1f74:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1f78:	28 17       	cp	r18, r24
    1f7a:	39 07       	cpc	r19, r25
    1f7c:	4a 07       	cpc	r20, r26
    1f7e:	5b 07       	cpc	r21, r27
    1f80:	a1 f1       	breq	.+104    	; 0x1fea <main+0x27c>
    1f82:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1f86:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
					systime_time_indicator = sys_time;
    1f8a:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    1f8e:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    1f92:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1f96:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1f9a:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1f9e:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1fa2:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <systime_time_indicator>
    1fa6:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <systime_time_indicator+0x1>
					systime_time_indicator += time_indicator_intervall;
    1faa:	a0 91 41 02 	lds	r26, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1fae:	b0 91 42 02 	lds	r27, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1fb2:	88 57       	subi	r24, 0x78	; 120
    1fb4:	9c 4e       	sbci	r25, 0xEC	; 236
    1fb6:	af 4f       	sbci	r26, 0xFF	; 255
    1fb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fba:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <systime_time_indicator>
    1fbe:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <systime_time_indicator+0x1>
    1fc2:	a0 93 41 02 	sts	0x0241, r26	; 0x800241 <systime_time_indicator+0x2>
    1fc6:	b0 93 42 02 	sts	0x0242, r27	; 0x800242 <systime_time_indicator+0x3>
    1fca:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    1fce:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					difftime_old = difftime;
    1fd2:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    1fd6:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    1fda:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <difftime_old>
    1fde:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <difftime_old+0x1>
    1fe2:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <difftime_old+0x2>
    1fe6:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <difftime_old+0x3>
    1fea:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <systime_time_indicator>
    1fee:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <systime_time_indicator+0x1>
				}
				if (systime_time_indicator > sys_time){
    1ff2:	40 91 41 02 	lds	r20, 0x0241	; 0x800241 <systime_time_indicator+0x2>
    1ff6:	50 91 42 02 	lds	r21, 0x0242	; 0x800242 <systime_time_indicator+0x3>
    1ffa:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    1ffe:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    2002:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2006:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    200a:	82 17       	cp	r24, r18
    200c:	93 07       	cpc	r25, r19
    200e:	a4 07       	cpc	r26, r20
    2010:	b5 07       	cpc	r27, r21
    2012:	68 f5       	brcc	.+90     	; 0x206e <main+0x300>
    2014:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    2018:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					time_to_digit(0,abs(difftime),1,3);
    201c:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    2020:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    2024:	99 23       	and	r25, r25
    2026:	1c f4       	brge	.+6      	; 0x202e <main+0x2c0>
    2028:	91 95       	neg	r25
    202a:	81 95       	neg	r24
    202c:	91 09       	sbc	r25, r1
    202e:	09 2e       	mov	r0, r25
    2030:	00 0c       	add	r0, r0
    2032:	aa 0b       	sbc	r26, r26
    2034:	bb 0b       	sbc	r27, r27
    2036:	03 e0       	ldi	r16, 0x03	; 3
    2038:	21 e0       	ldi	r18, 0x01	; 1
    203a:	ac 01       	movw	r20, r24
    203c:	bd 01       	movw	r22, r26
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	0e 94 19 08 	call	0x1032	; 0x1032 <time_to_digit>
    2044:	8a e3       	ldi	r24, 0x3A	; 58
    2046:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <dsp_data+0x41>
					dsp_data[0][3][5] = ':';
    204a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <difftime>
    204e:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <difftime+0x1>
					if (difftime >= 0){
    2052:	a0 91 46 02 	lds	r26, 0x0246	; 0x800246 <difftime+0x2>
    2056:	b0 91 47 02 	lds	r27, 0x0247	; 0x800247 <difftime+0x3>
    205a:	bb 23       	and	r27, r27
    205c:	24 f0       	brlt	.+8      	; 0x2066 <main+0x2f8>
    205e:	8b e2       	ldi	r24, 0x2B	; 43
    2060:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
						dsp_data[0][3][0] = '+';
    2064:	0c c0       	rjmp	.+24     	; 0x207e <main+0x310>
    2066:	8d e2       	ldi	r24, 0x2D	; 45
    2068:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <dsp_data+0x3c>
					}
					else{
					dsp_data[0][3][0] = '-';
    206c:	08 c0       	rjmp	.+16     	; 0x207e <main+0x310>
    206e:	24 de       	rcall	.-952    	; 0x1cb8 <error_handling>
    2070:	23 e0       	ldi	r18, 0x03	; 3
					}
				}
				else{//If the diff time has not been updated within the the last intervall we want to show the error stuff
					error_handling();
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	68 e2       	ldi	r22, 0x28	; 40
					string_to_digit(0,error_indicator,0,3);					
    2076:	72 e0       	ldi	r23, 0x02	; 2
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <string_to_digit>
    207e:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    2082:	81 30       	cpi	r24, 0x01	; 1
			}
			
			
			
			
			if (dsp_mde == 1){ //debug screen
    2084:	c1 f5       	brne	.+112    	; 0x20f6 <main+0x388>
    2086:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <APPS1>
    208a:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS1,0,3,5,1);
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	ee 24       	eor	r14, r14
    2090:	e3 94       	inc	r14
    2092:	05 e0       	ldi	r16, 0x05	; 5
    2094:	23 e0       	ldi	r18, 0x03	; 3
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	bc 01       	movw	r22, r24
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    20a0:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <APPS2>
    20a4:	88 2f       	mov	r24, r24
				num_to_digit(1,APPS2,0,3,12,1);
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	ee 24       	eor	r14, r14
    20aa:	e3 94       	inc	r14
    20ac:	0c e0       	ldi	r16, 0x0C	; 12
    20ae:	23 e0       	ldi	r18, 0x03	; 3
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	bc 01       	movw	r22, r24
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    20ba:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <BPF>
    20be:	88 2f       	mov	r24, r24

				num_to_digit(1,BPF,0,2,4,3);
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	0f 2e       	mov	r0, r31
    20c4:	f3 e0       	ldi	r31, 0x03	; 3
    20c6:	ef 2e       	mov	r14, r31
    20c8:	f0 2d       	mov	r31, r0
    20ca:	04 e0       	ldi	r16, 0x04	; 4
    20cc:	22 e0       	ldi	r18, 0x02	; 2
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	bc 01       	movw	r22, r24
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    20d8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <BPR>
    20dc:	88 2f       	mov	r24, r24
				num_to_digit(1,BPR,0,2,10,3);				
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0f 2e       	mov	r0, r31
    20e2:	f3 e0       	ldi	r31, 0x03	; 3
    20e4:	ef 2e       	mov	r14, r31
    20e6:	f0 2d       	mov	r31, r0
    20e8:	0a e0       	ldi	r16, 0x0A	; 10
    20ea:	22 e0       	ldi	r18, 0x02	; 2
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	bc 01       	movw	r22, r24
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    20f6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
    20fa:	82 30       	cpi	r24, 0x02	; 2
			
			
			
			
			
			if (dsp_mde == 2){ //Times screen
    20fc:	09 f0       	breq	.+2      	; 0x2100 <main+0x392>
    20fe:	51 c0       	rjmp	.+162    	; 0x21a2 <main+0x434>
    2100:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <Besttime>
    2104:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <Besttime+0x1>
				time_to_digit(2,Besttime,4,1); //BEST/LAP Convertes a time in ms to minutes:seconds:milliseconds
    2108:	a0 91 fd 01 	lds	r26, 0x01FD	; 0x8001fd <Besttime+0x2>
    210c:	b0 91 fe 01 	lds	r27, 0x01FE	; 0x8001fe <Besttime+0x3>
    2110:	01 e0       	ldi	r16, 0x01	; 1
    2112:	24 e0       	ldi	r18, 0x04	; 4
    2114:	ac 01       	movw	r20, r24
    2116:	bd 01       	movw	r22, r26
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	0e 94 19 08 	call	0x1032	; 0x1032 <time_to_digit>
    211e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Pred_time>
    2122:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Pred_time+0x1>
				time_to_digit(2,Pred_time,4,2); //Predicted
    2126:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <Pred_time+0x2>
    212a:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <Pred_time+0x3>
    212e:	02 e0       	ldi	r16, 0x02	; 2
    2130:	24 e0       	ldi	r18, 0x04	; 4
    2132:	ac 01       	movw	r20, r24
    2134:	bd 01       	movw	r22, r26
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	0e 94 19 08 	call	0x1032	; 0x1032 <time_to_digit>
    213c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <ODO>
    2140:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <ODO+0x1>
				num_to_digit(2,ODO,0,3,10,3); //ODO
    2144:	0f 2e       	mov	r0, r31
    2146:	f3 e0       	ldi	r31, 0x03	; 3
    2148:	ef 2e       	mov	r14, r31
    214a:	f0 2d       	mov	r31, r0
    214c:	0a e0       	ldi	r16, 0x0A	; 10
    214e:	23 e0       	ldi	r18, 0x03	; 3
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	bc 01       	movw	r22, r24
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    215a:	e1 2c       	mov	r14, r1
    215c:	03 e0       	ldi	r16, 0x03	; 3
    215e:	21 e0       	ldi	r18, 0x01	; 1
				num_to_digit(2,9,0,1,3,0);//TC setting needs to be implemented!!!
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	69 e0       	ldi	r22, 0x09	; 9
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    216c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <LapNumber>
    2170:	88 2f       	mov	r24, r24
				num_to_digit(2,LapNumber,0,2,3,3);//Lap number
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0f 2e       	mov	r0, r31
    2176:	f3 e0       	ldi	r31, 0x03	; 3
    2178:	ef 2e       	mov	r14, r31
    217a:	f0 2d       	mov	r31, r0
    217c:	03 e0       	ldi	r16, 0x03	; 3
    217e:	22 e0       	ldi	r18, 0x02	; 2
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	bc 01       	movw	r22, r24
    2184:	82 e0       	ldi	r24, 0x02	; 2
    2186:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    218a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <GPS_Speed>
    218e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <GPS_Speed+0x1>
				num_to_digit(2,GPS_Speed,0,3,10,0);//Speed
    2192:	e1 2c       	mov	r14, r1
    2194:	0a e0       	ldi	r16, 0x0A	; 10
    2196:	23 e0       	ldi	r18, 0x03	; 3
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	bc 01       	movw	r22, r24
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <num_to_digit>
    21a2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <draw_data>
				
			}
		}
		if(draw_data){ //1000Hz/1ms loop
    21a6:	88 23       	and	r24, r24
    21a8:	31 f0       	breq	.+12     	; 0x21b6 <main+0x448>
    21aa:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <dsp_mde>
			dsp_write(dsp_mde);
    21ae:	d7 db       	rcall	.-2130   	; 0x195e <dsp_write>
    21b0:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <draw_data>
			draw_data = 0;
    21b4:	96 d0       	rcall	.+300    	; 0x22e2 <LED_Blink_CTRL>
    21b6:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
			LED_Blink_CTRL();		
    21ba:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}	
		if((sys_time - time_100) >= 10){//100Hz/10ms loop
    21be:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    21c2:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    21c6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <time_100>
    21ca:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <time_100+0x1>
    21ce:	a0 91 39 02 	lds	r26, 0x0239	; 0x800239 <time_100+0x2>
    21d2:	b0 91 3a 02 	lds	r27, 0x023A	; 0x80023a <time_100+0x3>
    21d6:	79 01       	movw	r14, r18
    21d8:	8a 01       	movw	r16, r20
    21da:	e8 1a       	sub	r14, r24
    21dc:	f9 0a       	sbc	r15, r25
    21de:	0a 0b       	sbc	r16, r26
    21e0:	1b 0b       	sbc	r17, r27
    21e2:	d8 01       	movw	r26, r16
    21e4:	c7 01       	movw	r24, r14
    21e6:	0a 97       	sbiw	r24, 0x0a	; 10
    21e8:	a1 05       	cpc	r26, r1
    21ea:	b1 05       	cpc	r27, r1
    21ec:	a0 f0       	brcs	.+40     	; 0x2216 <main+0x4a8>
    21ee:	0e 94 38 03 	call	0x670	; 0x670 <CAN_recieve>
    21f2:	0e 94 9e 03 	call	0x73c	; 0x73c <CAN_put_data>
			CAN_recieve();
    21f6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
			CAN_put_data();			
    21fa:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_100 = sys_time;		
    21fe:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2202:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2206:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <time_100>
    220a:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <time_100+0x1>
    220e:	a0 93 39 02 	sts	0x0239, r26	; 0x800239 <time_100+0x2>
    2212:	b0 93 3a 02 	sts	0x023A, r27	; 0x80023a <time_100+0x3>
    2216:	20 91 3b 02 	lds	r18, 0x023B	; 0x80023b <sys_time>
    221a:	30 91 3c 02 	lds	r19, 0x023C	; 0x80023c <sys_time+0x1>
			
		}
		if((sys_time - time_10) >= 100){//10Hz/100ms loop
    221e:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <sys_time+0x2>
    2222:	50 91 3e 02 	lds	r21, 0x023E	; 0x80023e <sys_time+0x3>
    2226:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <time_10>
    222a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <time_10+0x1>
    222e:	a0 91 35 02 	lds	r26, 0x0235	; 0x800235 <time_10+0x2>
    2232:	b0 91 36 02 	lds	r27, 0x0236	; 0x800236 <time_10+0x3>
    2236:	79 01       	movw	r14, r18
    2238:	8a 01       	movw	r16, r20
    223a:	e8 1a       	sub	r14, r24
    223c:	f9 0a       	sbc	r15, r25
    223e:	0a 0b       	sbc	r16, r26
    2240:	1b 0b       	sbc	r17, r27
    2242:	d8 01       	movw	r26, r16
    2244:	c7 01       	movw	r24, r14
    2246:	84 36       	cpi	r24, 0x64	; 100
    2248:	91 05       	cpc	r25, r1
    224a:	a1 05       	cpc	r26, r1
    224c:	b1 05       	cpc	r27, r1
    224e:	08 f4       	brcc	.+2      	; 0x2252 <main+0x4e4>
    2250:	cb cd       	rjmp	.-1130   	; 0x1de8 <main+0x7a>
    2252:	84 e3       	ldi	r24, 0x34	; 52
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	24 e3       	ldi	r18, 0x34	; 52
			PORTG ^= (1<<PG3);
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	f9 01       	movw	r30, r18
    225c:	30 81       	ld	r19, Z
    225e:	28 e0       	ldi	r18, 0x08	; 8
    2260:	23 27       	eor	r18, r19
    2262:	fc 01       	movw	r30, r24
    2264:	20 83       	st	Z, r18
    2266:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    226a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
			time_10 = sys_time;
    226e:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2272:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2276:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <time_10>
    227a:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <time_10+0x1>
    227e:	a0 93 35 02 	sts	0x0235, r26	; 0x800235 <time_10+0x2>
    2282:	b0 93 36 02 	sts	0x0236, r27	; 0x800236 <time_10+0x3>
    2286:	b0 cd       	rjmp	.-1184   	; 0x1de8 <main+0x7a>

00002288 <LED_Blink>:
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
		}
	}	
    228c:	00 d0       	rcall	.+0      	; 0x228e <LED_Blink+0x6>
}

void LED_Blink(uint8_t Anzahl_Blinks, uint16_t Zeit_fuer_Blinken){
    228e:	1f 92       	push	r1
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	7b 83       	std	Y+3, r23	; 0x03
    2298:	6a 83       	std	Y+2, r22	; 0x02
	Anzahl_Blinks_Glob = Anzahl_Blinks;
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <Anzahl_Blinks_Glob>
	Zeit_fuer_Blinken_Glob = Zeit_fuer_Blinken;
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	9b 81       	ldd	r25, Y+3	; 0x03
    22a4:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    22a8:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <Zeit_fuer_Blinken_Glob>
	sys_time_blink = sys_time;
    22ac:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    22b0:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    22b4:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    22b8:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    22bc:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <sys_time_blink>
    22c0:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <sys_time_blink+0x1>
    22c4:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <sys_time_blink+0x2>
    22c8:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <sys_time_blink+0x3>
	LED_Blink_Flag = 0;
    22cc:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    22d0:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	}
    22d4:	00 00       	nop
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <LED_Blink_CTRL>:

void LED_Blink_CTRL(){
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
	
	if (LED_Blink_Flag < Anzahl_Blinks_Glob)
    22ee:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <LED_Blink_Flag>
    22f2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    22f6:	98 17       	cp	r25, r24
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <LED_Blink_CTRL+0x1a>
    22fa:	a2 c0       	rjmp	.+324    	; 0x2440 <LED_Blink_CTRL+0x15e>
	{
		if (((sys_time_blink + (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)/2) + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 0))
    22fc:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    2300:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    2304:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    2308:	88 2f       	mov	r24, r24
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	ac 01       	movw	r20, r24
    2312:	c9 01       	movw	r24, r18
    2314:	ba 01       	movw	r22, r20
    2316:	45 d3       	rcall	.+1674   	; 0x29a2 <__udivmodhi4>
    2318:	cb 01       	movw	r24, r22
    231a:	96 95       	lsr	r25
    231c:	87 95       	ror	r24
    231e:	9c 01       	movw	r18, r24
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    2328:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    232c:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    2330:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    2334:	89 01       	movw	r16, r18
    2336:	9a 01       	movw	r18, r20
    2338:	08 0f       	add	r16, r24
    233a:	19 1f       	adc	r17, r25
    233c:	2a 1f       	adc	r18, r26
    233e:	3b 1f       	adc	r19, r27
    2340:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    2344:	e8 2f       	mov	r30, r24
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    234c:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    2350:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	bc 01       	movw	r22, r24
    235e:	ca 01       	movw	r24, r20
    2360:	20 d3       	rcall	.+1600   	; 0x29a2 <__udivmodhi4>
    2362:	cb 01       	movw	r24, r22
    2364:	ac 01       	movw	r20, r24
    2366:	e4 9f       	mul	r30, r20
    2368:	c0 01       	movw	r24, r0
    236a:	e5 9f       	mul	r30, r21
    236c:	90 0d       	add	r25, r0
    236e:	f4 9f       	mul	r31, r20
    2370:	90 0d       	add	r25, r0
    2372:	11 24       	eor	r1, r1
    2374:	cc 01       	movw	r24, r24
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	a9 01       	movw	r20, r18
    237c:	98 01       	movw	r18, r16
    237e:	28 0f       	add	r18, r24
    2380:	39 1f       	adc	r19, r25
    2382:	4a 1f       	adc	r20, r26
    2384:	5b 1f       	adc	r21, r27
    2386:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    238a:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    238e:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2392:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2396:	82 17       	cp	r24, r18
    2398:	93 07       	cpc	r25, r19
    239a:	a4 07       	cpc	r26, r20
    239c:	b5 07       	cpc	r27, r21
    239e:	88 f0       	brcs	.+34     	; 0x23c2 <LED_Blink_CTRL+0xe0>
    23a0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
    23a4:	88 23       	and	r24, r24
    23a6:	69 f4       	brne	.+26     	; 0x23c2 <LED_Blink_CTRL+0xe0>
		{
			LED_Blink_on = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <LED_Blink_on>
			
			led_left_top_bar_select(LED_COUNT_TOP_LEFT);
    23ae:	85 e0       	ldi	r24, 0x05	; 5
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
    23b0:	ae d9       	rcall	.-3236   	; 0x170e <led_left_top_bar_select>
    23b2:	8a e0       	ldi	r24, 0x0A	; 10
    23b4:	e8 d9       	rcall	.-3120   	; 0x1786 <led_right_top_bar_select>
			
			LED_Blink_Flag++;
    23b6:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    23ba:	8f 5f       	subi	r24, 0xFF	; 255
    23bc:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <LED_Blink_Flag>
	Anzahl_Blinks_Glob = 0;
	LED_Blink_on = 0;
	clear_top_left_bar();
	clear_top_right_bar();
	}
    23c0:	47 c0       	rjmp	.+142    	; 0x2450 <LED_Blink_CTRL+0x16e>
			led_right_top_bar_select(LED_COUNT_TOP_RIGHT);
			
			LED_Blink_Flag++;
			
		}
		else if (((sys_time_blink  + (LED_Blink_Flag * (Zeit_fuer_Blinken_Glob/(Anzahl_Blinks_Glob*2)))) <= sys_time) && (LED_Blink_on == 1))
    23c2:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <LED_Blink_Flag>
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 91 4f 02 	lds	r20, 0x024F	; 0x80024f <Zeit_fuer_Blinken_Glob>
    23ce:	50 91 50 02 	lds	r21, 0x0250	; 0x800250 <Zeit_fuer_Blinken_Glob+0x1>
    23d2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <Anzahl_Blinks_Glob>
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	bc 01       	movw	r22, r24
    23e0:	ca 01       	movw	r24, r20
    23e2:	df d2       	rcall	.+1470   	; 0x29a2 <__udivmodhi4>
    23e4:	cb 01       	movw	r24, r22
    23e6:	ac 01       	movw	r20, r24
    23e8:	24 9f       	mul	r18, r20
    23ea:	c0 01       	movw	r24, r0
    23ec:	25 9f       	mul	r18, r21
    23ee:	90 0d       	add	r25, r0
    23f0:	34 9f       	mul	r19, r20
    23f2:	90 0d       	add	r25, r0
    23f4:	11 24       	eor	r1, r1
    23f6:	9c 01       	movw	r18, r24
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <sys_time_blink>
    2400:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <sys_time_blink+0x1>
    2404:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <sys_time_blink+0x2>
    2408:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <sys_time_blink+0x3>
    240c:	28 0f       	add	r18, r24
    240e:	39 1f       	adc	r19, r25
    2410:	4a 1f       	adc	r20, r26
    2412:	5b 1f       	adc	r21, r27
    2414:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    2418:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    241c:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2420:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2424:	82 17       	cp	r24, r18
    2426:	93 07       	cpc	r25, r19
    2428:	a4 07       	cpc	r26, r20
    242a:	b5 07       	cpc	r27, r21
    242c:	88 f0       	brcs	.+34     	; 0x2450 <LED_Blink_CTRL+0x16e>
    242e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <LED_Blink_on>
		{
			LED_Blink_on = 0;
    2432:	81 30       	cpi	r24, 0x01	; 1
    2434:	69 f4       	brne	.+26     	; 0x2450 <LED_Blink_CTRL+0x16e>
			clear_top_left_bar();
    2436:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
			clear_top_right_bar();
    243a:	3a d9       	rcall	.-3468   	; 0x16b0 <clear_top_left_bar>
    243c:	53 d9       	rcall	.-3418   	; 0x16e4 <clear_top_right_bar>
		}
	}else{
	LED_Blink_Flag = 0;
    243e:	08 c0       	rjmp	.+16     	; 0x2450 <LED_Blink_CTRL+0x16e>
	Anzahl_Blinks_Glob = 0;
    2440:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <LED_Blink_Flag>
	LED_Blink_on = 0;
    2444:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <Anzahl_Blinks_Glob>
	clear_top_left_bar();
    2448:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <LED_Blink_on>
	clear_top_right_bar();
    244c:	31 d9       	rcall	.-3486   	; 0x16b0 <clear_top_left_bar>
    244e:	4a d9       	rcall	.-3436   	; 0x16e4 <clear_top_right_bar>
	}
    2450:	00 00       	nop
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	08 95       	ret

0000245c <__vector_20>:
    245c:	1f 92       	push	r1
    245e:	0f 92       	push	r0
    2460:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2464:	0f 92       	push	r0
    2466:	11 24       	eor	r1, r1
    2468:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    246c:	0f 92       	push	r0
    246e:	2f 93       	push	r18
    2470:	3f 93       	push	r19
    2472:	8f 93       	push	r24
    2474:	9f 93       	push	r25
    2476:	ef 93       	push	r30
    2478:	ff 93       	push	r31
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <spi_state>
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	82 30       	cpi	r24, 0x02	; 2
    248c:	91 05       	cpc	r25, r1
    248e:	81 f0       	breq	.+32     	; 0x24b0 <__vector_20+0x54>
    2490:	83 30       	cpi	r24, 0x03	; 3
    2492:	91 05       	cpc	r25, r1
    2494:	b9 f0       	breq	.+46     	; 0x24c4 <__vector_20+0x68>
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	09 f0       	breq	.+2      	; 0x249c <__vector_20+0x40>
    249a:	29 c0       	rjmp	.+82     	; 0x24ee <__vector_20+0x92>
    249c:	8e e4       	ldi	r24, 0x4E	; 78
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	20 91 50 04 	lds	r18, 0x0450	; 0x800450 <current_msg+0x2>
    24a4:	fc 01       	movw	r30, r24
    24a6:	20 83       	st	Z, r18
    24a8:	82 e0       	ldi	r24, 0x02	; 2
    24aa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    24ae:	1f c0       	rjmp	.+62     	; 0x24ee <__vector_20+0x92>
    24b0:	8e e4       	ldi	r24, 0x4E	; 78
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	20 91 51 04 	lds	r18, 0x0451	; 0x800451 <current_msg+0x3>
    24b8:	fc 01       	movw	r30, r24
    24ba:	20 83       	st	Z, r18
    24bc:	83 e0       	ldi	r24, 0x03	; 3
    24be:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spi_state>
    24c2:	15 c0       	rjmp	.+42     	; 0x24ee <__vector_20+0x92>
    24c4:	85 e2       	ldi	r24, 0x25	; 37
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	25 e2       	ldi	r18, 0x25	; 37
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	f9 01       	movw	r30, r18
    24ce:	20 81       	ld	r18, Z
    24d0:	20 68       	ori	r18, 0x80	; 128
    24d2:	fc 01       	movw	r30, r24
    24d4:	20 83       	st	Z, r18
    24d6:	82 e2       	ldi	r24, 0x22	; 34
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	22 e2       	ldi	r18, 0x22	; 34
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	f9 01       	movw	r30, r18
    24e0:	20 81       	ld	r18, Z
    24e2:	28 60       	ori	r18, 0x08	; 8
    24e4:	fc 01       	movw	r30, r24
    24e6:	20 83       	st	Z, r18
    24e8:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <spi_state>
    24ec:	00 00       	nop
    24ee:	00 00       	nop
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	ff 91       	pop	r31
    24f6:	ef 91       	pop	r30
    24f8:	9f 91       	pop	r25
    24fa:	8f 91       	pop	r24
    24fc:	3f 91       	pop	r19
    24fe:	2f 91       	pop	r18
    2500:	0f 90       	pop	r0
    2502:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
    2506:	0f 90       	pop	r0
    2508:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    250c:	0f 90       	pop	r0
    250e:	1f 90       	pop	r1
    2510:	18 95       	reti

00002512 <port_config>:
extern volatile unsigned long sys_time;
uint8_t update_data = 0;
uint8_t draw_data = 0;

void port_config(void)
{
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	//PA2 --> IMD_LED
	//PA3 --> Chip_Select_RGB_Left
	//(PA4 - PA7) --> Top Bar
	DDRA |= (1<<PA2) | (1<<PA3) | (1<<PA4) | (1<<PA5) | (1<<PA6) | (1<<PA7);
    251a:	81 e2       	ldi	r24, 0x21	; 33
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	21 e2       	ldi	r18, 0x21	; 33
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	f9 01       	movw	r30, r18
    2524:	20 81       	ld	r18, Z
    2526:	2c 6f       	ori	r18, 0xFC	; 252
    2528:	fc 01       	movw	r30, r24
    252a:	20 83       	st	Z, r18
	
	//Button Inputs
	DDRA &= ~(1<<PA0) & ~(1<<PA1);
    252c:	81 e2       	ldi	r24, 0x21	; 33
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	21 e2       	ldi	r18, 0x21	; 33
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	f9 01       	movw	r30, r18
    2536:	20 81       	ld	r18, Z
    2538:	2c 7f       	andi	r18, 0xFC	; 252
    253a:	fc 01       	movw	r30, r24
    253c:	20 83       	st	Z, r18
	//PB2 --> MOSI
	//PB4 --> Display_Enable
	//PB5 --> Display_R/W
	//PB6 --> Display_RS
	//PB7 --> Chip_Select_RGB_Right
	DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB4) | (1<<PB5) | (1<<PB6) | (1<<PB7);
    253e:	84 e2       	ldi	r24, 0x24	; 36
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	24 e2       	ldi	r18, 0x24	; 36
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	f9 01       	movw	r30, r18
    2548:	20 81       	ld	r18, Z
    254a:	26 6f       	ori	r18, 0xF6	; 246
    254c:	fc 01       	movw	r30, r24
    254e:	20 83       	st	Z, r18
	
	//PB3 --> MISO
	DDRB &= ~(1<<PB3);
    2550:	84 e2       	ldi	r24, 0x24	; 36
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	24 e2       	ldi	r18, 0x24	; 36
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	f9 01       	movw	r30, r18
    255a:	20 81       	ld	r18, Z
    255c:	27 7f       	andi	r18, 0xF7	; 247
    255e:	fc 01       	movw	r30, r24
    2560:	20 83       	st	Z, r18
	
	//Top Bar
	DDRC = 0xFF;
    2562:	87 e2       	ldi	r24, 0x27	; 39
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	2f ef       	ldi	r18, 0xFF	; 255
    2568:	fc 01       	movw	r30, r24
    256a:	20 83       	st	Z, r18
	
	//Bottom Bar
	DDRD |= (1<<PD0) | (1<<PD1) | (1<<PD2) | (1<<PD3) | (1<<PD4) | (1<<PD7);
    256c:	8a e2       	ldi	r24, 0x2A	; 42
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	2a e2       	ldi	r18, 0x2A	; 42
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	f9 01       	movw	r30, r18
    2576:	20 81       	ld	r18, Z
    2578:	2f 69       	ori	r18, 0x9F	; 159
    257a:	fc 01       	movw	r30, r24
    257c:	20 83       	st	Z, r18
	
	//Display-Bus Bar
	DDRE = 0xFF;
    257e:	8d e2       	ldi	r24, 0x2D	; 45
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	2f ef       	ldi	r18, 0xFF	; 255
    2584:	fc 01       	movw	r30, r24
    2586:	20 83       	st	Z, r18
	
	//SDCI Inputs:
	//PF1 --> SDB_DB
	//PF2 --> Inertia
	//PF3 --> BOTS
	DDRF &= ~(1<<PF1) & ~(1<<PF2) & ~(1<<PF3);
    2588:	80 e3       	ldi	r24, 0x30	; 48
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	20 e3       	ldi	r18, 0x30	; 48
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	f9 01       	movw	r30, r18
    2592:	20 81       	ld	r18, Z
    2594:	21 7f       	andi	r18, 0xF1	; 241
    2596:	fc 01       	movw	r30, r24
    2598:	20 83       	st	Z, r18
	
	//(PG0 - PG2) --> Top Bar
	//PG3 --> Heart
	//PG4 --> Fault
	DDRG |= (1<<PG0) | (1<<PG1) | (1<<PG2) | (1<<PG3) | (1<<PG4);
    259a:	83 e3       	ldi	r24, 0x33	; 51
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	23 e3       	ldi	r18, 0x33	; 51
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	f9 01       	movw	r30, r18
    25a4:	20 81       	ld	r18, Z
    25a6:	2f 61       	ori	r18, 0x1F	; 31
    25a8:	fc 01       	movw	r30, r24
    25aa:	20 83       	st	Z, r18
	
	//Resetting all PORTS
	PORTA = 0;
    25ac:	82 e2       	ldi	r24, 0x22	; 34
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	fc 01       	movw	r30, r24
    25b2:	10 82       	st	Z, r1
	//Resetting Display-Control-Ports
	PORTB = 0;
    25b4:	85 e2       	ldi	r24, 0x25	; 37
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	fc 01       	movw	r30, r24
    25ba:	10 82       	st	Z, r1
	PORTC = 0;
    25bc:	88 e2       	ldi	r24, 0x28	; 40
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	fc 01       	movw	r30, r24
    25c2:	10 82       	st	Z, r1
	PORTD = 0;
    25c4:	8b e2       	ldi	r24, 0x2B	; 43
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	fc 01       	movw	r30, r24
    25ca:	10 82       	st	Z, r1
	//Resetting Display-Bus Bar
	PORTE = 0;
    25cc:	8e e2       	ldi	r24, 0x2E	; 46
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	fc 01       	movw	r30, r24
    25d2:	10 82       	st	Z, r1
	PORTF = 0;
    25d4:	81 e3       	ldi	r24, 0x31	; 49
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	fc 01       	movw	r30, r24
    25da:	10 82       	st	Z, r1
	PORTG = 0;
    25dc:	84 e3       	ldi	r24, 0x34	; 52
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	fc 01       	movw	r30, r24
    25e2:	10 82       	st	Z, r1
	
	//Selecting Pull-Up Resistors for Button - Inputs
	PORTA |= (1<<PA0) | (1<<PA1);
    25e4:	82 e2       	ldi	r24, 0x22	; 34
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	22 e2       	ldi	r18, 0x22	; 34
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	f9 01       	movw	r30, r18
    25ee:	20 81       	ld	r18, Z
    25f0:	23 60       	ori	r18, 0x03	; 3
    25f2:	fc 01       	movw	r30, r24
    25f4:	20 83       	st	Z, r18
}
    25f6:	00 00       	nop
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	08 95       	ret

000025fe <sys_timer_config>:

void sys_timer_config(void)
{
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	//8 bit Timer 0 configuration
	//Mode --> CTC, Divider --> /64
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
    2606:	84 e4       	ldi	r24, 0x44	; 68
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	2b e0       	ldi	r18, 0x0B	; 11
    260c:	fc 01       	movw	r30, r24
    260e:	20 83       	st	Z, r18
	//compare interrupt enable
	TIMSK0 = 0 | (1<<OCIE0A);
    2610:	8e e6       	ldi	r24, 0x6E	; 110
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	22 e0       	ldi	r18, 0x02	; 2
    2616:	fc 01       	movw	r30, r24
    2618:	20 83       	st	Z, r18
	//compare value for 1ms;
	OCR0A = 250-1;
    261a:	87 e4       	ldi	r24, 0x47	; 71
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	29 ef       	ldi	r18, 0xF9	; 249
    2620:	fc 01       	movw	r30, r24
    2622:	20 83       	st	Z, r18
}
    2624:	00 00       	nop
    2626:	df 91       	pop	r29
    2628:	cf 91       	pop	r28
    262a:	08 95       	ret

0000262c <__vector_16>:

/*	Interrupt Service Routines	*/
ISR(TIMER0_COMP_vect)
{
    262c:	1f 92       	push	r1
    262e:	0f 92       	push	r0
    2630:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2634:	0f 92       	push	r0
    2636:	11 24       	eor	r1, r1
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
    263c:	af 93       	push	r26
    263e:	bf 93       	push	r27
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	draw_data = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <draw_data>
	update_data++;
    264e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <update_data>
    2652:	8f 5f       	subi	r24, 0xFF	; 255
    2654:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <update_data>
	sys_time++;
    2658:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <sys_time>
    265c:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <sys_time+0x1>
    2660:	a0 91 3d 02 	lds	r26, 0x023D	; 0x80023d <sys_time+0x2>
    2664:	b0 91 3e 02 	lds	r27, 0x023E	; 0x80023e <sys_time+0x3>
    2668:	01 96       	adiw	r24, 0x01	; 1
    266a:	a1 1d       	adc	r26, r1
    266c:	b1 1d       	adc	r27, r1
    266e:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <sys_time>
    2672:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <sys_time+0x1>
    2676:	a0 93 3d 02 	sts	0x023D, r26	; 0x80023d <sys_time+0x2>
    267a:	b0 93 3e 02 	sts	0x023E, r27	; 0x80023e <sys_time+0x3>
	
}
    267e:	00 00       	nop
    2680:	df 91       	pop	r29
    2682:	cf 91       	pop	r28
    2684:	bf 91       	pop	r27
    2686:	af 91       	pop	r26
    2688:	9f 91       	pop	r25
    268a:	8f 91       	pop	r24
    268c:	0f 90       	pop	r0
    268e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    2692:	0f 90       	pop	r0
    2694:	1f 90       	pop	r1
    2696:	18 95       	reti

00002698 <__divsf3>:
    2698:	0c d0       	rcall	.+24     	; 0x26b2 <__divsf3x>
    269a:	e6 c0       	rjmp	.+460    	; 0x2868 <__fp_round>
    269c:	de d0       	rcall	.+444    	; 0x285a <__fp_pscB>
    269e:	40 f0       	brcs	.+16     	; 0x26b0 <__divsf3+0x18>
    26a0:	d5 d0       	rcall	.+426    	; 0x284c <__fp_pscA>
    26a2:	30 f0       	brcs	.+12     	; 0x26b0 <__divsf3+0x18>
    26a4:	21 f4       	brne	.+8      	; 0x26ae <__divsf3+0x16>
    26a6:	5f 3f       	cpi	r21, 0xFF	; 255
    26a8:	19 f0       	breq	.+6      	; 0x26b0 <__divsf3+0x18>
    26aa:	c7 c0       	rjmp	.+398    	; 0x283a <__fp_inf>
    26ac:	51 11       	cpse	r21, r1
    26ae:	10 c1       	rjmp	.+544    	; 0x28d0 <__fp_szero>
    26b0:	ca c0       	rjmp	.+404    	; 0x2846 <__fp_nan>

000026b2 <__divsf3x>:
    26b2:	eb d0       	rcall	.+470    	; 0x288a <__fp_split3>
    26b4:	98 f3       	brcs	.-26     	; 0x269c <__divsf3+0x4>

000026b6 <__divsf3_pse>:
    26b6:	99 23       	and	r25, r25
    26b8:	c9 f3       	breq	.-14     	; 0x26ac <__divsf3+0x14>
    26ba:	55 23       	and	r21, r21
    26bc:	b1 f3       	breq	.-20     	; 0x26aa <__divsf3+0x12>
    26be:	95 1b       	sub	r25, r21
    26c0:	55 0b       	sbc	r21, r21
    26c2:	bb 27       	eor	r27, r27
    26c4:	aa 27       	eor	r26, r26
    26c6:	62 17       	cp	r22, r18
    26c8:	73 07       	cpc	r23, r19
    26ca:	84 07       	cpc	r24, r20
    26cc:	38 f0       	brcs	.+14     	; 0x26dc <__divsf3_pse+0x26>
    26ce:	9f 5f       	subi	r25, 0xFF	; 255
    26d0:	5f 4f       	sbci	r21, 0xFF	; 255
    26d2:	22 0f       	add	r18, r18
    26d4:	33 1f       	adc	r19, r19
    26d6:	44 1f       	adc	r20, r20
    26d8:	aa 1f       	adc	r26, r26
    26da:	a9 f3       	breq	.-22     	; 0x26c6 <__divsf3_pse+0x10>
    26dc:	33 d0       	rcall	.+102    	; 0x2744 <__divsf3_pse+0x8e>
    26de:	0e 2e       	mov	r0, r30
    26e0:	3a f0       	brmi	.+14     	; 0x26f0 <__divsf3_pse+0x3a>
    26e2:	e0 e8       	ldi	r30, 0x80	; 128
    26e4:	30 d0       	rcall	.+96     	; 0x2746 <__divsf3_pse+0x90>
    26e6:	91 50       	subi	r25, 0x01	; 1
    26e8:	50 40       	sbci	r21, 0x00	; 0
    26ea:	e6 95       	lsr	r30
    26ec:	00 1c       	adc	r0, r0
    26ee:	ca f7       	brpl	.-14     	; 0x26e2 <__divsf3_pse+0x2c>
    26f0:	29 d0       	rcall	.+82     	; 0x2744 <__divsf3_pse+0x8e>
    26f2:	fe 2f       	mov	r31, r30
    26f4:	27 d0       	rcall	.+78     	; 0x2744 <__divsf3_pse+0x8e>
    26f6:	66 0f       	add	r22, r22
    26f8:	77 1f       	adc	r23, r23
    26fa:	88 1f       	adc	r24, r24
    26fc:	bb 1f       	adc	r27, r27
    26fe:	26 17       	cp	r18, r22
    2700:	37 07       	cpc	r19, r23
    2702:	48 07       	cpc	r20, r24
    2704:	ab 07       	cpc	r26, r27
    2706:	b0 e8       	ldi	r27, 0x80	; 128
    2708:	09 f0       	breq	.+2      	; 0x270c <__divsf3_pse+0x56>
    270a:	bb 0b       	sbc	r27, r27
    270c:	80 2d       	mov	r24, r0
    270e:	bf 01       	movw	r22, r30
    2710:	ff 27       	eor	r31, r31
    2712:	93 58       	subi	r25, 0x83	; 131
    2714:	5f 4f       	sbci	r21, 0xFF	; 255
    2716:	2a f0       	brmi	.+10     	; 0x2722 <__divsf3_pse+0x6c>
    2718:	9e 3f       	cpi	r25, 0xFE	; 254
    271a:	51 05       	cpc	r21, r1
    271c:	68 f0       	brcs	.+26     	; 0x2738 <__divsf3_pse+0x82>
    271e:	8d c0       	rjmp	.+282    	; 0x283a <__fp_inf>
    2720:	d7 c0       	rjmp	.+430    	; 0x28d0 <__fp_szero>
    2722:	5f 3f       	cpi	r21, 0xFF	; 255
    2724:	ec f3       	brlt	.-6      	; 0x2720 <__divsf3_pse+0x6a>
    2726:	98 3e       	cpi	r25, 0xE8	; 232
    2728:	dc f3       	brlt	.-10     	; 0x2720 <__divsf3_pse+0x6a>
    272a:	86 95       	lsr	r24
    272c:	77 95       	ror	r23
    272e:	67 95       	ror	r22
    2730:	b7 95       	ror	r27
    2732:	f7 95       	ror	r31
    2734:	9f 5f       	subi	r25, 0xFF	; 255
    2736:	c9 f7       	brne	.-14     	; 0x272a <__divsf3_pse+0x74>
    2738:	88 0f       	add	r24, r24
    273a:	91 1d       	adc	r25, r1
    273c:	96 95       	lsr	r25
    273e:	87 95       	ror	r24
    2740:	97 f9       	bld	r25, 7
    2742:	08 95       	ret
    2744:	e1 e0       	ldi	r30, 0x01	; 1
    2746:	66 0f       	add	r22, r22
    2748:	77 1f       	adc	r23, r23
    274a:	88 1f       	adc	r24, r24
    274c:	bb 1f       	adc	r27, r27
    274e:	62 17       	cp	r22, r18
    2750:	73 07       	cpc	r23, r19
    2752:	84 07       	cpc	r24, r20
    2754:	ba 07       	cpc	r27, r26
    2756:	20 f0       	brcs	.+8      	; 0x2760 <__divsf3_pse+0xaa>
    2758:	62 1b       	sub	r22, r18
    275a:	73 0b       	sbc	r23, r19
    275c:	84 0b       	sbc	r24, r20
    275e:	ba 0b       	sbc	r27, r26
    2760:	ee 1f       	adc	r30, r30
    2762:	88 f7       	brcc	.-30     	; 0x2746 <__divsf3_pse+0x90>
    2764:	e0 95       	com	r30
    2766:	08 95       	ret

00002768 <__fixunssfsi>:
    2768:	98 d0       	rcall	.+304    	; 0x289a <__fp_splitA>
    276a:	88 f0       	brcs	.+34     	; 0x278e <__fixunssfsi+0x26>
    276c:	9f 57       	subi	r25, 0x7F	; 127
    276e:	90 f0       	brcs	.+36     	; 0x2794 <__fixunssfsi+0x2c>
    2770:	b9 2f       	mov	r27, r25
    2772:	99 27       	eor	r25, r25
    2774:	b7 51       	subi	r27, 0x17	; 23
    2776:	a0 f0       	brcs	.+40     	; 0x27a0 <__fixunssfsi+0x38>
    2778:	d1 f0       	breq	.+52     	; 0x27ae <__fixunssfsi+0x46>
    277a:	66 0f       	add	r22, r22
    277c:	77 1f       	adc	r23, r23
    277e:	88 1f       	adc	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	1a f0       	brmi	.+6      	; 0x278a <__fixunssfsi+0x22>
    2784:	ba 95       	dec	r27
    2786:	c9 f7       	brne	.-14     	; 0x277a <__fixunssfsi+0x12>
    2788:	12 c0       	rjmp	.+36     	; 0x27ae <__fixunssfsi+0x46>
    278a:	b1 30       	cpi	r27, 0x01	; 1
    278c:	81 f0       	breq	.+32     	; 0x27ae <__fixunssfsi+0x46>
    278e:	9f d0       	rcall	.+318    	; 0x28ce <__fp_zero>
    2790:	b1 e0       	ldi	r27, 0x01	; 1
    2792:	08 95       	ret
    2794:	9c c0       	rjmp	.+312    	; 0x28ce <__fp_zero>
    2796:	67 2f       	mov	r22, r23
    2798:	78 2f       	mov	r23, r24
    279a:	88 27       	eor	r24, r24
    279c:	b8 5f       	subi	r27, 0xF8	; 248
    279e:	39 f0       	breq	.+14     	; 0x27ae <__fixunssfsi+0x46>
    27a0:	b9 3f       	cpi	r27, 0xF9	; 249
    27a2:	cc f3       	brlt	.-14     	; 0x2796 <__fixunssfsi+0x2e>
    27a4:	86 95       	lsr	r24
    27a6:	77 95       	ror	r23
    27a8:	67 95       	ror	r22
    27aa:	b3 95       	inc	r27
    27ac:	d9 f7       	brne	.-10     	; 0x27a4 <__fixunssfsi+0x3c>
    27ae:	3e f4       	brtc	.+14     	; 0x27be <__fixunssfsi+0x56>
    27b0:	90 95       	com	r25
    27b2:	80 95       	com	r24
    27b4:	70 95       	com	r23
    27b6:	61 95       	neg	r22
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	8f 4f       	sbci	r24, 0xFF	; 255
    27bc:	9f 4f       	sbci	r25, 0xFF	; 255
    27be:	08 95       	ret

000027c0 <__floatunsisf>:
    27c0:	e8 94       	clt
    27c2:	09 c0       	rjmp	.+18     	; 0x27d6 <__floatsisf+0x12>

000027c4 <__floatsisf>:
    27c4:	97 fb       	bst	r25, 7
    27c6:	3e f4       	brtc	.+14     	; 0x27d6 <__floatsisf+0x12>
    27c8:	90 95       	com	r25
    27ca:	80 95       	com	r24
    27cc:	70 95       	com	r23
    27ce:	61 95       	neg	r22
    27d0:	7f 4f       	sbci	r23, 0xFF	; 255
    27d2:	8f 4f       	sbci	r24, 0xFF	; 255
    27d4:	9f 4f       	sbci	r25, 0xFF	; 255
    27d6:	99 23       	and	r25, r25
    27d8:	a9 f0       	breq	.+42     	; 0x2804 <__floatsisf+0x40>
    27da:	f9 2f       	mov	r31, r25
    27dc:	96 e9       	ldi	r25, 0x96	; 150
    27de:	bb 27       	eor	r27, r27
    27e0:	93 95       	inc	r25
    27e2:	f6 95       	lsr	r31
    27e4:	87 95       	ror	r24
    27e6:	77 95       	ror	r23
    27e8:	67 95       	ror	r22
    27ea:	b7 95       	ror	r27
    27ec:	f1 11       	cpse	r31, r1
    27ee:	f8 cf       	rjmp	.-16     	; 0x27e0 <__floatsisf+0x1c>
    27f0:	fa f4       	brpl	.+62     	; 0x2830 <__floatsisf+0x6c>
    27f2:	bb 0f       	add	r27, r27
    27f4:	11 f4       	brne	.+4      	; 0x27fa <__floatsisf+0x36>
    27f6:	60 ff       	sbrs	r22, 0
    27f8:	1b c0       	rjmp	.+54     	; 0x2830 <__floatsisf+0x6c>
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2800:	9f 4f       	sbci	r25, 0xFF	; 255
    2802:	16 c0       	rjmp	.+44     	; 0x2830 <__floatsisf+0x6c>
    2804:	88 23       	and	r24, r24
    2806:	11 f0       	breq	.+4      	; 0x280c <__floatsisf+0x48>
    2808:	96 e9       	ldi	r25, 0x96	; 150
    280a:	11 c0       	rjmp	.+34     	; 0x282e <__floatsisf+0x6a>
    280c:	77 23       	and	r23, r23
    280e:	21 f0       	breq	.+8      	; 0x2818 <__floatsisf+0x54>
    2810:	9e e8       	ldi	r25, 0x8E	; 142
    2812:	87 2f       	mov	r24, r23
    2814:	76 2f       	mov	r23, r22
    2816:	05 c0       	rjmp	.+10     	; 0x2822 <__floatsisf+0x5e>
    2818:	66 23       	and	r22, r22
    281a:	71 f0       	breq	.+28     	; 0x2838 <__floatsisf+0x74>
    281c:	96 e8       	ldi	r25, 0x86	; 134
    281e:	86 2f       	mov	r24, r22
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	60 e0       	ldi	r22, 0x00	; 0
    2824:	2a f0       	brmi	.+10     	; 0x2830 <__floatsisf+0x6c>
    2826:	9a 95       	dec	r25
    2828:	66 0f       	add	r22, r22
    282a:	77 1f       	adc	r23, r23
    282c:	88 1f       	adc	r24, r24
    282e:	da f7       	brpl	.-10     	; 0x2826 <__floatsisf+0x62>
    2830:	88 0f       	add	r24, r24
    2832:	96 95       	lsr	r25
    2834:	87 95       	ror	r24
    2836:	97 f9       	bld	r25, 7
    2838:	08 95       	ret

0000283a <__fp_inf>:
    283a:	97 f9       	bld	r25, 7
    283c:	9f 67       	ori	r25, 0x7F	; 127
    283e:	80 e8       	ldi	r24, 0x80	; 128
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	08 95       	ret

00002846 <__fp_nan>:
    2846:	9f ef       	ldi	r25, 0xFF	; 255
    2848:	80 ec       	ldi	r24, 0xC0	; 192
    284a:	08 95       	ret

0000284c <__fp_pscA>:
    284c:	00 24       	eor	r0, r0
    284e:	0a 94       	dec	r0
    2850:	16 16       	cp	r1, r22
    2852:	17 06       	cpc	r1, r23
    2854:	18 06       	cpc	r1, r24
    2856:	09 06       	cpc	r0, r25
    2858:	08 95       	ret

0000285a <__fp_pscB>:
    285a:	00 24       	eor	r0, r0
    285c:	0a 94       	dec	r0
    285e:	12 16       	cp	r1, r18
    2860:	13 06       	cpc	r1, r19
    2862:	14 06       	cpc	r1, r20
    2864:	05 06       	cpc	r0, r21
    2866:	08 95       	ret

00002868 <__fp_round>:
    2868:	09 2e       	mov	r0, r25
    286a:	03 94       	inc	r0
    286c:	00 0c       	add	r0, r0
    286e:	11 f4       	brne	.+4      	; 0x2874 <__fp_round+0xc>
    2870:	88 23       	and	r24, r24
    2872:	52 f0       	brmi	.+20     	; 0x2888 <__fp_round+0x20>
    2874:	bb 0f       	add	r27, r27
    2876:	40 f4       	brcc	.+16     	; 0x2888 <__fp_round+0x20>
    2878:	bf 2b       	or	r27, r31
    287a:	11 f4       	brne	.+4      	; 0x2880 <__fp_round+0x18>
    287c:	60 ff       	sbrs	r22, 0
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <__fp_round+0x20>
    2880:	6f 5f       	subi	r22, 0xFF	; 255
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	8f 4f       	sbci	r24, 0xFF	; 255
    2886:	9f 4f       	sbci	r25, 0xFF	; 255
    2888:	08 95       	ret

0000288a <__fp_split3>:
    288a:	57 fd       	sbrc	r21, 7
    288c:	90 58       	subi	r25, 0x80	; 128
    288e:	44 0f       	add	r20, r20
    2890:	55 1f       	adc	r21, r21
    2892:	59 f0       	breq	.+22     	; 0x28aa <__fp_splitA+0x10>
    2894:	5f 3f       	cpi	r21, 0xFF	; 255
    2896:	71 f0       	breq	.+28     	; 0x28b4 <__fp_splitA+0x1a>
    2898:	47 95       	ror	r20

0000289a <__fp_splitA>:
    289a:	88 0f       	add	r24, r24
    289c:	97 fb       	bst	r25, 7
    289e:	99 1f       	adc	r25, r25
    28a0:	61 f0       	breq	.+24     	; 0x28ba <__fp_splitA+0x20>
    28a2:	9f 3f       	cpi	r25, 0xFF	; 255
    28a4:	79 f0       	breq	.+30     	; 0x28c4 <__fp_splitA+0x2a>
    28a6:	87 95       	ror	r24
    28a8:	08 95       	ret
    28aa:	12 16       	cp	r1, r18
    28ac:	13 06       	cpc	r1, r19
    28ae:	14 06       	cpc	r1, r20
    28b0:	55 1f       	adc	r21, r21
    28b2:	f2 cf       	rjmp	.-28     	; 0x2898 <__fp_split3+0xe>
    28b4:	46 95       	lsr	r20
    28b6:	f1 df       	rcall	.-30     	; 0x289a <__fp_splitA>
    28b8:	08 c0       	rjmp	.+16     	; 0x28ca <__fp_splitA+0x30>
    28ba:	16 16       	cp	r1, r22
    28bc:	17 06       	cpc	r1, r23
    28be:	18 06       	cpc	r1, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	f1 cf       	rjmp	.-30     	; 0x28a6 <__fp_splitA+0xc>
    28c4:	86 95       	lsr	r24
    28c6:	71 05       	cpc	r23, r1
    28c8:	61 05       	cpc	r22, r1
    28ca:	08 94       	sec
    28cc:	08 95       	ret

000028ce <__fp_zero>:
    28ce:	e8 94       	clt

000028d0 <__fp_szero>:
    28d0:	bb 27       	eor	r27, r27
    28d2:	66 27       	eor	r22, r22
    28d4:	77 27       	eor	r23, r23
    28d6:	cb 01       	movw	r24, r22
    28d8:	97 f9       	bld	r25, 7
    28da:	08 95       	ret

000028dc <__mulsf3>:
    28dc:	0b d0       	rcall	.+22     	; 0x28f4 <__mulsf3x>
    28de:	c4 cf       	rjmp	.-120    	; 0x2868 <__fp_round>
    28e0:	b5 df       	rcall	.-150    	; 0x284c <__fp_pscA>
    28e2:	28 f0       	brcs	.+10     	; 0x28ee <__mulsf3+0x12>
    28e4:	ba df       	rcall	.-140    	; 0x285a <__fp_pscB>
    28e6:	18 f0       	brcs	.+6      	; 0x28ee <__mulsf3+0x12>
    28e8:	95 23       	and	r25, r21
    28ea:	09 f0       	breq	.+2      	; 0x28ee <__mulsf3+0x12>
    28ec:	a6 cf       	rjmp	.-180    	; 0x283a <__fp_inf>
    28ee:	ab cf       	rjmp	.-170    	; 0x2846 <__fp_nan>
    28f0:	11 24       	eor	r1, r1
    28f2:	ee cf       	rjmp	.-36     	; 0x28d0 <__fp_szero>

000028f4 <__mulsf3x>:
    28f4:	ca df       	rcall	.-108    	; 0x288a <__fp_split3>
    28f6:	a0 f3       	brcs	.-24     	; 0x28e0 <__mulsf3+0x4>

000028f8 <__mulsf3_pse>:
    28f8:	95 9f       	mul	r25, r21
    28fa:	d1 f3       	breq	.-12     	; 0x28f0 <__mulsf3+0x14>
    28fc:	95 0f       	add	r25, r21
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	55 1f       	adc	r21, r21
    2902:	62 9f       	mul	r22, r18
    2904:	f0 01       	movw	r30, r0
    2906:	72 9f       	mul	r23, r18
    2908:	bb 27       	eor	r27, r27
    290a:	f0 0d       	add	r31, r0
    290c:	b1 1d       	adc	r27, r1
    290e:	63 9f       	mul	r22, r19
    2910:	aa 27       	eor	r26, r26
    2912:	f0 0d       	add	r31, r0
    2914:	b1 1d       	adc	r27, r1
    2916:	aa 1f       	adc	r26, r26
    2918:	64 9f       	mul	r22, r20
    291a:	66 27       	eor	r22, r22
    291c:	b0 0d       	add	r27, r0
    291e:	a1 1d       	adc	r26, r1
    2920:	66 1f       	adc	r22, r22
    2922:	82 9f       	mul	r24, r18
    2924:	22 27       	eor	r18, r18
    2926:	b0 0d       	add	r27, r0
    2928:	a1 1d       	adc	r26, r1
    292a:	62 1f       	adc	r22, r18
    292c:	73 9f       	mul	r23, r19
    292e:	b0 0d       	add	r27, r0
    2930:	a1 1d       	adc	r26, r1
    2932:	62 1f       	adc	r22, r18
    2934:	83 9f       	mul	r24, r19
    2936:	a0 0d       	add	r26, r0
    2938:	61 1d       	adc	r22, r1
    293a:	22 1f       	adc	r18, r18
    293c:	74 9f       	mul	r23, r20
    293e:	33 27       	eor	r19, r19
    2940:	a0 0d       	add	r26, r0
    2942:	61 1d       	adc	r22, r1
    2944:	23 1f       	adc	r18, r19
    2946:	84 9f       	mul	r24, r20
    2948:	60 0d       	add	r22, r0
    294a:	21 1d       	adc	r18, r1
    294c:	82 2f       	mov	r24, r18
    294e:	76 2f       	mov	r23, r22
    2950:	6a 2f       	mov	r22, r26
    2952:	11 24       	eor	r1, r1
    2954:	9f 57       	subi	r25, 0x7F	; 127
    2956:	50 40       	sbci	r21, 0x00	; 0
    2958:	8a f0       	brmi	.+34     	; 0x297c <__mulsf3_pse+0x84>
    295a:	e1 f0       	breq	.+56     	; 0x2994 <__mulsf3_pse+0x9c>
    295c:	88 23       	and	r24, r24
    295e:	4a f0       	brmi	.+18     	; 0x2972 <__mulsf3_pse+0x7a>
    2960:	ee 0f       	add	r30, r30
    2962:	ff 1f       	adc	r31, r31
    2964:	bb 1f       	adc	r27, r27
    2966:	66 1f       	adc	r22, r22
    2968:	77 1f       	adc	r23, r23
    296a:	88 1f       	adc	r24, r24
    296c:	91 50       	subi	r25, 0x01	; 1
    296e:	50 40       	sbci	r21, 0x00	; 0
    2970:	a9 f7       	brne	.-22     	; 0x295c <__mulsf3_pse+0x64>
    2972:	9e 3f       	cpi	r25, 0xFE	; 254
    2974:	51 05       	cpc	r21, r1
    2976:	70 f0       	brcs	.+28     	; 0x2994 <__mulsf3_pse+0x9c>
    2978:	60 cf       	rjmp	.-320    	; 0x283a <__fp_inf>
    297a:	aa cf       	rjmp	.-172    	; 0x28d0 <__fp_szero>
    297c:	5f 3f       	cpi	r21, 0xFF	; 255
    297e:	ec f3       	brlt	.-6      	; 0x297a <__mulsf3_pse+0x82>
    2980:	98 3e       	cpi	r25, 0xE8	; 232
    2982:	dc f3       	brlt	.-10     	; 0x297a <__mulsf3_pse+0x82>
    2984:	86 95       	lsr	r24
    2986:	77 95       	ror	r23
    2988:	67 95       	ror	r22
    298a:	b7 95       	ror	r27
    298c:	f7 95       	ror	r31
    298e:	e7 95       	ror	r30
    2990:	9f 5f       	subi	r25, 0xFF	; 255
    2992:	c1 f7       	brne	.-16     	; 0x2984 <__mulsf3_pse+0x8c>
    2994:	fe 2b       	or	r31, r30
    2996:	88 0f       	add	r24, r24
    2998:	91 1d       	adc	r25, r1
    299a:	96 95       	lsr	r25
    299c:	87 95       	ror	r24
    299e:	97 f9       	bld	r25, 7
    29a0:	08 95       	ret

000029a2 <__udivmodhi4>:
    29a2:	aa 1b       	sub	r26, r26
    29a4:	bb 1b       	sub	r27, r27
    29a6:	51 e1       	ldi	r21, 0x11	; 17
    29a8:	07 c0       	rjmp	.+14     	; 0x29b8 <__udivmodhi4_ep>

000029aa <__udivmodhi4_loop>:
    29aa:	aa 1f       	adc	r26, r26
    29ac:	bb 1f       	adc	r27, r27
    29ae:	a6 17       	cp	r26, r22
    29b0:	b7 07       	cpc	r27, r23
    29b2:	10 f0       	brcs	.+4      	; 0x29b8 <__udivmodhi4_ep>
    29b4:	a6 1b       	sub	r26, r22
    29b6:	b7 0b       	sbc	r27, r23

000029b8 <__udivmodhi4_ep>:
    29b8:	88 1f       	adc	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	5a 95       	dec	r21
    29be:	a9 f7       	brne	.-22     	; 0x29aa <__udivmodhi4_loop>
    29c0:	80 95       	com	r24
    29c2:	90 95       	com	r25
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	08 95       	ret

000029ca <__divmodhi4>:
    29ca:	97 fb       	bst	r25, 7
    29cc:	07 2e       	mov	r0, r23
    29ce:	16 f4       	brtc	.+4      	; 0x29d4 <__divmodhi4+0xa>
    29d0:	00 94       	com	r0
    29d2:	06 d0       	rcall	.+12     	; 0x29e0 <__divmodhi4_neg1>
    29d4:	77 fd       	sbrc	r23, 7
    29d6:	08 d0       	rcall	.+16     	; 0x29e8 <__divmodhi4_neg2>
    29d8:	e4 df       	rcall	.-56     	; 0x29a2 <__udivmodhi4>
    29da:	07 fc       	sbrc	r0, 7
    29dc:	05 d0       	rcall	.+10     	; 0x29e8 <__divmodhi4_neg2>
    29de:	3e f4       	brtc	.+14     	; 0x29ee <__divmodhi4_exit>

000029e0 <__divmodhi4_neg1>:
    29e0:	90 95       	com	r25
    29e2:	81 95       	neg	r24
    29e4:	9f 4f       	sbci	r25, 0xFF	; 255
    29e6:	08 95       	ret

000029e8 <__divmodhi4_neg2>:
    29e8:	70 95       	com	r23
    29ea:	61 95       	neg	r22
    29ec:	7f 4f       	sbci	r23, 0xFF	; 255

000029ee <__divmodhi4_exit>:
    29ee:	08 95       	ret

000029f0 <__udivmodsi4>:
    29f0:	a1 e2       	ldi	r26, 0x21	; 33
    29f2:	1a 2e       	mov	r1, r26
    29f4:	aa 1b       	sub	r26, r26
    29f6:	bb 1b       	sub	r27, r27
    29f8:	fd 01       	movw	r30, r26
    29fa:	0d c0       	rjmp	.+26     	; 0x2a16 <__udivmodsi4_ep>

000029fc <__udivmodsi4_loop>:
    29fc:	aa 1f       	adc	r26, r26
    29fe:	bb 1f       	adc	r27, r27
    2a00:	ee 1f       	adc	r30, r30
    2a02:	ff 1f       	adc	r31, r31
    2a04:	a2 17       	cp	r26, r18
    2a06:	b3 07       	cpc	r27, r19
    2a08:	e4 07       	cpc	r30, r20
    2a0a:	f5 07       	cpc	r31, r21
    2a0c:	20 f0       	brcs	.+8      	; 0x2a16 <__udivmodsi4_ep>
    2a0e:	a2 1b       	sub	r26, r18
    2a10:	b3 0b       	sbc	r27, r19
    2a12:	e4 0b       	sbc	r30, r20
    2a14:	f5 0b       	sbc	r31, r21

00002a16 <__udivmodsi4_ep>:
    2a16:	66 1f       	adc	r22, r22
    2a18:	77 1f       	adc	r23, r23
    2a1a:	88 1f       	adc	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	1a 94       	dec	r1
    2a20:	69 f7       	brne	.-38     	; 0x29fc <__udivmodsi4_loop>
    2a22:	60 95       	com	r22
    2a24:	70 95       	com	r23
    2a26:	80 95       	com	r24
    2a28:	90 95       	com	r25
    2a2a:	9b 01       	movw	r18, r22
    2a2c:	ac 01       	movw	r20, r24
    2a2e:	bd 01       	movw	r22, r26
    2a30:	cf 01       	movw	r24, r30
    2a32:	08 95       	ret

00002a34 <__umulhisi3>:
    2a34:	a2 9f       	mul	r26, r18
    2a36:	b0 01       	movw	r22, r0
    2a38:	b3 9f       	mul	r27, r19
    2a3a:	c0 01       	movw	r24, r0
    2a3c:	a3 9f       	mul	r26, r19
    2a3e:	70 0d       	add	r23, r0
    2a40:	81 1d       	adc	r24, r1
    2a42:	11 24       	eor	r1, r1
    2a44:	91 1d       	adc	r25, r1
    2a46:	b2 9f       	mul	r27, r18
    2a48:	70 0d       	add	r23, r0
    2a4a:	81 1d       	adc	r24, r1
    2a4c:	11 24       	eor	r1, r1
    2a4e:	91 1d       	adc	r25, r1
    2a50:	08 95       	ret

00002a52 <strlen>:
    2a52:	fc 01       	movw	r30, r24
    2a54:	01 90       	ld	r0, Z+
    2a56:	00 20       	and	r0, r0
    2a58:	e9 f7       	brne	.-6      	; 0x2a54 <strlen+0x2>
    2a5a:	80 95       	com	r24
    2a5c:	90 95       	com	r25
    2a5e:	8e 0f       	add	r24, r30
    2a60:	9f 1f       	adc	r25, r31
    2a62:	08 95       	ret

00002a64 <_exit>:
    2a64:	f8 94       	cli

00002a66 <__stop_program>:
    2a66:	ff cf       	rjmp	.-2      	; 0x2a66 <__stop_program>
